<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AGL4DotNET.4</name>
    </assembly>
    <members>
        <member name="T:Accon.AGLink.AGL4_Class.AGL32">
            <summary>
            Leitet die Funktionen für AGLink 32-Bit durch
            </summary>
            <summary>
            Leitet die Funktionen für AGLink 32-Bit durch
            </summary>
            <summary>
            Leitet die Funktionen für AGLink 32-Bit durch
            </summary>
            <summary>
            Leitet die Funktionen für AGLink 32-Bit durch
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4_Class.IAGL">
            <summary>
            Schnittstelle zu den nativen AGLink-Funktionen
            </summary>
            <summary>
            Schnittstelle zu den nativen AGLink-Funktionen
            </summary>
            <summary>
            Schnittstelle zu den nativen AGLink-Funktionen
            </summary>
            <summary>
            Schnittstelle zu den nativen AGLink-Funktionen
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4">
            <summary>
            Teilklasse für Konstantendefinitionen
            </summary>
            <summary>
            Diese Klasse stellt die notwendigen Funktionen, Strukturen und Konstanten
            der AGLink40.dll zur Verfügung.
            Alle notwendigen Elemente sind statisch deklariert und sind ohne eine Instanz
            zu verwenden. Eine weitere Ableitung ist ebenfalls nicht erlaubt (Schlüsselwort sealed).
            </summary>
            <summary>
            Teilklasse für Aufzähleungsdefinitionen
            </summary>
            <summary>
            Funktionen für optimiertes Lesen und Schreiben
            </summary>
            <summary>
            Teilklasse zur Definition von Strukturen
            </summary>
            <summary>
            Diese Klasse stellt die notwendigen Funktionen, Strukturen und Konstanten
            der AGLink40.dll zur Verfügung.
            Alle notwendigen Elemente sind statisch deklariert und sind ohne eine Instanz
            zu verwenden. Eine weitere Ableitung ist ebenfalls nicht erlaubt (Schlüsselwort sealed).
            </summary>
            <summary>
            Funktionen zur Kommunikation
            </summary>
            <summary>
            Funktionen für Alarme, Scans, Archive, Zyklisches Lesen
            </summary>
            <summary>
            Funktionen zur Konvertierung
            </summary>
            <summary>
            Funktionen für Lesen und Schreiben
            </summary>
            <summary>
            Funktionen für optimiertes Lesen und Schreiben
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MAX_DEVICES">
            <summary>
            Max devices
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MAX_PLCS">
            <summary>
            Max plcs (connections) per device
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_UNKNOWN">
            <summary>
            Device not specified/unknonwn
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7CONN_IE">
            <summary>
            Device type S7-CONN/IE
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_TCPIP">
            <summary>
            Devicetype S7-TCP/IP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_NL">
            <summary>
            Devicetype S7-NetLink
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_NLPRO">
            <summary>
            Devicetype S7-NetLink-PRO
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_NLUSB">
            <summary>
            Devicetype S7-NetLink-USB
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_SOFTING">
            <summary>
            Devicetype S7-Softing
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_CIF">
            <summary>
            Devicetype S7-CIF
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_MPI_SER">
            <summary>
            Devicetype S7-MPI (e.g. with ACCON-MPI-Adapter)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_MPI_USB">
            <summary>
            Devicetype S7-MPI über USB
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_TS_AT">
            <summary>
            Devicetype S7 TS/AT
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_TS_TAPI">
            <summary>
            Devicetype S7 TS/TAPI
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_PCCP">
            <summary>
            Devicetype S7-PC/CP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_PPI">
            <summary>
            Devicetype S7-PPI
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S5_TCPIP">
            <summary>
            Devicetype S5-TCP/IP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S5_AS511">
            <summary>
            Devicetype S5 serial (e.g. with ACCON-COM-Cable)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_RK">
            <summary>
            Devicetype RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_TS_CAPI">
            <summary>
            Devicetype S7 TS/CAPI
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_NL50">
            <summary>
            Devicetype S7 NetLink50
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_CIFX">
            <summary>
            Devicetype S7 CIFX
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_RED_CONN">
            <summary>
            Devicetype for S7 redundant connection
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_RFC_1006">
            <summary>
            Devicetype for RFC1006
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_TCPIP_TIA">
            <summary>
            Devicetype for S7-TCP/IP for accessing S7-1200 and S7-1500
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_SYMBOLIK_TIA">
            <summary>
            Devicetype for S7-TCP/IP TIA to be able to load TIA Portal project
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYPE_S7_SYMBOLIK">
            <summary>
            Devicetype for S7-Symbolic to access STEP-7 projects
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MAX_PARA_TYPES">
            <summary>
            Max count of communication methods (not all implemented)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7CONN_IE">
            <summary>
            If this bit is set, the devictype S7-CONN/IE is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_TCPIP">
            <summary>
            If this bit is set, the devictype S7-TCP/IP is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_NL">
            <summary>
            If this bit is set, the devictype S7-NetLink is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_NL50">
            <summary>
            If this bit is set, the devictype S7-NetLink 50 is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_NLPRO">
            <summary>
            If this bit is set, the devictype S7-NetLink-PRO is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_NLUSB">
            <summary>
            If this bit is set, the devictype S7-NetLink-USB is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_SOFTING">
            <summary>
            If this bit is set, the devictype S7-Softing is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_CIF">
            <summary>
            If this bit is set, the devictype S7-CIF is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_CIFX">
            <summary>
            If this bit is set, the devictype S7-CIFX is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_MPI_SER">
            <summary>
            If this bit is set, the devictype S7-MPI is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_MPI_USB">
            <summary>
            If this bit is set, the devictype S7-MPI with USB is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_TS_AT">
            <summary>
            If this bit is set, the devictype S7 TS/AT is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_TS_TAPI">
            <summary>
            If this bit is set, the devictype S7-TS/TAPI is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_TS_CAPI">
            <summary>
            If this bit is set, the devictype S7-TS/CAPI is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_PCCP">
            <summary>
            If this bit is set, the devictype S7-PC/CP is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_PPI">
            <summary>
            If this bit is set, the devictype S7-PPI is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S5_TCPIP">
            <summary>
            If this bit is set, the devictype S5-TCP/IP is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S5_AS511">
            <summary>
            If this bit is set, the devictype S5 serial is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_RK">
            <summary>
            If this bit is set, the devictype RK512 is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_RED_CONN">
            <summary>
            If this bit is set, the devictype S7 redundant connection is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_RFC_1006">
            <summary>
            If this bit is set, the devictype RFC1006 is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_SYMBOLIK_TIA">
            <summary>
            If this bit is set, access to TIA Portal projects is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MASK_S7_SYMBOLIK">
            <summary>
            If this bit is set, access to STEP-7 projects is supported
            You can check this with the function Accon.AGL4.GetOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ERROR_CLASS_MASK">
            <summary>
            Mask to get the error class from a function result
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ERROR_NUMBER_MASK">
            <summary>
            Mask to get the error number from a function result
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ERROR_CLASS_SUCCESS">
            <summary>
            Error calss for successful functions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ERROR_CLASS_GLOBAL">
            <summary>
            Error class for global errors
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ERROR_CLASS_L1">
            <summary>
            Error class for error in layer 1
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ERROR_CLASS_L2">
            <summary>
            Error class for error in layer 2
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ERROR_CLASS_L3">
            <summary>
            Error class for error in layer 3
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ERROR_CLASS_L4">
            <summary>
            Error class for error in layer 4
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ERROR_CLASS_L5">
            <summary>
            Error class for error in layer 5
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ERROR_CLASS_L6">
            <summary>
            Error class for error in layer 6
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ERROR_CLASS_L7">
            <summary>
            Error class for error in layer 7
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ERROR_CLASS_INTERNAL">
            <summary>
            Error class for internal errors
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_SUCCESS">
            <summary>
            Function successful, not errors
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PENDING">
            <summary>
            No error, function still working
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_FUNC_NOT_IMPLEMENTED">
            <summary>
            Function not implemented
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PARAMETER_ERROR">
            <summary>
            Wrong parameter values
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_INVALID_DEV_NUMBER">
            <summary>
            Invalid device number
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_INVALID_PLC_NUMBER">
            <summary>
            Invalid plc number
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_INVALID_PARA_TYPE">
            <summary>
            Invalid type of parameter
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_OUT_OF_MEMORY">
            <summary>
            Not enough memory
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_DEVICE_OPEN">
            <summary>
            Device already opened
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_DEVICE_NOT_OPEN">
            <summary>
            Device not openend
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_JOB_REMOVED">
            <summary>
            Job removed
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_INVALID_JOB">
            <summary>
            Invalid job number
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_FUNC_NOT_SUPPORTED">
            <summary>
            Function not supported
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ADAPTER_NOT_INIT">
            <summary>
            Adapter not initialized
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_OUT_OF_CONNECTIONS">
            <summary>
            Out of free connection slots
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_DEVICE_NOT_SUPPORTED">
            <summary>
            Device not supported
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_HARDWARE_NOT_FOUND">
            <summary>
            Hardware not found
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PARA_READ_ERROR">
            <summary>
            Error while reading parameters
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PARA_WRITE_ERROR">
            <summary>
            Error while writing parameters
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_TIME_EXPIRED">
            <summary>
            Demo expired
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_WRONG_CHAR_ERROR">
            <summary>
            Wrong characters or character format, convertion not possible
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_BUFF_TOO_SHORT">
            <summary>
            Buffer too short
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_FILE_NOT_FOUND">
            <summary>
            File not found
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_CONFIG_ERROR">
            <summary>
            Error opening the configuration program
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_DYN_DLL_ERROR">
            <summary>
            Error dynamically loading AGLink40
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_FILE_NOT_CREATED">
            <summary>
            File could not be created
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_WLD_READ_ERROR">
            <summary>
            Read WLD file failed
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_WLD_WRITE_ERROR">
            <summary>
            Write WLD file failed
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_WLD_INVALID_STRUCTURE">
             <summary>
            Invalid WLD file structure
             </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_WLD_MULTIPLE_BLOCK">
            <summary>
            Multiple occurances of same data block
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_REENTRANCY_ERROR">
            <summary>
            Function is not reentrant
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_NO_QUEUE">
            <summary>
            Job queue is full
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_INVALID_PACKET">
            <summary>
            Invalid package
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_NOT_CONNECTED">
            <summary>
            Not connected to plc
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_CONNECTION_CLOSED">
            <summary>
            Connection was closed
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_TIMEOUT">
            <summary>
            Timeout
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_WRONG_KONTEXT">
            <summary>
            Invalid context
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PLC_MEMORY_ERROR">
            <summary>
            PLC Memory error
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_WRONG_OP_STATE">
            <summary>
            Invalid operational state
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_WRONG_ADDRESS">
            <summary>
            Invalid address on plc
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_INVALID_MODE_ERROR">
            <summary>
            Invalid mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_NO_DATA_ERROR">
            <summary>
            Not data data block not found
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PLC_PRIORITY_CLASS_ERROR">
            <summary>
            Priority error
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_EMPTY_BLOCK_LIST">
            <summary>
            Empty block list
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PLC_BLOCKSIZE_ERROR">
            <summary>
            Error in the block size
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_INVALID_BLOCK_NUMBER">
            <summary>
            Invalid block number
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PROTECT_ERROR">
            <summary>
            Protection error
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_UNKNOWN_SZL_ID">
            <summary>
            Unknown szl id
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_UNKNOWN_SZL_INDEX">
            <summary>
            Unknonw szl index
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_NO_INFORMATION">
            <summary>
            Information not obtainable at this moment
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_UNKNOWN_PLC_ERROR">
            <summary>
            Unknown plc error (please report this error)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_HARDWARE_ERROR">
            <summary>
            Hardware error
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_OBJECT_ACCESS_NOT_ALLOWED">
            <summary>
            Access not allowed
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_CONTEXT_NOT_SUPPORTED">
            <summary>
            Context not supported
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_TYPE_NOT_SUPPORTED">
            <summary>
            Data type not supported
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PDU_ERROR">
            <summary>
            Internal error, please report this
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_NO_PLC_START">
            <summary>
            Error at startup of plc
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_NO_PLC_RESUME">
            <summary>
            Error at resume of plc
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_DISCONNECT_REQUEST">
            <summary>
            Disconnect requested
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PLC_NOT_FOUND">
            <summary>
            PLC not found
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_DATA_TOO_LONG">
            <summary>
            Too much data for this version of ACCON-AGLink
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PLCFUNC_NOT_SUPPORTED">
            <summary>
            PLC does not support this function
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_WRONG_PASSWORD">
            <summary>
            Wrong password
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PASSWORD_NOT_REQUIRED">
            <summary>
            No password required
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_CYCL_VAR_DEF_WRONG">
            <summary>
            Definition of the cyclic variable is wrong
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_CYCL_JOB_DOES_NOT_EXIST">
            <summary>
            Cyclic job does not exist
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_CYCL_INVALID_JOB_STATE">
            <summary>
            Invalid state of job
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_CYCL_INVALID_CYCLE_TIME">
            <summary>
            Invalid time definition
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_CYCL_NO_ADD_JOB_POSSIBLE">
            <summary>
            Not possible to add another cyclic job
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_CYCL_NO_MORE_DATA">
            <summary>
            No more data available
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_WRONG_TIME_FORMAT">
            <summary>
            Wrong time format
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_UNKNOWN_PI_NAME">
            <summary>
            Unknown PI Name
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_FILETRANSFER_ABORTED">
            <summary>
            Filetransfer aborted
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_NO_H_PLC_FOUND">
            <summary>
            No H-PLC found
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_DATA_NOT_CHANGED">
            <summary>
            Data not changed
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_DATA_CORRUPT">
            <summary>
            Data corrupted
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_L4_ERROR">
            <summary>
            Error at layer 4
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_READING_DEVINFO">
            <summary>
            Error reading device info
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_READING_BUSPARAS">
            <summary>
            Error reading bus parameters
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_WRITING_BUSPARAS">
            <summary>
            Error writing bus parameters
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_NO_RESOURCES">
            <summary>
            Device has no free resources
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_INVALID_DEVICE">
            <summary>
            Invalid device
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_ADAPTER_NOT_FOUND">
            <summary>
            Adapter not found
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_DRIVER_NOT_FOUND">
            <summary>
            Needed driver not found
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_OWN_ADDRESS">
            <summary>
            Requested adapter adress exists already
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_WRONG_HSA">
            <summary>
            HSA invalid (lesser or greater than active member)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_NOT_IN_RING">
            <summary>
            Adapter is not in logical ring
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_WRONG_PAKET">
            <summary>
            Wrong data in received package
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_UNKNOWN_ADAP_ERR">
            <summary>
            Unknown error number from adapter received
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_UNKNOWN_DRIVER_ERR">
            <summary>
            Unknown error number from driver received
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_ADAPTER_REMOVED">
            <summary>
            Adapter has been removed
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_MODEM_REMOVED">
            <summary>
            Modem has beend removed
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_NO_DIRECT_PLC">
            <summary>
            No direct plc found
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_WRONG_MPI_SPEED">
            <summary>
            Wrong speed at MPI bus
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_HSA">
            <summary>
            Address greater than HSA
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_DUP_ADDRESS">
            <summary>
            Requested adapter adress already exists
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_NO_MORE_DEVICE">
            <summary>
            No more devices found
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_BUS_FAILURE_1">
            <summary>
            Bus failure
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_BUS_FAILURE_2">
            <summary>
            Bus failure
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_NO_BUSPARA_TELEGRAMM">
            <summary>
            Automatic bus profile detection is not working, bus parameter telegram is missing
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_NO_LEGITIMATION">
            <summary>
            Legitimation to access the TS-Adapter is missing
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_ERROR_PORT_IN_USE">
            <summary>
            COM-Port already in use
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_NOT_FOUND">
            <summary>
            Modem not found
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_NOT_ONHOOK">
            <summary>
            Modem did not hook on
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_NOT_OFFHOOK">
            <summary>
            Modem did not hook off
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_ERROR_BASE_INIT">
            <summary>
            Modem error at basic initialization
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_ERROR_INIT1">
            <summary>
            Error at initstring 1
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_ERROR_INIT2">
            <summary>
            Error at initstring 2
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_ERROR_INIT3">
            <summary>
            Error at initstring 3
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_ERROR_INIT4">
            <summary>
            Error at initistring 4
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_ERROR_DIALTYPE">
            <summary>
            Error at dialtype sequence
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_ERROR_DIALTONE">
            <summary>
            Error at dialtone sequence
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_ERROR_AUTOANSWER">
            <summary>
            Error at automatic answer sequence
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_REMOVED">
            <summary>
            Modem has been removed
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_NO_CONNECTION">
            <summary>
            Connection could not be established
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_INVALID_USER">
            <summary>
            Could not log in, invalid user name
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_INVALID_PASSWORD">
            <summary>
            Could not log in, invalid password
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_MODEM_CALLBACK_NUMBER_ERR">
            <summary>
            Could not log in, there is already a callback number parameterized in the TS-Adapter
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.LL_PASSIVE">
            <summary>
            Passive member on bus
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.LL_NONE">
            <summary>
            No member on bus
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.LL_ACTIVE_READY">
            <summary>
            Active member on bus
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.LL_ACTIVE">
            <summary>
            Active member on bus
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.CONN_PG">
            <summary>
            Use PG-Connection
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.CONN_OP">
            <summary>
            Use OP-Connection
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.CONN_SONST">
            <summary>
            Use miscellaneous connection
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.CONN_PROJ">
            <summary>
            Use projected connection
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.CONN_ROUTE">
            <summary>
            Use routed connection
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROFIL_MPI">
            <summary>
            Use MPI profile
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROFIL_DP">
            <summary>
            Use DP profile
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROFIL_STD">
            <summary>
            Use default profile
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROFIL_FMS">
            <summary>
            Use FMS/DP profile
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROFIL_USER">
            <summary>
            Use user defined profile
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROFIL_PPI">
            <summary>
            Use PPI profile
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NOT_INIT">
            <summary>
            Job not initialized yet
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HOLD">
            <summary>
            Job is waiting for data of another job
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.WAITING">
            <summary>
            Job is waiting
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RUNNING">
            <summary>
            Job is running
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.FINISHED">
            <summary>
            Job successfully finished
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.ABORTED">
            <summary>
            Job aborted
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DELETED">
            <summary>
            Job was deleted
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATE_STOP">
            <summary>
            CPU is in stop
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATE_START">
            <summary>
            CPU is starting
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATE_RUN">
            <summary>
            CPU is in run
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATE_UNKNOWN">
            <summary>
            Unknown CPU state
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATE_RUN_SOLO">
            <summary>
            CPU in Run (Solo mode)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATE_RUN_RED">
            <summary>
             CPU in Run-R (redundant mode)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATE_HALT">
            <summary>
             CPU in Halt
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATE_CONNECTING">
            <summary>
            Connecting
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATE_UPDATING">
            <summary>
            Updating
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_UNKNOWN">
            <summary>
            Unknown CPU state
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_STOP_UPDATE">
            <summary>
            CPU is in stop (updating)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_STOP_CLEARALL">
            <summary>
            CPU is in stop (general reset)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_STOP_INIT">
            <summary>
            CPU is in stop (initializiing)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_STOP_INTERNAL">
            <summary>
            CPU is in stop (internal)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_START_COLD">
            <summary>
            CPU is starting (cold start)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_START_WARM">
            <summary>
            CPU is starting (warm start)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_START_RESUME">
            <summary>
            CPU is starting (restart)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_RUN_SOLO">
            <summary>
            CPU is in run (single)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_RUN_RED">
            <summary>
            CPU is in run-r (redundant)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_HALT">
            <summary>
            CPU is in halt
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_CONNECTING">
            <summary>
            CPU is connecting
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_UPDATING">
            <summary>
            Updating
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_DEFECT">
            <summary>
            Damaged
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_SELFTEST">
            <summary>
            Self testing
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.OPSTATEEX_NO_POWER">
            <summary>
            No power
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AERA_UNKNOWN">
            <summary>
            No Area set in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_IN">
            <summary>
            Area input in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_OUT">
            <summary>
            Area output in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_FLAG">
            <summary>
            Area flags in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_DATA">
            <summary>
            Area data in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_TIMER">
            <summary>
            Area timer in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_COUNTER">
            <summary>
            Area counter in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_SFLAG_200">
            <summary>
            Area special flags of S7-200 in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_VAR_200">
            <summary>
            Area variables of S7-200 in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_TIMER_200">
            <summary>
            Area timer of S7-200 in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_COUNTER_200">
            <summary>
            Area counter of S7-200 in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_PERIPHERIE">
            <summary>
            Area peripheral device in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_SFLAG_S5">
            <summary>
            Area special flags of S5 in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_PLCINFO_200">
            <summary>
            Area system information of S7-200 in DATA_RW40.OpArea
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_RK_DATA">
            <summary>
            Area data for DATA_RW40.OpArea with RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_RK_EXT_DATA">
            <summary>
            Area data from DX for DATA_RW40.OpArea with RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_RK_IN">
            <summary>
            Area input for DATA_RW40.OpArea with RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_RK_OUT">
            <summary>
            Area output for DATA_RW40.OpArea with RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_RK_FLAG">
            <summary>
            Area flags for DATA_RW40.OpArea with RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_RK_PERIPHERIE">
            <summary>
            Area peripheral data for DATA_RW40.OpArea with RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_RK_COUNTER">
            <summary>
            Area counter for DATA_RW40.OpArea with RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_RK_TIMER">
            <summary>
            Area timer for DATA_RW40.OpArea with RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_RK_ABS_ADR">
            <summary>
            Area absolute data for DATA_RW40.OpArea with RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_RK_SYS_ADR">
            <summary>
            Area system adresses for DATA_RW40.OpArea with RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AREA_RK_EXT_PERIPHERIE">
            <summary>
            Area advanced peripheral device data for DATA_RW40.OpArea with RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYP_UNKNOWN">
            <summary>
            No datatype device for DATA_RW40.OpType
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYP_BIT">
            <summary>
            Datatype Bit for DATA_RW40.OpType
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYP_BYTE">
            <summary>
            Datatype Byte for DATA_RW40.OpType
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYP_WORD">
            <summary>
            Datatype WORD/UInt16 for DATA_RW40.OpType
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYP_DWORD">
            <summary>
            Datatype DWORD/UInt32 for DATA_RW40.OpType
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYP_COUNTER">
            <summary>
            Datatype for counter for DATA_RW40.OpType
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYP_TIMER">
            <summary>
            Datatype timer for DATA_RW40.OpType
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYP_COUNTER_200">
            <summary>
            Datatype counter for S7-200 for DATA_RW40.OpType
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYP_TIMER_200">
            <summary>
            Datatype timer for S7-200 for DATA_RW40.OpType
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TYP_HS_COUNTER_200">
            <summary>
            Datatype for fast counter for S7-200 for DATA_RW40.OpType
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PCCP_PROTO_UNSUPPORTED">
            <summary>
            Protocol for S7-PC/CP is not supported
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PCCP_PROTO_UNKNOWN">
            <summary>
            Unknown protocol for S7-PC/CP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PCCP_PROTO_S7">
            <summary>
            Used protocol for S7-PC/CP is MPI
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PCCP_PROTO_PPI">
            <summary>
            Used protocol for S7-PC/CP is PPI
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PCCP_PROTO_ISO">
            <summary>
            Used protocol for S7-PC/CP is ISO
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PCCP_PROTO_TCPIP">
            <summary>
            Used protocol for S7-PC/CP is TCP/IP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PPI_MULTIMASTER">
            <summary>
            Option multi master for PPI is set
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PPI_ADVANCED_PPI">
            <summary>
            Option advanced PPI for PPI is set
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NL_USE_AUTOBAUD">
            <summary>
            Option Autobaud for PPI is set
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_UNKNOWN">
            <summary>
            Return value of AGL4.GetPLCType
            Unknown PLC type
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_S5">
            <summary>
            Return value of AGL4.GetPLCType
            PLC is a S5
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_S5_PG">
            <summary>
            Return value of AGL4.GetPLCType
            PLC is a serial S5
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_RK">
            <summary>
            Return value of AGL4.GetPLCType
            PLC is a RK512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_S7">
            <summary>
            Return value of AGL4.GetPLCType
            PLC is a S7
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_S7_200">
            <summary>
            Return value of AGL4.GetPLCType
            PLC is a S7-200
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_S7_300_400">
            <summary>
            Return value of AGL4.GetPLCType
            PLC is a S7-300/400
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_S7_1200">
            <summary>
            Return value of AGL4.GetPLCType
            PLC is a S7-1200
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_LOGO">
            <summary>
            Return value of AGL4.GetPLCType
            PLC is a LOGO!
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_RFC1006">
            <summary>
            Native RFC1006-Connection
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_S7_1200_1500_TIA">
            <summary>
            PLC is a S7-1200 or S7-1500 with symbolic communication
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_IEC">
            <summary>
            Return value of AGL4.GetPLCType
            PLC is a IEC
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_IEC_ADS">
            <summary>
            Return value of AGL4.GetPLCType
            PLC is a Twincat
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_IEC_CODESYS">
            <summary>
            Return value of AGL4.GetPLCType
            PLC is a CoDeSys
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_TYPE_REMOTE">
            <summary>
            Return value of AGL4.GetPLCType
            PLC is a S7-300/400 over phone connection
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HAS_FUNC_READ_MLFBNR">
            <summary>
            Paramter "Func" for AGL4.HASFunc to check if the connected plc supports AGL4.ReadMLFBNr and AGL4.ReadMLFBNrEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HAS_FUNC_READ_PLC_INFO">
            <summary>
            Paramter "Func" for AGL4.HASFunc to check if the connected plc supports AGL4.ReadPLCInfo
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HAS_FUNC_READ_OPSTATE">
            <summary>
            Paramter "Func" for AGL4.HASFunc to check if the connected plc supports AGL4.ReadOpState
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HAS_FUNC_PLC_START_STOP">
            <summary>
            Paramter "Func" for AGL4.HASFunc to check if the connected plc supports AGL4.PLCStart, AGL4.PLCStop and AGL4.PLCResume
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HAS_FUNC_READ_DB_COUNT">
            <summary>
            Paramter "Func" for AGL4.HASFunc to check if the connected plc supports AGL4.ReadDBCount
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HAS_FUNC_READ_DB_LIST">
            <summary>
            Paramter "Func" for AGL4.HASFunc to check if the connected plc supports AGL4.ReadDBList
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HAS_FUNC_READ_DB_LEN">
            <summary>
            Paramter "Func" for AGL4.HASFunc to check if the connected plc supports AGL4.ReadDBLen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HAS_FUNC_READ_DIAGBUFF">
            <summary>
            Paramter "Func" for AGL4.HASFunc to check if the connected plc supports AGL4.ReadDiagBufferEntrys and AGL4.ReadDiagBuffer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HAS_FUNC_READ_CYCLETIME">
            <summary>
            Paramter "Func" for AGL4.HASFunc to check if the connected plc supports AGL4.ReadCycleTime
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HAS_FUNC_READ_PROTLEVEL">
            <summary>
            Paramter "Func" for AGL4.HASFunc to check if the connected plc supports AGL4.ReatProtLevel
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HAS_FUNC_PLC_CLOCK">
            <summary>
            Paramter "Func" for AGL4.HASFunc to check if the connected plc supports AGL4.GetPLCClock
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.HAS_FUNC_READ_MAXPACKET">
            <summary>
            Paramter "Func" for AGL4.HASFunc to check if the connected plc supports AGL4.ReadMaxPacketSize
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_DIAG_MSG_SYSTEM">
            <summary>
            System diagnostic events
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_DIAG_MSG_USER">
            <summary>
            User defined diagnostic events
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_DIAG_MSG_CONTROL_TECH">
            <summary>
            Process control collective message
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_MAX_VALUES">
            <summary>
            Max variable count for S7-Scan
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_MAX_ADD_VALUES">
            <summary>
            Max additive value count for S7-Scan
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_MAX_ADD_VALUE_LEN">
            <summary>
            Max length of additive values for S7-Scan
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_MAX_ADD_VALUES">
            <summary>
            Max additive value count for S7-Alarm
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_MAX_ADD_VALUE_LEN">
            <summary>
            Max length of additive values for S7-Alarm
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_USEND_URCV_MAX_VALUES">
            <summary>
            Max additive value count for USEND/URCV
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_USEND_URCV_MAX_VALUE_LEN">
            <summary>
            Max length of additive values for USEND/URCV
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MSG_REASON_ACK">
            <summary>
            Report has been receipted
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MSG_REASON_LOCK">
            <summary>
            Report has been locked
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MSG_REASON_UNLOCK">
            <summary>
            Report has been unlocked
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MSG_TYPE_SYMB">
            <summary>
            For symbolic reports
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MSG_TYPE_SFB">
            <summary>
            For data block reports from SFBs
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MSG_TYPE_SFC">
            <summary>
            For data block reports from SFCs
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_IDENT_PLC_NAME">
            <summary>
            Name of the system
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_IDENT_CPU_NAME">
            <summary>
            Name of teh CPU
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_IDENT_PLANT_ID">
            <summary>
            Plant id
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_IDENT_COPYRIGHT">
            <summary>
            Copyright
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_IDENT_SERIALNUMBER_CPU">
            <summary>
            Serialnumber of the CPU
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_IDENT_CPU_TYPE_NAME">
            <summary>
            CPU type name
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_IDENT_SERIALNUMBER_MMC">
            <summary>
            Serialnumber of memory cad (only for S7-300)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_IDENT_OEM_ID">
            <summary>
            OEM-ID (only for S7-300)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_IDENT_LOC_ID">
            <summary>
            Position id
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_SF">
            <summary>
            SF - collective error
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_INTF">
            <summary>
            Internal error
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_EXTF">
            <summary>
            External error
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_RUN">
            <summary>
            RUN
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_STOP">
            <summary>
            STOP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_FRCE">
            <summary>
            FORCE
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_CRST">
            <summary>
            Restart
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_BAF">
            <summary>
            Battery error/overload
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_USR">
            <summary>
            User defined
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_USR1">
            <summary>
            User defined
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_BUS1F">
            <summary>
            Bus error interface 1
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_BUS2F">
            <summary>
            Bus error interface 2
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_RDF">
            <summary>
            Redundance error
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_MSTR">
            <summary>
            Master
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_RACK0">
            <summary>
            Rack 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_RACK1">
            <summary>
            Rack 1
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_RACK2">
            <summary>
            Rack 2
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_IFM1F">
            <summary>
            Interface error Module 1
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_IFM2F">
            <summary>
            Interface error Module 2
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_BUS3F">
            <summary>
            Bus error interface 3
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_MAINT">
            <summary>
            Maintenance
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_ON">
            <summary>
            LED is on
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_BLINK_NORMAL">
            <summary>
            LED is blinking normally (2 Hz)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_BLINK_SLOW">
            <summary>
            LED is blinking slowly (0,5 Hz)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPT_WARMSTART">
            <summary>
            Restart
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPT_COLDSTART">
            <summary>
            Cold start
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPT_RESUME">
            <summary>
            Resume
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MDM_INIT_LEN">
            <summary>
            Length of init entry
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MDM_PHONE_NO_LEN">
            <summary>
            Lenght of the phone number part
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PARITY_NONE">
            <summary>
            No Parity 
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PARITY_EVEN">
            <summary>
            Parity even
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AGL40_PARITY_ODD">
            <summary>
            Parity odd
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN_NOT_CONNECTED">
            <summary>
            Redundant connections not connected
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN_CONNECTED">
            <summary>
            Redundant connections connected
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CYCLIC_READ_START_IMMEDIATE">
            <summary>
            Zyklisches Lesen auch sofort starten
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CYCLIC_READ_ONLY_CHANGED">
            <summary>
            Nur bei Änderungen Werte übermitteln,
            dies funktioniert nur für Datenbytes (max. 255),
            andere Operanden werden ganz normal zyklisch gelesen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_COPY_PASSIVE_FILESYSTEM_TO_PASSIVE_FILESYSTEM">
            <summary>
            Passive filesystem to passive filesystem
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_COPY_ACTIVE_FILESYSTEM_TO_PASSIVE_FILESYSTEM">
            <summary>
            Active filesystem to passive filesystem
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_COPY_PASSIVE_FILESYSTEM_TO_ACTIVE_FILESYSTEM">
            <summary>
            Passive filesystem to active filesystem
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_COPY_ACTIVE_FILESYSTEM_TO_ACTIVE_FILESYSTEM">
            <summary>
            Active filesystem to active filesystem
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_COPY_PASSIVE_FILESYSTEM_TO_PASSIVE_FILESYSTEM_WITH_OVERWRITE">
            <summary>
            Passive filesystem to passive filesystem deleting existing file
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_COPY_ACTIVE_FILESYSTEM_TO_PASSIVE_FILESYSTEM_WITH_OVERWRITE">
            <summary>
            Active filesystem to passive filesystem deleting existing file
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_IBN_SS_NORMAL">
            <summary>
            Normal (Power On)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_IBN_SS_DELETE_SRAM">
            <summary>
            Delete S-Ram
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_IBN_SS_SOFTWARE_UPDATE">
            <summary>
            Software Update
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_IBN_SS_NCK_SHUTDOWN">
            <summary>
            NCK-Shutdown
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_IBN_SS_PC_SHUTDOWN">
            <summary>
            PC-Shutdown
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MMCSEM_TMCRTO">
            <summary>
            Create tool
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MMCSEM_TMDPL">
            <summary>
            Find empty position to load
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MMCSEM_TMMVTL">
            <summary>
            Load / move tool
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MMCSEM_TMFPBP">
            <summary>
            Search for position
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MMCSEM_TMGETT">
            <summary>
            Search for tool number
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MMCSEM_TSEARC">
            <summary>
            Search for tool
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MMCSEM_MEMSIZE">
            <summary>
            Synchronize access to BTSS variable /N/S/memSize
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MAX_DEFAULT_PATH_LENGTH">
            <summary>
            Wird intern für Erstanfragen von Pfadlaengen verwendet.
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4._Native">
            <summary>
            Schnittstelle zu den Nativen Funktionen, um x86 und x64 gleichermaßen unterstützen zu können
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGL4.#cctor">
            <summary>
            Der Konstruktor prüft, ob die Datei AGLink40.dll gefunden werden kann und setzt den Member m_AGLink40_dll_Found entsprechend dem Ergebnis.
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGL4.Activate(System.String)">
            <summary>
            This function activates the functionality of the ACCON-AGLink-DLL you purchased. It has to be called only once on 
            program start with the provided key. This makes sure that only you can use the ACCON-AGLink-DLL distributed with your applications. 
            Remark: 
            This is valid only for the developer license, not for the single place license. The call of this function with 
            the single place version has no effects.
            </summary>
            <param name="Key">Activation key of your license</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetVersion(System.Int32@,System.Int32@)">
            <summary>
            This function returns the version number of the AGLink40.DLL. Instead of the individual 
            parameters also the value NULL can be submitted, if this special information is not needed.
            </summary>
            <param name="Major">Variable for major version</param>
            <param name="Minor">Variable for minor version</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetVersionEx(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.String@)">
            <summary>
            This function returns the extended version number of the AGLink40.DLL. 
            </summary>
            <param name="Major">Variable for major version</param>
            <param name="Minor">Variable for minor version</param>
            <param name="Build">Variable for build version</param>
            <param name="Revision">Variable for revison version</param>
            <param name="Date">Variable for build date to get the date in the format "2010-02-15"</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetOptions">
            <summary>
            This function returns the available options of AGLink40.DLL 
            </summary>
            <returns>The available options as bit flag. A set bit means that the option is available. See the respective header or module file for possible bit masks.</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetSerialNumber">
            <summary>
            This function returns the serial number of AGLink40.DLL.
            </summary>
            <returns>The serial number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetClientName(System.String@)">
            <summary>
            This function returns the licensee of the AGLink40.DLL.
            </summary>
            <param name="Name">string buffer to get the licensee name</param>
            <returns>A pointer to the returned string for direct processing.</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetMaxDevices">
            <summary>
            This function returns the maximum available devices of your ACCONC-AGLink-Version. 
            This number can be changed in further versions. The usage of a constant is therefore not recommended.
            </summary>
            <returns>The maximum available devices</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetMaxQueues">
            <summary>
            This function returns the maximum available jobs which can be buffered by your ACCON-AGLink-Version. 
            This number can be changed in further versions. The usage of a constant is therefore not recommended.
            </summary>
            <returns>The maximum number of jobs per device</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetMaxPLCPerDevice">
            <summary>
            This function returns the maximum concurrent opened PLC connections per device of your ACCON-AGLink-Version. 
            The actual number can be smaller because some special hardware limitations can be bearing. A PC adapter e. g. 
            supports only four connections at the same time. The number of the maximum opened PLC connections can change in further versions. 
            The usage of a constant is therefore not recommended.
            </summary>
            <returns>The maximum number of PLC connections per device with which you can communicate at the same time</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.UseSystemTime(System.Boolean)">
            <summary>
            With this function you can configure if the time in the result structure will be determined with UseSystemTime (Flag == true) or 
            with GetLocalTime (Flag == false). 
            If this function isn’t called GetLocalTime wil be used by default.
            </summary>
            <param name="Flag">A flag to use GetSystemTime or GetLocalTime</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReturnJobNr(System.Boolean)">
            <summary>
            With this function you can configure the behavior of the return value of synchronous function calls.  
            With Flag == false you will get AGL40_SUCCES respectively an error number. With Flag == true you will get the behaviour of an asynchronous function call, 
            returning the JobNr respectively an error number. If the JobNr will be returned you can access the result structure with GetJobResult, 
            giving you amongst others the SError. The structure element SError delievers in a fault detailed information about the correct error code of the remote station.
            </summary>
            <param name="Flag">Flag if the JobNr should be returned</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetPCCPConnNames(System.String[]@,System.Int32)">
            <summary>
            This function determines the permitted access points of the application for the port type 
            ACCON-AGLink S7-PC/CP. The list will be arranged in the provided text buffer and contains a field with the 
            access point of the application, tab as delimiter, the configured interface and '\0' as the 
            end for this entry, next entry … The list ends with '\0\0'. The number of used chars in the text buffer will be returned.
            </summary>
            <param name="Names">Text buffer</param>
            <param name="Len">Length of the text buffer</param>
            <returns>&gt;=0	The number of used chars in the text buffer &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetPCCPProtocol(System.String)">
            <summary>
            This function determines the protocol of the access point of the application for the interface type ACCON-AGLink S7-PC/CP.
            </summary>
            <param name="Zugangspunkt">Desired access point of the application (e.g. "S7ONLINE")</param>
            <returns>PCCP_PROTO_UNSUPPORTED	In fault
            PCCP_PROTO_UNKNOWN              If indeterminate
            PCCP_PROTO_S7			              For MPI/PB communication
            PCCP_PROTO_PPI			            For PPI communication
            PCCP_PROTO_ISO			            For ISO communication
            PCCP_PROTO_TCPIP			          For TCP/IP communication
            </returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetTapiModemNames(System.String[]@,System.Int32)">
            <summary>
            This function determines the names of the installed TAPI modems for the interface type 
            ACCON-AGLink S7-serial/TS-TAPI over them a data connection can be configured. The list will be arranged 
            in the provided text buffer and contains a field with the modem names and '\0' as the end for this entry, 
            next entry … The list ends with '\0\0'. The number of used chars in the text buffer will be returned.
            </summary>
            <param name="Names">Text buffer</param>
            <param name="Len">Lenght of the text buffer</param>
            <returns>&gt;=0	The number of used chars in the text buffer &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetTickCount">
            <summary>
            This function returns the time since computer start in milliseconds. Unlike to the windows function GetTickCount() 
            it will be calculated with millisecond granularity and not depending on the operating system version with a granularity 
            of 10 or 15 milliseconds. This function kann be used for adequate time measurements. For this a so called high performance 
            counter must be available on the PC. Since the launch of the 
            Pentium processor this is standard anyway. Should this not be the case the value of GetTickCount() will be returned.
            </summary>
            <returns>The time since computer start in milliseconds accuracy.</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetMicroSecs">
            <summary>
            This function returns the time since computer start in microseconds. 
            This function kann be used for adequate time measurements. For this a so called high performance counter 
            must be available on the PC. Since the launch of the Pentium processor this 
            is standard anyway. Should this not be the case the value of GetTickCount()*1000 will be returned.
            </summary>
            <returns>The time since computer start in microseconds accuracy.</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Config(System.Int32)">
            <summary>
            This function calls the program "AGLink40_Config.EXE". This one must be in the search path or in the current working directory of your application.
            </summary>
            <param name="DevNr">Number of the device(0 ... MAX_DEVICES-1) if only a special device should be configured or
            –1 if all devices should be configured</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ConfigEx(System.Int32,System.String)">
            <summary>
            This function calls the program "AGLink40_Config.EXE". This one must be in the search path or in the current working directory of your application.
            </summary>
            <param name="DevNr">Number of the device(0 ... MAX_DEVICES-1) if only a special device should be configured or
            –1 if all devices should be configured</param>
            <param name="CommandLineArguments">Additional parameters for the program</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.SetParas``1(System.Int32,System.Int32,``0)">
            <summary>
            Durch diese Funktion werden Einstellungen für ein Gerät und einen Kommu-nikationsweg gesetzt.
            </summary>
            <typeparam name="S">Der Typ der Parameterstruktur, die geschrieben werden soll</typeparam>
            <param name="DevNr">Die Gerätenummer</param>
            <param name="ParaType">Der Parametertyp, der geschrieben werden soll</param>
            <param name="Para">Konkrete Struktur, in die geschrieben werden soll</param>
            <returns>AGL4_SUCCESS im Erfolgsfall. Eine Zahl kleiner 0 ist eine Fehlernummer</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetParas``1(System.Int32,System.Int32,``0@)">
            <summary>
            Durch diese Funktion werden Einstellungen für ein Gerät und einen Kommunikationsweg gelesen.
            </summary>
            <typeparam name="S">Der Typ der Parameterstruktur, die gelesen werden soll</typeparam>
            <param name="DevNr">Die Gerätenummer</param>
            <param name="ParaType">Der Parametertyp, der gelesen werden soll</param>
            <param name="Para">Konkrete Struktur, in die gelesen wird.</param>
            <returns>AGL4_SUCCESS im Erfolgsfall. Eine Zahl kleiner 0 ist eine Fehlernummer</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.SetParas(System.Int32,System.Int32,System.Object)">
            <summary>
            By this function, settings for a device and a communication path will be set. If no XML file was loaded this will be done automatically  by this function.
            </summary>
            <param name="DevNr">The number of the device</param>
            <param name="ParaType">Type of the parameters</param>
            <param name="Para">Pointer to the actual parameter</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetParas(System.Int32,System.Int32,System.Object@)">
            <summary>
            By calling this function, settings for a device and a communication path will be read. If no XML file was loaded this will be done automatically.
            </summary>
            <param name="DevNr">The number of the device</param>
            <param name="ParaType">Type of the parameters</param>
            <param name="Para">Pointer to the actual parameter </param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.SetDevType(System.Int32,System.Int32)">
            <summary>
            This function sets the device type of the selected device. If no XML file was loaded this will be done automatically.
            </summary>
            <param name="DevNr">Number of the device</param>
            <param name="DevType">Device type to be set</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetDevType(System.Int32)">
            <summary>
            This function returns the currently set device type of the given device. If no XML file was loaded this will be done automatically.
            </summary>
            <param name="DevNr">Number of device</param>
            <returns>&gt;=0	Currently selected type &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadParas(System.Int32,System.Int32)">
            <summary>
            This function reads the settings for a device type from a loaded XML file and puts them into an internal memory area.  
            If no XML file was loaded this will be done automatically.
            </summary>
            <param name="DevNr">Number of the device </param>
            <param name="ParaType">Device type to be read</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteParas(System.Int32,System.Int32)">
            <summary>
            This function writes the settings for a device type from the internal memory into the loaded XML file.
            </summary>
            <param name="DevNr">Number of the device</param>
            <param name="ParaType">Type of the parameter to be written</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadDevice(System.Int32)">
            <summary>
            With this function the complete device settings of the device,  containing the parameters from all connection 
            paths and the actual selected device typ, will be read from the registry and filled in an internal memory area.
            </summary>
            <param name="DevNr">Number of the device</param> 
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteDevice(System.Int32)">
            <summary>
            With this function the complete device settings of the device, containing the parameters from all connection 
            paths and the actual selected device typ, will be written from the internal memory area into the registry. 
            </summary>
            <param name="DevNr">Number of the device</param> 
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadParasFromFile(System.Int32,System.String)">
            <summary>
            With this function the complete settings, containing the parameters from all connection paths and the actual 
            selected device type will be read from the called XML file into the internal memory area at once.
            </summary>
            <param name="DevNr">Number of the device</param>
            <param name="FileName">Name of the XML file</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteParasToFile(System.Int32,System.String)">
            <summary>
            With this function the complete settings, containing the parameters from all connection paths and the actuall 
            selected device type will be written from the called XML file into the internal memory area at once.
            </summary>
            <param name="DevNr">Number of the device</param>
            <param name="FileName">Name of the XML file</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetParaPath(System.String@,System.Int32)">
            <summary>
            This function returns the path from which the parameter files will be read and will be written to.
            </summary>
            <param name="DirName">Buffer for the path name</param>
            <param name="MaxLen">Maximum length of the path</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.SetParaPath(System.String)">
            <summary>
            This function sets the path from which the parameter files will be read and will be written to.
            </summary>
            <param name="DirName">Desired path name</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.SetAndGetParaPath(System.String,System.String,System.String@)">
            <summary>
            This function sets the directory for device configuration files and creates it if necessary. 
            With this function you can use custom configuration directory paths for your product.
            </summary>
            <param name="companyName">The company name to use as directory name. If you enter null or "" then this value will be ignored.</param>
            <param name="productName">The name of your product to use as directory name. If you enter null then the name of the executable will be used as directory name. If you enter "" this value will be ignored.</param>
            <param name="aktPath">Variable for the new path</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.SetAndGetParaPath(System.String,System.String)">
            <summary>
            This function sets the directory for device configuration files and creates it if necessary. 
            With this function you can use custom configuration directory paths for your product.
            </summary>
            <param name="companyName">The company name to use as directory name. If you enter null or "" then this value will be ignored.</param>
            <param name="productName">The name of your product to use as directory name. If you enter null then the name of the executable will be used as directory name. If you enter "" this value will be ignored.</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetPLCType(System.Int32,System.Int32)">
            <summary>
            This function gets the type of the connected PLC. The return value is a bitmask and can be analyzed depending 
            by the family and subcategory. The families are PLC_TYPE_S5 (with subcategory PLC_TYPE_S5_PG if communication 
            is via S5–AS511 instead of S5-TCP/IP), PLC_TYPE_RK and PLC_TYPE_S7 (with subcategory PLC_TYPE_S7_200, PLC_TYPE_S7_300_400, 
            PLC_TYPE_S7_1200, oder PLC_TYPE_S7_1200_1500_TIA). With family PLC_TYPE_S7 the 
            PLC_TYPE_REMOTE can be set as well if the access occurs via modem and the TS option.
            </summary>
            <param name="DevNr">Number of the device</param>
            <param name="PlcNr">Number of the PLC</param>
            <returns>Bit mask combining the constants PLC_TYPE_xxx</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.HasFunc(System.Int32,System.Int32,System.Int32)">
            <summary>
            This function checks if the PLC supports the appropriate function. This attends to prevent the error message 
            AGL40_FUNCTION_NOT_SUPPORTED. The appropriate function resp. the function family will be requested over the constants HAS_FUNC_xxx 
            </summary>
            <param name="DevNr">Number of the device</param>
            <param name="PlcNr">Number of the PLC</param>
            <param name="Func">Requested function or function family</param>
            <returns>0 Function is not supported != 0	Function is supported</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.LoadErrorFile(System.String)">
            <summary>
            With this function the error textfile can be loaded. Normally AGLinkg40_Error.TXT will be used. You can also use 
            AGLink40_Error.ENG if you would like to receive the error messages in English.
            </summary>
            <param name="FileName">Name of the  error file. Currently AGLink40_Error.TXT and AGLink40_Error.ENG are included as error files.</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetErrorMsg(System.Int32,System.String@)">
            <summary>
            This function determines the error text corresponding to the given error number, analyzing the content of the file »AGLink40_Error.TXT«. 
            This file will be loaded with the first call of the function. It will be searched in the directory which 
            contains AGLink40.DLL (resp. AGLink40_x64  or the Shared Object). With LoadErrorFile you can load an alternative file to get the error messages.
            </summary>
            <param name="ErrNr">Error number</param>
            <param name="Msg">Pointer to the stringbuffer for the error text</param>
            <returns>Number of characters copied into the stringbuffer</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetErrorCodeName(System.Int32,System.String@)">
            <summary>
            This function determines the name of the error constant.
            </summary>
            <param name="ErrNr">Error number</param>
            <param name="Msg">Pointer to the stringbuffer for the name</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.OpenDevice(System.Int32)">
            <summary>
            This function opens the selected device for later usage. Thus memory will be allocated and protocollthreads will be started.
            </summary>
            <param name="DevNr">The number of the device</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.CloseDevice(System.Int32)">
            <summary>
            This function closes the selected device. Thus the protocoll threads will be canceled and the allocated memory will be freed.
            </summary>
            <param name="DevNr">The number of the device</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Accon.AGLink.AGL4.GetJobResult(System.Int32,System.Int32,Accon.AGLink.AGL4.RESULT40@)" -->
        <member name="M:Accon.AGLink.AGL4.GetLastJobResult(System.Int32,Accon.AGLink.AGL4.RESULT40@)">
            <summary>
            This function returns the communication-result of the last job which ended on this connection. 
            This function is interesting  if there is a synchronous call of a function. If the job will finish with an error 
            you can possibly get detailed information about that error by using the structure-element SError.
            </summary>
            <param name="ConnNr">The handle of the connection which last result is to be queried</param>
            <param name="R">Pointer to the result structure</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WaitForJob(System.Int32,System.Int32)">
            <summary>
            This function waits for the end of an asynchronous started job. The function returns automatically the error code of the communication.
            </summary>
            <param name="DevNr">The number of the device</param>
            <param name="JobNr">The JobNo. out of the asynchronous call</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WaitForJobEx(System.Int32,System.Int32,Accon.AGLink.AGL4.RESULT40@)">
            <summary>
            This function waits for the end of an asynchronous started job. 
            The function returns automatically the error code of the communication and fills the result structure.
            </summary>
            <param name="DevNr">The number of the device</param>
            <param name="JobNr">The JobNo. out of the asynchronous call</param>
            <param name="Result">Pointer to the result structure</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.DialUp(System.Int32,System.Int32)">
            <summary>
            This function calls the adapter if the device is Type TYPE_S7_TS_AT or TYPE_S7_TS_TAPI. 
            In all other cases it does return success immediately. 
            So you can call this function always after OpenDevice and before InitAdapter.
            </summary>
            <param name="DevNr">The number of the device</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.HangUp(System.Int32,System.Int32)">
            <summary>
            This function closes the connection to the adapter if the device is Type TYPE_S7_TS_AT or 
            TYPE_S7_TS_TAPI. In all other cases it does return success immediately.  
            So you can call this function always after ExitAdapter and before CloseDevice.
            </summary>
            <param name="DevNr">The number of the device</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.InitAdapter(System.Int32,System.Int32)">
            <summary>
            This function initalizes the communication adapter with the configured values.
            </summary>
            <param name="DevNr">The number of the device</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ExitAdapter(System.Int32,System.Int32)">
            <summary>
            This function logs of from the communication adapter.
            </summary>
            <param name="DevNr">The number of the device</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetLifeList(System.Int32,System.Byte[],System.Int32)">
            <summary>
            This function gets the active and the passive member at the MPI-, PPI- or PROFIBUS when accessing a S7-Control. 
            The parameter List is an array with at least 128 entries (bytes). After every completition of the 
            function there is 0x10(=LL_NONE) for all members which aren’t there, 0x00(=LL_PASSIVE) for all member 
            which are passive, 0x30(=LL_ACTIVE) for all members which are active and 0x20(=LL_ACTIVE_READY) for all active 
            members which are ready to go on the Bus, in the respective Byte.
            </summary>
            <param name="DevNr">The number of the device</param>
            <param name="List">Array for the Busmember (must be greater than 127 byte)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetDirectPLC(System.Int32,System.Byte@,System.Int32)">
            <summary>
            This function determines the directly connected PLC on an access to the S7-Controls via PC or TS-Adapter. In other 
            communications you always receive the PLC-Number 255 because a directly connected PLC can’t determined.
            Attention: 
            This function only returns valid values if the device type is ACCON-AGLink S7 seriell or ACCON-AGLink S7 seriall/TS 
            (Types: TYPE_S7_MPI_SER, TYPE_s7_TS_AT and TYPE_S7_TS_TAPI ). In all other cases PLC-Number 255 will be returned.
            </summary>
            <param name="DevNr">The number of the device</param>
            <param name="Plc">Variable for the PLC-Number</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.PLCConnect(System.Int32,System.Int32,System.Int32@,System.Int32)">
            <summary>
            This function builds up a connection to a PLC. If you call this function multiple times with different AG-Numbers 
            you can have multiple active connections at the same time. You can get the number of the maximum count of connections 
            per Device through the function GetMaxPLCPerDevice. But it’s possible that the used communication hardware doesn’t 
            support as many connections at the same times as the device. Every connection which is build by PLCConnect must be dismounted by PLCDisconnect.
            By the build up of a connection you receive a Connection handle. Use this handle to identify 
            the connection and for all calls of  connection-oriented communication functions.
            </summary>
            <param name="DevNr">The number of the device</param>
            <param name="PlcNr">Number of the Busmember</param>
            <param name="ConnNr">Connection handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.PLCConnectEx(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32)">
            <summary>
            This function builds up a connection to a PLC. If you call this function multiple times with different AG-Numbers 
            you can have multiple active connections at the same time. You can get the number of the maximum count of connections 
            per Device through the function GetMaxPLCPerDevice. But it’s possible that the used communication hardware doesn’t 
            support as many connections at the same times as the device. Every connection which is build up by PLCConnect must be dismounted by PLCDisconnect.
            By the build up of a connection you receive a Connection handle. Use this handle to identify the connection and for all 
            calls of  connection-oriented communication functions.
            In contrast to the function PLCConnect you can indicate the rack- and the slotnumber of the CPU if using PLCConnectEx. 
            This is necessary, e.g. if you want to access to the S7-Control with a CP 342-5. Usually in in this case the rack is 0  and 
            the slotnumber is 2. You get the exact values from your hardwareconfiguration.
            You can easily check whether your connection to the CPU is correct or not by using the function ReadMLFBNr right after 
            using PLCConnect or PLCConnectEx. Compare the MLFB-Number with the controller. Alternative you can use the testfunction AGLink40_Config.EXE.
            In case of a standardconnection via MPI, PPI und PROFIBUS, the PlcNr is the Busadress of the desired member. 
            In case of S7_TCPIP it is the »virtual« PLC-Number which you have filled in the configuration. 
            If you use a projected connection or routing, the PlcNr is the index of the connection (between 0 and GetMaxPLCPerDevice –1).
            With the parameters RackNr and SlotNr you can supersede the values defined in the configuration, using e.g. S7_TCPIP or projected connections or routing.
            </summary>
            <param name="DevNr">The number of the device</param>
            <param name="PlcNr">Number of the busmember</param>
            <param name="RackNr">Rack-Number of the AG</param>
            <param name="SlotNr">Slot-Number of the AG</param>
            <param name="ConnNr">Connection handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.PLCDisconnect(System.Int32,System.Int32)">
            <summary>
            This function dismounts the connection, which was build up by PLCConnect or PLCConnectEx.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadMaxPacketSize(System.Int32)">
            <summary>
            This function returns the maximum packet size of the of the PLC communication in Bytes. Possible values are
            112 Bytes (in general at S7-200-controller of the first generation 21x), 
            240 Bytes (S7-200-controller of the new generation S7-22x and at S7-300-controller except S7-318), 
            480 Bytes (in general at S7-318 and S7-400-controller) or
            960 Bytes (right now this is only available on a S7-compatible controller). 
            The connection to the PLC must be established. The packet size can be a token for the efficiency of the
            communication interface. But a bigger packet size does not necessarily mean that the data transfer is faster. 
            It also depends on the PLC, putting the datapackages together and sending them via the connection. To compare the 
            communication performance of different PLC’s you do fine if you use the program »AGLink40_Performance.exe« of the ACCON-AGLink examples.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <returns>&gt;= 0	The maximum package size of the communication &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetRedConnState(System.Int32,Accon.AGLink.AGL4.RED_CONN_STATE@)">
            <summary>
            Use this function to determine the the primary connection at the moment. Additional you get the state 
            of both connections (connected or not) and (for H-CPU-systems) the operating state of both PLC.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="State">Pointer to the variable for the connection state</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetRedConnStateMsg(System.Int32,Accon.AGLink.AGL4.RED_CONN_STATE@,System.Int32)">
            <summary>
            Use this function to get a message if the connection state of a redundand connected PLC or 
            the operating state of  at least one PLC in a H-CPU-system is changing. In general this 
            function will be called asynchronous and with timeout = INFINITE.  ACCON-AGLink will inform you if something 
            changes at the redundand connection. The function will be pending, until a change will occur!
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="State">Pointer to the variable for the state of the connection</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.RKSend(System.Int32,Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            This function writes data to the PLC, using the RK512 protocol. The communication parameters CPU-Number, 
            IPC flag byte and IPCflag bit (Inter-processor communication) are taken from the device configuration. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function returns the error 
            AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.RKSendEx(System.Int32,Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            This function writes data to the PLC, using the RK512 protocol. The communication parameters CPU-Number, 
            IPC flag byte and IPCflag bit (Inter-processor communication) are taken from the DATA_RW40_RK structure. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function 
            returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.RKFetch(System.Int32,Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            With this function you can read data from the PLC, using the RK512 protocol. The communication parameters CPU-Number, 
            IPC flag byte and IPCflag bit (Inter-processor communication) are taken from the device configuration. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function returns the error AGL40_FUNC_NOT_SUPPORTED. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.RKFetchEx(System.Int32,Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            This function reads data from the PLC, using the RK512 protocol. The communication parameters CPU-Number, 
            IPC flag byte and IPCflag bit (Inter-processor communication) are taken from the DATA_RW40_RK structure. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function returns the error AGL40_FUNC_NOT_SUPPORTED. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Send_RKFetch(System.Int32,Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            This function sends the data which where requested by the counterpart station through RKFetch. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise 
            the function returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Recv_RKSend(System.Int32,Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            This function receives the data, written by the counterpart station through RKSend. The DATA_RW40_RK structure receives 
            all communication parameters like memory area, db-number, offset etc. Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the 
            function returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Recv_RKFetch(System.Int32,Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            With this function you can receive a data request which was send by the counterpart station through RKFetch. 
            The DATA_RW40_RK structure receives all communication parameter like memory area, db-number, offset etc.You can 
            send the desired data through the function Send_RKFetch. Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the 
            function returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Send_3964(System.Int32,System.Byte[],System.Int32)">
            <summary>
            This function sends data via the 3964- or 3964R-protocol. Use the device configuration to specify, which 
            of both to use. Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function 
            returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to the data to send</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Recv_3964(System.Int32,System.Byte[],System.Int32@,System.Int32)">
            <summary>
            With this function you can receive data via the 3964- or 3964R-protocol. Use the device configuration 
            to specify, which of both to use. Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function 
            returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to the data to send</param>
            <param name="BuffLen">Length of the input buffer when called and length of the received data when ending</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.BSend(System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can send a data-block to be received by the PLC via BReceive. This function uses the value 
            1 for the R_ID. An appropriate connection must be parameterized. A connection to the PLC must be already built up.
            In the structure pwsa you send the reserved length of the buffer when the function is called. 
            At the end of the function it contains the length of the received data.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="abBuff">Pointer to Data-Buffer</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.BReceive(System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can receive a data-block which was send by the PLC via BSend. A connection must be parameterized. 
            A connection to the PLC must be already built up.
            In the structure pwsa you pass the allocated length of the buffer when the function is called. 
            At the end of the function it contains the length of the received data.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="abBuff">Pointer to Data-Buffer</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.BSendEx(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            With this function you can send a data-block to be received by the PLC via BReceive. Compared to the function 
            BSend you can pass a value for R_ID. An appropriate connection must be parameterized. A connection to the PLC must be already built up.
            In the structure pwsa you send the length of the buffer when the function is called. At the end of the function it contains the length of the received data.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="abBuff">Pointer to Data-Buffer</param>
            <param name="R_ID">The RemoteID for the communication</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.BReceiveEx(System.Int32,System.Byte[]@,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            With this function you can receive a data-block which was send by the PLC via BSend. Compared to the function 
            BReceive you additinaly get the R_ID of the connection. A connection must be parameterized. A connection to the PLC must be already built up.
            In the structure pwsa you pass the allocated length of the buffer when the function is called. At the end of 
            the function it contains the length of the received data.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="abBuff">Pointer to Data-Buffer</param>
            <param name="R_ID">Pointer to variable for RemoteID of the connection</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.USend(System.Int32,Accon.AGLink.AGL4.S7_USEND_URCV,System.Int32)">
            <summary>
            With this function you can send a data block to be received by the PLC via UReceive. 
            A connection must be parameterized. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="USR">Pointer to structure with the values to send</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.UReceive(System.Int32,Accon.AGLink.AGL4.S7_USEND_URCV@,System.Int32)">
            <summary>
            With this function you can receive a data block which was send by the PLC via USend. 
            A connection must be parameterized. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="USR">Pointer to the structur for the data to read</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.SetBSendAutoResponse(System.Boolean)">
            <summary>
            If there is no BReceive or BReceiveEx Job waiting, you can choose between two respond types. In the compatible mode of ACCON-AGLink BSend gets a resonse and 
            and the data is dropped. This is the default behavior and can be set with SetBSendAutoResponse( true ). With SetBSendAutoResponse( false ) an error will be send to the plc.
            It is needed that a error handling is implemented on the plc side.
            </summary>
            <param name="autoRespond">Automatically respond to BSend or send an error</param>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetBSendAutoResponse">
            <summary>
            Get the currently set response mode for BSend (quod vide SetBSendAutoResponse)
            </summary>
            <returns>The currently set response mode for BSend</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.RFC1006_Connect(System.Int32,System.Int32,System.Int32@,Accon.AGLink.AGL4.Rfc1006Server@,System.Int32)">
            <summary>
            Use this function to establish a connection to the remote site or wait for an incoming connection.
            In the device configuration, you specify whether you want to build up the the connection active, so as a client, 
            or passive, ie as a server. You make this setting via the external configuration program AGLink40_Config.EXE. 
            In programmatic configuration (using function SetParas) please indicate this in the parameter element flags in the RFC_1006 parameters. 
            Use constant CONNECT_PASSIVE to establish the connection as a server and CONNECT_ACTIVE as a client. Use RFC1006_ONLY_ONE, if only one 
            connection should be allowed for a remote site, identified by the IP address. Use RFC1006_REJECT_NEW to maintain an existing connection in a further 
            attempt to establish a remote connection.
            </summary>
            <param name="DevNr">The number of the devic</param>
            <param name="PlcNr">Connection number, index of the parameters in the parameter array</param>
            <param name="ConnNr">Connection handle</param>
            <param name="ConnInfo">Information about the connection after the connection is established</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.RFC1006_Disconnect(System.Int32,System.Int32)">
            <summary>
            This function dismounts the connection to the remote site.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.RFC1006_Receive(System.Int32,System.Byte[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you to receive data via RFC 1006 connection. An existing connection to remote site must be established.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to the receive buffer</param>
            <param name="ReceivedLen">Number of received characters</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.RFC1006_Send(System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you to send data via RFC 1006 connection. An existing connection to remote site must be established.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to the send buffer</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_LoadSTISymbols(System.String,System.IntPtr@)">
            <summary>
            Open a STI Scout export file. This is the starting point for every following function call.
            </summary>
            <param name="stiFile">Path to your STI Scout export file</param>
            <param name="rootNodeHandle">Handle to the root node of the symbol tree - this is the starting point for all following node functions</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_LoadSTISymbols(System.String,System.IntPtr@,System.Boolean)">
            <summary>
            Open a STI Scout export file. This is the starting point for every following function call.
            </summary>
            <param name="stiFile">Path to your STI Scout export file</param>
            <param name="rootNodeHandle">Handle to the root node of the symbol tree - this is the starting point for all following node functions</param>
            <param name="flatArrays">Arrays are loaded flat</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_FreeHandle(System.IntPtr)">
            <summary>
            Free memory of the given node handle.
            If it's the root node than the whole project will be closed.
            Please note that AccessHandles have to be freed separately.
            </summary>
            <param name="rootNodeHandle">Can be a NodeHandle or AccessHandle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_GetName(System.IntPtr,System.String@)">
            <summary>
            Gets the name of the given node
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="nameBuffer">Buffer for the name</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_GetHierarchyType(System.IntPtr,Accon.AGLink.AGL4.HierarchyType@)">
            <summary>
            Determines whether it's a structure, array or a singel item
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="hierarchyType">The hierarchy type of the node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_GetValueType(System.IntPtr,Accon.AGLink.AGL4.ValueType@)">
            <summary>
            Determines the datatype that is needed to map the system type to a value on a pc. I.e. z.b S7-Bool => UInt8, S7-Int => Int16 und ULInt => UInt64.
            Types that cannot be mapped directly will be "SystemSpecific" i.e. S7-DTL. For those type there are special convertes.
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="valueType">Value type</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_GetSystemType(System.IntPtr,Accon.AGLink.AGL4.SystemType@)">
            <summary>
            Determines the necessary Simotion system type
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="SystemType">System type</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_GetPermissionType(System.IntPtr,Accon.AGLink.AGL4.PermissionType@)">
            <summary>
            Get information about read or write permissionss for a node.
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="permissionType">Access permission for this node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_GetChildCount(System.IntPtr,System.Int32@)">
            <summary>
            Determines the count of direct children of the give node.
            </summary>
            <param name="nodeHandle">Tree node whose child count will be obtained</param>
            <param name="childCount">Count of child nodes</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_GetChild(System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
            Gets the x.th direct child node.
            </summary>
            <param name="nodeHandle">Tree node to get the desired child node from</param>
            <param name="childIndex">Number (0...Symbolic_GetChildCount-1) of the desired child node</param>
            <param name="childNodeHandle">Handle of the found child node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_GetNodeByPath(System.IntPtr,System.String,System.IntPtr@,System.Int32@)">
            <summary>
            Gets a node using its full name. If the root node is used as start node than the name may look like "PLC_1.Datablocks.Datenblock_1.ElementX". As an alternative you can insert any node as start node. 
            Then this function will need only rest of the name from this node on. I.e. if the nodeHandle would be "PLC_1.Datablocks" than the item path would be "Datenblock_1.ElementX".
            </summary>
            <param name="nodeHandle">Start node</param>
            <param name="itemPath">Path to the desired node based on the start node</param>
            <param name="foundNodeHandle">Handle of the found node</param>
            <param name="errorPosition">Error position if an error occurs</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_CreateAccess(System.IntPtr,System.IntPtr@)">
            <summary>
            Creates an AccessHandle that can be used to read or write data
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="accessHandle">The AccessHandle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_CreateAccessByPath(System.IntPtr,System.String,System.IntPtr@,System.Int32@)">
            <summary>
            Creates an AccessHandle using the full name of a node. If the root node is used as start node than the name may look like "PLC_1.Datablocks.Datenblock_1.ElementX". As an alternative you can use any node as start node. 
            Then this function will need only rest of the name from this node on. I.e. if the nodeHandle would be "PLC_1.Datablocks" than the item path would look like "Datenblock_1.ElementX".
            </summary>
            <param name="parentNodeHandle">Start node</param>
            <param name="itemPath">Path to the desired node based on the start node</param>
            <param name="accessHandle">The AccessHandle</param>
            <param name="errorPosition">Error position if an error occurs</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_ReadMixEx(System.Int32,Accon.AGLink.AGL4.SymbolicRW[],System.Int32)">
            <summary>
            Read data from the SIMOTION device
            </summary>
            <param name="connNr">Connection number that you got from the call to PLCConnect or PLCConnectEx</param>
            <param name="buff">Pointer to 1-n SymboliCRW structures with a AccessHandle and read buffer information</param>
            <param name="timeout">Maximum time to wait for a response</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Simotion_WriteMixEx(System.Int32,Accon.AGLink.AGL4.SymbolicRW[],System.Int32)">
            <summary>
            Write data to the SIMOTION device
            </summary>
            <param name="connNr">Connection number that you got from the call to PLCConnect or PLCConnectEx</param>
            <param name="buff">Pointer to 1-n SymboliCRW structures with a AccessHandle and write buffer information</param>
            <param name="timeout">Maximum time to wait for a response</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WLD_OpenFile(System.String,System.Int32,System.IntPtr@)">
            <summary>
            This function opens or creates the specified WLD file, checks consistency and sets the handle for further access.
            </summary>
            <param name="fileName">Full path to WLD file.</param>
            <param name="access">Access flags (bit mask, WLD_ACCESS_...)</param>
            <param name="handle">Variable for access handle.</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WLD_CloseFile(System.IntPtr)">
            <summary>
            This function writes the content to file and closes it.
            </summary>
            <param name="handle">Access handle.</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WLD_OpenFileEncrypted(System.String,System.Int32,System.Byte[],System.IntPtr@)">
            <summary>
            This function opens or creates an encrypted WLD file and checks for consistency.
            </summary>
            <param name="fileName">Full path to WLD file</param>
            <param name="access">Access options (Bitmask, WLD_ACCESS_...)</param>
            <param name="key">Keys as bytes</param>
            <param name="handle">Handle for further access</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WLD_EncryptFile(System.String,System.String,System.Int32,System.Byte[])">
            <summary>
            This function encrypts the unencrypted WLD file using the given key.
            Both file paths have to differ. The unencrypted file must be accessible.
            Only options to deal with multiple data blocks will be evaluated.
            </summary>
            <param name="inFileName">Full path to unencrypted WLD file</param>
            <param name="outFileName">Full path to encrypted WLD file</param>
            <param name="access">Access options (Bitmask, WLD_ACCESS_...)</param>
            <param name="key">Key as bytes</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WLD_DecryptFile(System.String,System.String,System.Byte[])">
            <summary>
            This function decrypts the encrypted WLD file using the given key.
            Both files must exist and be accessible.
            </summary>
            <param name="inFileName">Full path to encrypted WLD file</param>
            <param name="outFileName">Full path to unencrypted WLD file</param>
            <param name="key">Key as bytes</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WLD_ReadAllBlockCount(System.IntPtr,Accon.AGLink.AGL4.ALL_BLOCK_COUNT@)">
            <summary>
            This function reads the count of blocks within the file.
            </summary>
            <param name="handle">Access handle.</param>
            <param name="pBC">Variable for block count info.</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WLD_ReadBlockCount(System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            This function reads the count of blocks within the file.
            </summary>
            <param name="handle">Access handle.</param>
            <param name="blockType">Type of block</param>
            <param name="blockCount">Variable for block count.</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WLD_ReadBlockList(System.IntPtr,System.Int32,System.UInt16[]@)">
            <summary>
            This function reads the count of blocks and directory info as S7-Format for the specified block type within the file.
            </summary>
            <param name="handle">Access handle.</param>
            <param name="blockType">Type of block</param>
            <param name="blockList">Directory info, Variable for block count and flags (Number, Flags, Number, Flags, ...)</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WLD_ReadBlockLen(System.IntPtr,System.Int32,System.Int32,System.Int32@)">
            <summary>
            This function reads the size of the data block within the file.
            </summary>
            <param name="handle">Access handle.</param>
            <param name="blockType">Type of block</param>
            <param name="blockNr">Number of block</param>
            <param name="blockLen">Size of data block in bytes</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WLD_DeleteBlocks(System.IntPtr,System.String)">
            <summary>
            This function deletes the specified blocks within the file.
            </summary>
            <param name="handle">Access handle.</param>
            <param name="blocks">List of blocks
            "All"  for "All data blocks" bzw.
            "AllU" for "All User defined data blocks" or
            "OB", "FC", "FB", "DB", "SFC", "SFB", "SDB" for "All all data blocks of type" or
            a range (for example "FC 1 - 10") or
            single data block (for example "OB 1")</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WLD_GetReport(System.IntPtr,System.String@)">
            <summary>
            This function reads the size of the data block within the file.
            </summary>
            <param name="handle">Access handle.</param>
            <param name="report">Variable for report.</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.PLC_Backup(System.Int32,System.IntPtr,System.String,System.Int32)">
            <summary>
            This function saves the available datablocks within the plc to the specified file.
            </summary>
            <param name="connNr">Connection handle.</param>
            <param name="handle">Access handle.</param>
            <param name="blocks">List of blocks
            "All"  for "All data blocks" bzw.
            "AllU" for "All User defined data blocks" or
            "OB", "FC", "FB", "DB", "SFC", "SFB", "SDB" for "All all data blocks of type" or
            a range (for example "FC 1 - 10") or
            single data block (for example "OB 1")</param>
            <param name="timeout">Timeout value to use</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.PLC_Restore(System.Int32,System.IntPtr,System.String,System.Int32)">
            <summary>
            This function restores the available datablocks from the specified file to the plc.
            </summary>
            <param name="connNr">Connection handle.</param>
            <param name="handle">Access handle.</param>
            <param name="blocks">List of blocks
            "All"  for "All data blocks" bzw.
            "AllU" for "All User defined data blocks" or
            "OB", "FC", "FB", "DB", "SFC", "SFB", "SDB" for "All all data blocks of type" or
            a range (for example "FC 1 - 10") or
            single data block (for example "OB 1")</param>
            <param name="timeout">Timeout value to use</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.PLC_DeleteBlocks(System.Int32,System.String,System.Int32)">
            <summary>
            This function deletes the specified datablocks in the plc.
            </summary>
            <param name="connNr">Connection handle.</param>
            <param name="blocks">List of blocks
            "All"  for "All data blocks" bzw.
            "AllU" for "All User defined data blocks" or
            "OB", "FC", "FB", "DB", "SFC", "SFB", "SDB" for "All all data blocks of type" or
            a range (for example "FC 1 - 10") or
            single data block (for example "OB 1")</param>
            <param name="timeout">Timeout value to use</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Drive_ReadMix(System.Int32,Accon.AGLink.AGL4.DATA_RW40_DRIVE[],System.Int32,System.Int32)">
            <summary>
            With this function you can read mixed datatypes and datasizes in one job. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">handle</param>
            <param name="Buff">Pointer to the reading structurs</param>
            <param name="Num">Count of the structures</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Drive_ReadMixEx(System.Int32,Accon.AGLink.AGL4.DATA_RW40_DRIVE[],System.Int32,System.Int32)">
            <summary>
            With this function you can read mixed datatypes and datasizes in one job. A connection to the PLC must be already built up. 
            Here compared with the function Accon.AGL4.Drive_ReadMix, the data are read in the provided buffer. Use the element Buff of the structur 
            DATA_RW40_DRIVE to specify the target memory.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to the reading structure</param>
            <param name="Num">Count of the structures</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Drive_WriteMix(System.Int32,Accon.AGLink.AGL4.DATA_RW40_DRIVE[],System.Int32,System.Int32)">
            <summary>
            With this function you can write mixed datatypes and data sizes with one job. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to the writing structures</param>
            <param name="Num">Number of used structure elements</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Drive_WriteMixEx(System.Int32,Accon.AGLink.AGL4.DATA_RW40_DRIVE[],System.Int32,System.Int32)">
            <summary>
            With this function you can write mixed datatypes and datasizes in one job to the PLC. A connection to the 
            PLC must be already built up. Here compared with the function Accon.AGL4.Drive_WriteMix, the data are read from the provided buffer. 
            Use the element Buff of the structure DATA_RW40_DRIVE to specify the data source.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to the writing structures</param>
            <param name="Num">Number of used structure elements</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_CheckNSKVarLine(System.String,Accon.AGLink.AGL4.NckDataRW@,System.String@)">
            <summary>
            With this function you can examine a row of an NSK file, translate it into a NCKDataRW structure and get 
            the variable name. The memory required for the content of the variable is automatically allocated. This function 
            is called internally by NCK_ReadNSKVarFile for each line of the file.
            </summary>
            <param name="Line">Text to check</param>
            <param name="RW">Structure for the definition of the variables</param>
            <param name="Name">Space for the name of the variables</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_ReadNSKVarFile(System.String,Accon.AGLink.AGL4.NckDataRW[]@,System.String[]@)">
            <summary>
            With this function you can read an entire NSK file and translate it into access structures necessary for the communication. 
            In addition, you get the name of each variable. The NSK file dont contains the number of elements. To read an array, you must 
            therefore change the number of elements (= RowCount) and the offset (= row) in the respective structures, reallocate the buffer 
            and adjust BuffLen to the new length. You will find a description of the required functions in chapter »4.6 Memory Management Functions«. 
            If you no longer need the variable definitions and the strings, you must release the memory with NCK_FreeVarBuff.
            According to experience some variables in the NSC file are not correctly described, resulting in an offset error in the file definition. 
            With these variables, you need to adjust the offset accordingly.
            </summary>
            <param name="FileName">Name of the definition file to read</param>
            <param name="RWs">Pointer to array of the variable structure (will be allocated)</param>
            <param name="Names">Pointer to array of the variable name (will be allocated)</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_CheckCSVVarLine(System.String,Accon.AGLink.AGL4.NckDataRW@,System.String)">
            <summary>
            With this function you can examine a row of a CSV file, translate it into a NCKDataRW structure and get the variable name. 
            The memory required for the content of the variable is automatically allocated. This function is used internally by 
            NCK_ReadCSVVarFile for each row of the CSV file .The CSV-file must have the following structure: 
            »"Bereich";"Einheit";"Baustein";"VarName";"VarTyp";"VarAnzByte";"Zeile";"Spalte"«.
            (»"Area";"Unit";"Block";"Name of Var";"Type";"Number of byte";"Row";"Column"«).
            </summary>
            <param name="Line">Text to check</param>
            <param name="RW">Structure for the definition of variables</param>
            <param name="Name">Space for the name of variables</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_ReadCSVVarFile(System.String,Accon.AGLink.AGL4.NckDataRW[]@,System.String[]@)">
            <summary>
            With this function you can read an entire CSV file and translate it into the access structures 
            necessary for communication. In addition, you get the name of each variable. The CSV file dont 
            contains the number of elements. To read an array, you must therefore change the number of elements (= RowCount) and the 
            offset (= row) in the respective structures, reallocate the buffer and adjust BuffLen to the new length. You will find a description 
            of the required functions in chapter »4.6 Memory Management Functions«. If you no longer need the variable definitions and the 
            strings, you must release the memory with NCK_FreeVarBuff.
            </summary>
            <param name="FileName">Name of the definition file to read</param>
            <param name="RWs">Pointer to array of variable structures (will be allocated)</param>
            <param name="Names">Pointer to array of variable names (will be allocated)</param>
            <returns>&gt;= 0	Count of read variable definitions &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_ReadGUDVarFile(System.String,Accon.AGLink.AGL4.NckDataRW[]@,System.String[]@)">
            <summary>
            With this function you can read the variable definitions from the binary form of a GUD file. 
            The file name on the NCK must meet the following convention: _N_ (NC | U.S. | AX) _GD [1-9] _ACC. The area and the 
            GUD number are determined automatically from the file name.
            The GUD file usually contains the complete variables (i.e. with all possible indexes). 
            The buffers are thus configured for the maximum. To get fewer values, you have to change the item number 
            (= RowCount) and the offset (= Row) in the structuresf, reallocate the buffer and adjust BuffLen to the new length. 
            You will find a description of the required functions in chapter »4.6 Memory Management Functions«. If you no longer need 
            the variable definitions and the strings, you must release the memory with NCK_FreeVarBuff.
            </summary>
            <param name="FileName">Name of the definition file to read</param>
            <param name="RWs">Pointer to array of variable structures (will be allocated)</param>
            <param name="Names">Pointer to array of variable names (will be allocated)</param>
            <returns>&gt;= 0	Count of read variable definitions &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_ReadGUDVarFileEx(System.String,System.Int32,System.Int32,Accon.AGLink.AGL4.NckDataRW[]@,System.String[]@)">
            <summary>
            With this function you can read the variable definitions from the binary form of a GUD file. The file name on 
            the NCK must not comply with any convention, because you directly specify the area and the combined cycle number.
            The GUD file usually contains the complete variables (i.e. with all possible indexes). The buffers are thus 
            configured for the maximum. To get fewer values, you have to change the item number (= RowCount) and the offset 
            (= Row) in the structuresf, reallocate the buffer and adjust BuffLen to the new length. You will find a description 
            of the required functions in chapter »4.6 Memory Management Functions«. If you no longer need the variable definitions 
            and the strings, you must release the memory with NCK_FreeVarBuff.
            </summary>
            <param name="FileName">Name of the definition file to read</param>
            <param name="GUDNr">Number of the GUD (1 – 9)</param>
            <param name="Area">The area for the GUD (NCK, Channel, Axis)</param>
            <param name="RWs">Pointer to array of variable structures (will be allocated)</param>
            <param name="Names">Pointer to array of variable names (will be allocated)</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_GetNCKDataRWByNCDDEItem(System.String,Accon.AGLink.AGL4.NckDataRW@,System.Int32@)">
            <summary>
            With this function you can read the variable definitions from a NCDDE-Item
            Example: Item="/Channel/InterruptionSearch/workPNameLong"
            </summary>
            <param name="Item">NCDDE-Item</param>
            <param name="RW">NckDataRW result struct</param>
            <param name="ErrorPosition">error position in Item string</param>
            <returns></returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_ReadMixEx(System.Int32,Accon.AGLink.AGL4.NckDataRW[]@,System.Int32)">
            <summary>
            This feature allows you to read various data types and data sizes in one job. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to reading structure</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_WriteMixEx(System.Int32,Accon.AGLink.AGL4.NckDataRW[]@,System.Int32)">
            <summary>
            With this function you can write various data types and data sizes in one job. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to writing structures</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_CheckVarSize(System.Int32,Accon.AGLink.AGL4.NckDataRW[]@,System.Int32)">
            <summary>
            With this function you can check the length of the variables on the NCK. This feature has been implemented, as the data type or 
            data length specified in the documentation is not always correct causing errors as e.g. AGL40_PDUSIZE_ERROR. Call this function as well as the 
            functions NCK_ReadMixEx or NCK_WriteMixEx. The NCKDataRW structure has to be initialized as well as for these two functions. The difference 
            is that with this function no arrays are checked but only one array element ie, the RowCount field must be 1.  If RowCount &lt;&gt; 1, the values of BuffLen and 
            RowCount are converted automatically by ACCON-AGLink. In this case BuffLen is divided by RowCount and the value 1 is used for RowCount. After calling the function, 
            the Result field of the structure contains AGL40_SUCCESS if the length is right. It contains AGL40_WRONG_VAR_SIZE and the right length in the BuffLen field when the 
            NCK sends another data length. It contains the appropriate error code if the variable could not be read. The DDEVarType or MDEVarType fields 
            remain always unchanged, because the data type is not sent by the NCK and for this purpose an analysis of the data would be required. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to structures to be checked</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_InitCyclicReadEx(System.Int32,System.Int32,System.Boolean,Accon.AGLink.AGL4.NckDataRW[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the 
            NCK sends the value of the variables automatically in a configured frame. You don’t have to poll them explicit. 
            If you call the function with the flag »OnlyChanged«, you only get the variables if the value of at least one of 
            the requested variables has changed. Thus the communication load is once again reduced significantly. When the cyclical 
            reading is started you have to launch NCK_GetCyclicReadEx jobs to receive the values.
            You have to pay attention that the whole query has to fit in one PDU. That applies as well the request as to the response
            telegram with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            The reading structures contain the current state of the variable on on successful return of the function if the flag »OnlyChanged« is set.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="CycleTime">Cycletime in milliseconds</param>
            <param name="OnlyChanged">Flag whether variables are transmitted only when changing</param>
            <param name="Buff">DATA_RW array of structures, like ReadMix</param>
            <param name="Handle">Variable for the handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_StartCyclicRead(System.Int32,System.Int32,System.Int32)">
            <summary>
            With this function you start the cyclic reading of variables. You need this if you have stopped reading 
            using NCK_StopCyclicRead. A connection to the NCK must be already built up and the cyclical reading must be initialized.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Handle">The handle out of NCK_InitCyclixReadEx</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_StopCyclicRead(System.Int32,System.Int32,System.Int32)">
            <summary>
            With this function you can stop or interrupt the cyclic reading of variables. A connection to the NCK must
            be already built up and the cyclical reading must be initialized.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Handle">The handle of NCK_InitCyclixReadEx</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_ExitCyclicRead(System.Int32,System.Int32,System.Int32)">
            <summary>
            With this function you can stop the reading and release the resources on the NCK. 
            A connection to the NCK must be already built up and the cyclical reading must be initialized.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Handle">The handle of NCK_InitCyclixReadEx</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_GetCyclicReadEx(System.Int32,Accon.AGLink.AGL4.NckDataRW[]@,System.Int32,System.Int32)">
            <summary>
            With this function, you receive a package with variables from the NCK. Ideally this function is called 
            asynchronously with a notification on incoming data. You can launch multiple reading jobs at the same time. They will be used sequential.
            The parameters Buff und Num have to match to the parameters used on initializing the reading with 
            NCK_InitCyclicReadEx. The easiest way would be, to send the same variables.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Array with NCKDataRW-structures</param>
            <param name="Handle">Handle out of NCK_InitCylicReadEx</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_StartAll(System.Int32,System.Byte[],System.String,System.Int32)">
            <summary>
            With this function you can run an arbitrary PI service. You must pass the required 
            parameters into the function exactly as expected by the NCK and specify the PI service 
            in the parameter cmd. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Para">Parameter for the PI-service</param>
            <param name="Cmd">Name of the PI service</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_EXTERN(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            This function allows you to select a program for a channel from extern. The program may not 
            reside in the passive file system of the NCK. The program name will be activated with this PI service. 
            It will be deselected on the end of the program or on channel reset. This is a channel-specific service, 
            so the channel number must be specified. Once the program is activated, it must be transferred with the 
            function NCK_CopyFileToNC. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Channel">The number of the channel</param>
            <param name="ProgName">The name of the programm (max. 32 characters)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_EXTMOD(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            This function allows you to select a program for a channel from extern. The program may not reside 
            in the passive file system of the NCK. The program name will be activated with this PI service. 
            In contrast to NCK_PI_EXTERN it will stay selected on the end of the program and on channel reset. 
            This is a channel-specific service, so the channel number must be specified. Once the program is activated, 
            it must be transferred with the function NCK_CopyFileToNC. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Channel">The number of the channel</param>
            <param name="ProgName">The name of the programm (max. 32 characters)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_SELECT(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            This function allows you to select a program residing in the passive file system of the NCK 
            for a channel to execute. The program name will be activated with this PI service. For this it 
            has to be an executable file. This is a channel-specific service, so the channel number must be 
            specified. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Channel">The number of the channel</param>
            <param name="ProgName">The name of the programm (max. 32 character)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_F_DELE(System.Int32,System.String,System.Int32)">
            <summary>
            This feature allows you to delete a file or directory in the passive file system of the NCK. 
            This is only possible if is deleting is enabled for the file or folder at the current accesslevel. 
            A directory (_DIR) can only be deleted if it contains no entry. A workpiece directory (_WPD) can be 
            deleted with all containing modules. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="FileName">The name of the file (max. 32 character)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_F_XFER(System.Int32,System.String,System.Int32)">
            <summary>
            This feature allows you to select a block in the passive file system to upload. 
            The files in the hierarchical part of the passive file system on the NCK can be addressed 
            only through the absolute path name. This PI service can make a file of the passive file system 
            addressable to upload. The directory "_N_XFER_DIR" is always browsed first, when uploading. 
            If the filename is found here, it is transfered by the NCK. This assignment remains active until 
            the completion of the transfer. It is also possible to delete the file name from the directory 
            "_N_XFER_DIR" again without making a transfer. This will only remove the file reference from the 
            directory without deleting the file. Multiple files can be referenced at the same time. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="FileName">The name of the file (max. 32 character)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_F_PROT(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            With this function you can assign security rights to a saved NCK file. The NCK will check whether a 
            change of the rights for the specified file is possible under the topically valid conditions. 
            The security rights apply to the file functions »read«, »write«, »list«, »delete« and use 7 levels. 
            The file function »execute« can have only two protection levels: 0 (file can not be selected for execution) 
            and 7 (file can be selected for execution). Level 0 is the highest protection level, i.e. only a user with 
            knowledge of the system password file, can execute the respective function or change the rights. The lowest 
            security level is 7 giving every user the right to execute the function or to change the rights.
            Protection is a numberstring with 5 numeric characters specifying the access level for read, write, execute, 
            list and delete. Each character represents the access level of a specific file function. 
            The positions correspond (from left to right) to the resp. functions:
            1. Position: Protection level for read 		0 to 7 	(or '-')
            2. Position: Protection level for write 		0 to 7 	(or '-')
            3. Position: Protection level for execute 		0 to 7 	(or '-')
            4. Position: Protection level for list 			0 or 7
            5. Position: Protection level for delete		0 to 7 	(or '-')
            A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="FileName">The name of the file (max. 32 characters)</param>
            <param name="Protection">Protection level to set</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_F_RENA(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            With this function you can rename a file or directory of the passive filesystem. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="OldFileName">Old name of the file (max. 32 character)</param>
            <param name="NewFileName">New name of the file (max. 32 character)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_LOGIN(System.Int32,System.String,System.Int32)">
            <summary>
            With this function you can send a password to the NCK to set the current access level. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Password">The password with exactly 8 characters, if necessary filled with spaces</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_LOGOUT(System.Int32,System.Int32)">
            <summary>
            With this function you can reset the current access level. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_F_OPEN(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            A file of the passive file system is opened for reading and writing (this does not apply to the blocks of the passive file system: Directory _DIR or _WPD). 
            A temporary edit window with the name 'Window Name' is created in which the open file can be changed (see also NCK_F_OPER). 
            When a file is only needed for reading, the NCK_F_OPER function should be used. This avoids that the file is created if it does not exist. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="FileName">Name of the program on the NCK to be processed</param>
            <param name="WindowName">Name of the edit window</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_F_OPER(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            A file of the passive file system is opened for reading (This does not apply to the blocks of the passive file system: Directory _DIR or _WPD). 
            The function corresponds in the configuration and functionality to the NCK_PI _F_OPEN function. The only difference is that NCK_PI _F_OPER 
            opens the file exclusively for reading, whereas NCK_PI _F_OPEN permits write accesses. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="FileName">Name of the program on the NCK to be processed</param>
            <param name="WindowName">Name of the edit window</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_F_SEEK(System.Int32,System.String,Accon.AGLink.AGL4.SeekMode,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            The edit cursor in an edit window generated by the function NCK_PI_F_OPEN or NCK_PI_F_OPER is placed to a certain position. The edit cursor is before the position found: 
            - in block-wise accesses at the beginning of the NC block containing the search string, 
            - in char-wise accesses at the beginning of the found search string (possibly in mid-sentence)
            A connection to the NCK must be already built up and either the function NCK_PI_F_OPEN or NCK_PI_F_OPER must been called. The NCK_PI_F_CLOS function may not have been called.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="WindowName">Name of the edit window. Here the name of the window from the function NCK_PI_F_OPEN or NCK_PI_F_OPER must be used</param>
            <param name="SeekMode">0 = Block Mode (line by line), 1 = Character Mode (character by character)</param>
            <param name="SeekPointer">Position within the file relative to the beginning of the file, 1 &lt;= SeekPointer &lt;= 99999999</param>
            <param name="WindowSize">Number of elements (lines or characters depending on SeekMode) that are addressable via the edit window, 1 &lt;= WindowSize &lt;= 99999</param>
            <param name="CompareString">By positioning a search process can be linked. If the search string is not found, the PI service is negatively acknowledged and the seek pointer retains its original position.</param>
            <param name="SkipCount">The search job can be parameterized so that a certain number of found search string iare skipped, 0 &lt;= Skip Count &lt;= 99999.</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_F_CLOS(System.Int32,System.String,System.Int32)">
            <summary>
            A file of the passive file system on the NCK is closed. The edit window is implicitly deleted. A connection to the NCK must be already built up and either the function NCK_PI_F_OPEN or NCK_PI_F_OPER must been called.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="WindowName">Name of the edit window</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_F_COPY(System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Copy modules and directories on the NCK.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Direction">Copy direction</param>
            <param name="SourceFileName">Name of the source file with max 32 characters. 
            i.e. /_N_yyyy_xxx/_N_yyyy_zzz/...
            yyyy = any text  (max. 25 characters) for file or pathname.
            xxx = DIR or WPD (meaning directory)
            zzz = Fileending</param>
            <param name="DestinationFileName">Name of destination file with max 32 characters.
            i.e. /_N_yyyy_xxx/_N_yyyy_zzz/...
            yyyy = any text  (max. 25 characters) for file or pathname.
            xxx = DIR or WPD (meaning directory)
            zzz = Fileending</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_F_PROR(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Update access security attributes of a file.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="FileName">Filename with max 32 characters.
            i.e. /_N_yyyy_xxx/_N_yyyy_zzz/...
            yyyy = any text  (max. 25 characters) for file or pathname.
            xxx = DIR or WPD (meaning directory)
            zzz = Fileending</param>
            <param name="Protection">Number with exactly 5 digits. Security attributes are defined as Read, Write, Execute, Display/Open and Delete.
            starting from the left the digits have the following meaning:
            1. Attribute for Read: 0 - 7 (or -)
            2. Attrbute for Write: 0 - 7 (or -)
            3. Attribute for Execute: 0 - 7 (or -)
            4. Attribute for Display/Open: 0 or 7
            5. Attribute for Delete: 0 - 7 (or -)</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_CANCEL(System.Int32,System.Int32)">
            <summary>
            All alarms of type "Cancel-Alarm" can be acknowledged using this command. Single alarms cannot be acknowledged with this command.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_CRCEDN(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a cutting edge using the given number. If the tool of the used T-Number exists then the cutting edge will be added to the tool (in this case the value range of the D-Number is 1 to 9).
            If the T-Number is a positive number and the corresponding tool does not exist, then the function will fail.
            If 0 is used as the T-Number then the value range of the D-Number is extends from 1 to 31999. 
            The new cutting edge will be created with the given D-Number. If the cutting edge with the corrsponding number already exists then the function will fail.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="ToolArea">Number of Tool Area</param>
            <param name="TNumber">T-Number of the tool that gets the cutting edge assigned. The value 0 means that no assignment to a tool will be made</param>
            <param name="DNumber">Number of the cutting edge:
            T-Number = 0: 1 - 31999
            T-Number &gt; 0: 1 - 9</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_DELECE(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Delete a cutting edge .If the tool of the used T-Number exists then the cutting edge will be removed from this tool (in this case the value range of the D-Number is 1 to 9).
            If the T-Number is a positive number and the corresponding tool does not exist, then the function will fail.
            If 0 is used as the T-Number then the value range of the D-Number is extends from 1 to 31999. 
            If the cutting edge with the corrsponding number does not exists then the function will fail.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="ToolArea">Area id and identifier. Structured as "4XY" and XY is the tool area</param>
            <param name="TNumber">T-Number of the tool to delete the cutting edge from. The value 0 means that no assignment to a tool will be made</param>
            <param name="DNumber">Number of the cutting edge:
            T-Number = 0: 1 - 31999
            T-Number &gt; 0: 1 - 9</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_DELETO(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes a tool and all cutting edges in every datablock. The tool is also deleted in the following datablocks if one exists: TO, TU, TUE, TV, TG (Typ 400), TD, TS.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="ToolArea">Area id and identifier. Structured as "4XY" and XY is the tool area</param>
            <param name="TNumber">T-Number of the tool. Value range is 1 to 31999</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_IBN_SS(System.Int32,System.Int32,System.Int32)">
            <summary>
            Switch for operation start. This service is only available for SINUMERIK FM-NC. For SINUMERIK 840D there is a special switch.
            Using this switch you can switch the NC to various operation states.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Switch">Position of the switch. Possible values are AGL4.NCK_IBN_SS_XXX</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_MMCSEM(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            For every channel there are 10 semaphores to protect the critical function of the MMC.
            Multiple MMC units can synchronize to a semaphore that that is set to a specific function number ( 1 &gt;= function number &gt;= 10) 
            if a function contains a critical section corresponding to the data that have to be retrieved by the NCK.
            The MMC manages the semaphores.
            The semaphore value 1 speficfies a test and set operation regarding the semaphoe and the used function number.
            The return value of the PI service is the result of this operation.
            Return value OK: Semaphore could be set the critical function can be called.
            Return value REJECTED: Semaphore was already set the critical function can be called at the moment.
            The semaphore value 0 specifies to reset the semaphore.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="ChannelNumber">Area id and identifier. Structured as "2XY" and XY is the channel number</param>
            <param name="FunctionNumber">Number of service function. Possible values are AGL4.NCK_MMCSEM_XXX</param>
            <param name="SemaValue">0: reset the semaphore or 1: test and set semaphore</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_TMCRTO(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a tool using a name, Duplo-Number and optionally a T-Number.
            The following datablocks are affacted by this function:
            Tool directory TV: The tool will be added as existing
            Tool corrections TO: The first cutting edge D1 with NULL content will be added
            Monitoring TS: The first cutting edge D1 with NULL content will be added
            User edge data TUE: (if existing) The first cutting edge D1 with NULL content will be added
            User tool data TU: (if existing) an empty data set will be created for the tool
            Common tool data TD: an empty data set will be created for the tool
            Monitoring TSU: (if existing) first edge for OEM Monitoring data
            
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="ToolArea">Area id and identifier. Structured as "4XY" and XY is the tool area</param>
            <param name="ToolID">Tool name (max 32 characters even number of chracters)</param>
            <param name="ToolNumber">Tool-Number
            1 to 31999: user defined Tool-Number
            -1: NCK set ToolNumber</param>
            <param name="DuploNumber">Duplo-Number
            1 to 31999: user defined Duplo-Number
            0: NCK uses the next higher number</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_PI_TMMVTL(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This service is used for load and unload. The operation that is executed depends on the assignment of the real places of the 'Source' and 'Destination' paramtgers:
            'Source'-Parameter = Load station/place -&gt; means prepare magazine place to load.
            'Destination'-Parametr = Load station/place -&gt; means unload tool
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="ToolArea">Area id and identifier. Structured as "4XY" and XY is the tool area</param>
            <param name="ToolNumber">Tool-Number 1 to 31999
            -1: no Tool-Number specified (Valid for function 'Unload')</param>
            <param name="SourcePlaceNumber">Place number 1 to 31999
            -1: i.e. for unload if the place is already specified via the T-Number (ToolNumber)</param>
            <param name="SourceMagazineNumber">Magazine number 1 to 31999
            -1: i.e. for unload if the place is already specified via the T-Number (ToolNumber)
            9999: Load station</param>
            <param name="DestinationPlaceNumber">Place number 1 to 31999
            -1: search for an empty place and move magazine
            -2: tool will be loaded to the currently used position</param>
            <param name="DestinationMagazineNumber">Magazine number 1 to 32000
            9999: Load station</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_CopyToNC(System.Int32,System.String,System.Byte[],System.Int32)">
            <summary>
            This function allows you to copy a buffer into a file on the NCK. The contents of 
            the buffer must match exactly to the contents of the file preceded by the specification 
            of the path. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="FileName">Filename at the NCK</param>
            <param name="Buff">Buffer with the file content</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_CopyFromNC(System.Int32,System.String,System.Byte[],System.Int32@,System.Int32)">
            <summary>
            With this function you can copy a file from the NCK in a buffer on the PC. 
            You have to know the size of the file on the NCK and allocate the appropriate buffer. You get 
            the used length as a result of the function. If this is larger than the allocated length, ACCON-AGLink has 
            cut off the file to prevent a buffer overflow. In this case, call the function again with a larger buffer. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="FileName">Filename at the NCK</param>
            <param name="Buff">Buffer for file content</param>
            <param name="NeededLen">Variable for required length</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_CopyFromNCAlloc(System.Int32,System.String,System.Byte[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can copy a file on the NCK in a buffer on the PC. You do not have 
            to know the file size on the NCK, because ACCON AGLink automatically allocates the space. If you no 
            longer need the buffer, you have to call NCK_FreeBuff in any case to release the space. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="FileName">Filename on the NCK</param>
            <param name="Buff">Buffer for the file content</param>
            <param name="BuffLen">Variable for the length of the buffer</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_CopyFileToNC(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            With this function you can copy a file from the PC to the NCK. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="NCFileName">Name of the file with directory on the NCK</param>
            <param name="PCFileName">Name of the file with directory on the PC</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_CopyFileFromNC(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            With this function you can copy a file from the NCK to the PC. A connection to the NCK must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="NCFileName">Name of the file with directory on the NCK</param>
            <param name="PCFileName">Name of the file with directory on the PC</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NCK_FreeBuff(System.IntPtr)">
            <summary>
            Gibt einen Speicher frei, der zuvor von AGLink im unmanaged Bereich allokiert wurde
            </summary>
            <param name="Buff">Zeiger auf den unmanaged Speicher, den AGLink freigeben soll</param>
            <returns>AGL40_SUCCES im Erfolgsfall, &lt; 0 eine Fehlernummer</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.IsOldParameterstructure(System.Object)">
            <summary>
            Übergangsfunktion, bis die alten Strukturen nicht mehr nach Aussen geleitet werden.
            </summary>
            <param name="para">Zu prüfender Parameter</param>
            <returns>Flag ob es sich um eine alte Struktur handelt</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.SetDevNotification(System.Int32,Accon.AGLink.AGL4.NOTIFICATION@)">
            <summary>
            Durch diese Funktion teilen Sie ACCON-AGLink mit, dass Sie eine Benachrichtigung erhalten möchten, 
            wenn auf diesem Device ein Auftrag beendet oder abgebrochen wurde.
            </summary>
            <param name="DevNr">Die Gerätenummer</param>
            <param name="pn">Die Struktur mit der Benachrichtungsinfo</param>
            <returns>AGL4_SUCCESS im Erfolgsfall. Eine Zahl kleiner 0 ist eine Fehlernummer</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.SetConnNotification(System.Int32,Accon.AGLink.AGL4.NOTIFICATION@)">
            <summary>
            Durch diese Funktion teilen Sie ACCON-AGLink mit, dass Sie eine Benachrichtigung erhalten möchten, 
            wenn auf diesem Device ein Auftrag beendet oder abgebrochen wurde.
            </summary>
            <param name="DevNr">Die Gerätenummer</param>
            <param name="pn">Die Struktur mit der Benachrichtungsinfo</param>
            <returns>AGL4_SUCCESS im Erfolgsfall. Eine Zahl kleiner 0 ist eine Fehlernummer</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.DeleteJob(System.Int32,System.Int32)">
            <summary>
            Diese Funktion löscht einen Auftrag mit einer bestimmten Nummer aus der 
            Auftrags¬bearbeitungsschlange. Ein Auftrag kann nur gelöscht werden, 
            wenn er sich im Zustand »wartend« befindet. Das Löschen eines begonnenen 
            oder beendeten Auftrags liefert einen Fehler.
            </summary>
            <param name="DevNr">Die Nummer des Devices</param>
            <param name="JobNr">Die Auftragsnummer aus dem asynchronen Aufruf</param>
            <returns>AGL4_SUCCESS im Erfolgsfall. Eine Zahl kleiner 0 ist eine Fehlernummer</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.SetOptNotification(System.IntPtr,Accon.AGLink.AGL4.NOTIFICATION@)">
            <summary>
            Mit dieser Funktion wird eine Benachrichtung für die optimierten Anfrage eingetragen. 
            Dies genügt einmal nach der Optimierung.
            </summary>
            <param name="Opt">Optimierungshandle</param>
            <param name="Notification">Die Struktur mit der Benachrichtungsinfo</param>
            <returns>AGL4_SUCCESS im Erfolgsfall. Eine Zahl kleiner 0 ist eine Fehlernummer</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.AllocS7ChangeMsgStateArray(Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[])">
            <summary>
            Nur für internen Gebrauch! Nicht nach Außen leiten
            </summary>
            <param name="Msg"></param>
            <returns></returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.FreeS7ChangeMsgStateArray(System.IntPtr,System.Int32)">
            <summary>
            Nur für intenren Gebrauch! Nie nach Außen leiten
            </summary>
            <param name="msgPointer"></param>
            <param name="msganz"></param>
            <returns></returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.AllocNCKReadPointer(System.Runtime.InteropServices.GCHandle@,System.Runtime.InteropServices.GCHandle@)">
            <summary>
            Allokiert Speicher im unverwalteten Bereich für Namen und für Strukturen
            und gibt die Größe der Struktur in Bytes zurück
            </summary>
            <param name="namePointer">Zeiger auf Zeiger für die Namen</param>
            <param name="rwPointer">Zeiger auf Zeiger für Strukturen</param>
            <returns>Größe einer Struktur in Bytes</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.CopyUnmanagedNCKDataToManaged(System.IntPtr,System.IntPtr,Accon.AGLink.AGL4.NckDataRW[],System.String[],System.Int32,System.Int32)">
            <summary>
            Kopiert die Daten aus dem unverwalteten Bereich in den übergebenen verwaltetn Speicher
            </summary>
            <param name="namePointer">Zeiger auf den Namensspeicher</param>
            <param name="rwPointer">Zeiger auf den Strukturspeicher</param>
            <param name="rws">Puffer für gelesene Strukturen</param>
            <param name="names">Puffer für gelesene Namen</param>
            <param name="rwsize">Größe einer Struktur in Bytes</param>
            <param name="datacount">Anzahl der zu konvertierenden Datensätze</param>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadOpState(System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can request the operating state of the PLC. There must be a connection to 
            the desired PLC. The current operating state will be returned in State using the following 
            constants: OPSTATE_STOP, OPSTATE_START, OPSTATE_RUN and OPSTATE_UNKNOWN.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="State">Variable for the operating state of the PLC </param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadOpStateEx(System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can request the current operating status of the PLC. A connection to that 
            PLC must already be established. The current operational status will be returned in State. You will get one 
            of the OPSTATEEX_xxx-Constants. With this you can e.g. recognize if there is a fault-tolerant S7-400H-System trying to link up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="State">Variable for the operational status</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetPLCStartOptions(System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can determine whether the connected CPU supports a restart, a 
            softboot or a cold restart. The parameter StartOptions contains the Bitflags (S7_OPT_WARMSTART, S7_OPT_COLDSTART, S7_OPT_RESUME). 
            If you want to call that function there must be a connection to the PLC.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="StartOptions">Variable for the possible startvalues</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.PLCStop(System.Int32,System.Int32)">
            <summary>
            This function sets the state of the PLC to Stop. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.PLCStart(System.Int32,System.Int32)">
            <summary>
            This function sets the state of the PLC to Run by a restart. A connection to the PLC must already be built up.
            </summary>
            <param name="ConnNr">Connection handle.</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.PLCResume(System.Int32,System.Int32)">
            <summary>
            This function sets the PLC to Run by a cold restart. This function isn’t available for all controllers in 
            all PLC-parameterizations and may therefore return an error. You can test whether the start 
            will be supported by GetPLCStartOptions in advance. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.PLCColdStart(System.Int32,System.Int32)">
            <summary>
            This function sets the AG to Run by a cold start. This function isn’t available for 
            all controllers in all PLC- parameterizations and may therefore return an error. You can test 
            whether the start will be supported by GetPLCStartOptions in advance. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.IsHPLC(System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can determine if you are connected to fault-tolerant system (H-CPU). A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="IsHPLC">Variable for the H-CPU-Flag</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.HPLCStop(System.Int32,System.Int32,System.Int32)">
            <summary>
            With this function you can stop the CPU of a fault-tolerant system (H-CPU). A connection to the PLC must be already built up. 
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="CPUNr">The number of the CPU to stop</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.HPLCStart(System.Int32,System.Int32,System.Int32)">
            <summary>
            With this function you can start a CPU of a fault-tolerant system (H-CPU) by a restart. A connection to this PLC must be already built up. 
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="CPUNr">The number of the CPU which should be startet</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.HPLCColdStart(System.Int32,System.Int32,System.Int32)">
            <summary>
            With this function you can start a CPU of a fault-tolerant system (H-CPU) by a cold start. A connection to this PLC must be already built up. 
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="CPUNr">The number of the CPU which should be startet</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetPLCClock(System.Int32,Accon.AGLink.AGL4.TOD@,System.Int32)">
            <summary>
            This function reads the system time of the PLC. A connection to the PLC must be already built up. 
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="TOD">Pointer to the TimeOfDay-Structure</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.SetPLCClock(System.Int32,Accon.AGLink.AGL4.TOD@,System.Int32)">
            <summary>
            This function sets the system time of the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="TOD">Pointer to the TimeOfDay-structure</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.SyncPLCClock(System.Int32,System.Int32)">
            <summary>
            With this function you can set the Clock of the PLC to the same value as the Clock of the PC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadMLFBNr(System.Int32,System.String@,System.Int32)">
            <summary>
            This function determines the MLFB-Number of the PLC with the connection that is given by the connection handle. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="MLFBNr">Pointer to the MLFB-structure (String with 21 signs)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadMLFBNrEx(System.Int32,System.String@,System.UInt16@,System.UInt16@,System.Int32)">
            <summary>
            This function reads the MLFB number and the version numbers of the PLC and the interface connection from the PLC. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="MLFBNr">Variable for MLFB number</param>
            <param name="PLCVer">Variable for PLC version</param>
            <param name="PGASVer">Variable for PG-AS interface connection</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadPLCInfo(System.Int32,Accon.AGLink.AGL4.PLCINFO@,System.Int32)">
            <summary>
            With this function you can read the number of inputs, outputs, flags, timers and counters from the connected CPU. 
            A connection to the PLC must be already built up.
            Attention: 
            This function is not available for all controls. This works only on controllers of the S7-300 and S7-400 family. 
            You may therefore receive AGL40_FUNC_NOT_IMPLEMENTED as function result.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="PLCInfo">Buffer for the values</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadCycleTime(System.Int32,Accon.AGLink.AGL4.CYCLETIME@,System.Int32)">
            <summary>
            This function reads the current, minimal and maximal cycle time of the PLC. There must be a connection to the PLC.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="CycleTime">Pointer to the CYCLETIME-structure</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadProtLevel(System.Int32,Accon.AGLink.AGL4.PROTLEVEL@,System.Int32)">
            <summary>
            This function reads the current protection level, the parameterised protection level, the active protection level 
            of the CPU, the setting of the mode switch and the setting of the starting switch from the given PLC. 
            A connection to the PLC must be already built up.
            Possible values are 1, 2 or 3 for the protection level which is set by the mode switch. 
            For the parameterized protection level possible values are 0, 1, 2 or 3. 0 means: no password set or parameterized 
            protection level is invalid. The values of the mode switch mean: 1 =RUN, 2 = RUN-P, 3 = STOP, 4= MRES and 0 = undefined or indeterminate. 
            The values of the starting switch means 1 = CRST, 2 0 WRST and 0 =undefined, not available or nonexistent.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="ProtLevel">Pointer to PROTLEVEL-Structure</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadS7Ident(System.Int32,System.String[],System.Int32)">
            <summary>
            With this function you are able to read the identification strings of the PLC. Some string may be not present, 
            giving you empty result entries.  This function is only available at S7-300 – and S7-400-Controllers. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="IdentStrings">Pointer to Ident-structure</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadS7LED(System.Int32,Accon.AGLink.AGL4.S7_LED@,System.Int32)">
            <summary>
            With this function you can read the state of the LEDs of the CPU. It is only available at S7-300 – and S7-400-Controllers. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Led">Structure for the state of the LEDs</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetExtModuleInfo(System.Int32,Accon.AGLink.AGL4.EXT_MODULE_INFO@,System.Int32)">
            <summary>
            With this function you can read extended information about the module of a S7-300 – or a S7-400-Controller. 
            Not all structureelements will be given back everytime, sometimes some are empty. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Info">Pointer to the structure for the extended module information</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadSzl(System.Int32,System.Int32,System.Int32,System.Byte[]@,System.Int32@,System.Int32)">
            <summary>
            This function reads the system status list of the PLC. You get the meaning of the parameter and the valid values for Szlld and Index from the description of the respective PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="SzlId">Number of the system status list</param>
            <param name="Index">Index of the system status list</param>
            <param name="Buff">Pointer to the buffer</param>
            <param name="BuffLen">Length of the buffer at a call of the function, returns the number of read chars</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.IsPasswordReq(System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can check if you need a password for the access to the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="IsRequired">Variable for the flag</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.SetPassword(System.Int32,System.String,System.Int32)">
            <summary>
            With this function you can authenticate a connection. The password has 8 signs. If it’s shorter, then add some blanks. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="pw">Password</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.UnSetPassword(System.Int32,System.Int32)">
            <summary>
            With this function you can cancel the connection authentication. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadDiagBufferEntrys(System.Int32,System.Int32@,System.Int32)">
            <summary>
            This function reads the count of the parameterized diagnostig puffer entries from the PLC. A connection to the PLC must be already built up. 
            Use the function ReadDiagBuffer for the subsequent reading of the diagnostic buffer and the function GetDiagBufferEntry to convert the entry into text.
            Note:
            You don’t have to call this function necessarily. You can reserve the memory space and call directly ReadDiagBuffer. 
            In general there are up to 120 diagnostic buffer entries in a PLC.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Entrys">Pointer to parameterized count of entries</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadDiagBuffer(System.Int32,System.Int32@,System.Byte[]@,System.Int32)">
            <summary>
            This function reads the diagnostic buffer from the PLC. A connection to the PLC must be already built up. 
            Use the variable entry to specify the number of entries for which you have allocated space for. After the function return, 
            you will get number of read diagnostic buffer entries. Use the function GetDiagBufferEntry to  translate the read binary informations into text.
            Note:
            Every entry in the diagnostic buffer needs 20 bytes. Additional 8 bytes are needed in the communication buffer for head information. 
            To read 100 entries you must allocate 100 *20 + 8 = 2008 bytes.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Entrys">Count of the reserved entries in the call and count of read entries on the end of the function</param>
            <param name="DiagBuff">Pointer to buffer area</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetDiagBufferEntry(System.Int32,System.Byte[]@,System.String@)">
            <summary>
            This function converts the content of the diagnostic buffer entry to text. You should call that function with an index from 0 to Entrys-1. 
            Other values are invalid and will return an error.    
            </summary>
            <param name="Index">The Index of the diagnostic buffer entry</param>
            <param name="DiagBuff">Pointer to the buffer</param>
            <param name="Text">Pointer to the string</param>
            <returns>&gt;= 0	Length of the diagnostic buffer message &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadDBCount(System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can get the information, how many datablocks are present in the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="DBCount">Pointer to a variable for the count of datablocks</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadDBList(System.Int32,System.Int32@,System.UInt16[],System.Int32)">
            <summary>
            With this function you can read directory of the datablocks. You have to allocate memory for the numbers 
            of the data blocks, specifying the count of reserved elements in DBCount at the function call. 
            The count of used elements will be given back inDBCount at the end of the function. 
            To get a complete list, first call ReadDBCount and reserve the memory before you call this function. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="DBCount">Specifies the count of the reserved elements in the DBList at the call. Returns the count of used elements</param>
            <param name="DBList">Pointer to array for the datablock numbers</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadDBLen(System.Int32,System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can get the length of the desired datablock. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="DBNr">The number of the datablock</param>
            <param name="DBLen">Pointer to variable with the length of a datablock</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadAllBlockCount(System.Int32,Accon.AGLink.AGL4.ALL_BLOCK_COUNT@,System.Int32)">
            <summary>
            With this function you get the count of all blocks in a PLC. A connection to the PLC must be already built up. 
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="BC">Pointer to structure of datablock numbers</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadBlockCount(System.Int32,System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can determine how many blocks of a specific type are existent on the PLC. A connection to the PLC must be already built up. 
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="BlockType">Block type to check (BLK_TYPE_xxx)</param>
            <param name="BlockCount">Variable for the count of blocks of one type</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadBlockList(System.Int32,System.Int32,System.Int32@,System.UInt16[]@,System.Int32)">
            <summary>
            With this function you can read the directory of a specific block type. You have to allocate memory for the 
            numbers of the blocks, specifying the count of reserved elements in BlockCount at the function call. 
            The count of used elements will be given back in BlockCount at the end of the function. 
            To get a complete list, first call ReadBlockCount and reserve the memory 
            before you call this function. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="BlockType">Block type to check(BLK_TYPE_xxx)</param>
            <param name="BlockCount">Variable for the count of blocks of one type</param>
            <param name="BlockList">Pointer to array with block numbers</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadBlockLen(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can determine the length of a desired block. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="BlockType">Block type to check (BLK_TYPE_xxx)</param>
            <param name="BlockNr">Block number to check</param>
            <param name="BlockLen">Variable for the length of the block</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.InitOpStateMsg(System.Int32,System.Int32@,System.Int32)">
            <summary>
            This function allows you to activate the operating state transition messages. 
            This means that you will be informed by the connected PLC about a change of the operating state, such as a change from run to stop. 
            This way, you can save yourself the polling via GetOpState. After mounting the notification you have to query it via GetOpStateMsg. 
            You’ll get the current operating state of the PLC as returned value.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="OpState">Variable for the operating state(OPSTATE_xxx)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ExitOpStateMsg(System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you deactivate the operating state change messages. When calling this function you get the current 
            operating state of the PLC as returned value. There must be a connection to the AG. 
            If there is a pending GetOpStateMsg function, you have to delete it with DeleteJob.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="OpState">Variable for the operating status (OPSTATE_xxx)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetOpStateMsg(System.Int32,System.Int32@,System.Int32)">
            <summary>
            This function requests the operating state change message. 
            Since this message can happen at any time this function is generally called asynchronous with the timeout value 
            INFINITE and a notification is set onto the job. If you receice that notification you can set up the next query immediately.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="OpState">Variable for the operating state (OPSTATE_xxx)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.InitDiagMsg(System.Int32,System.Int32@,System.Int32,System.Int32)">
            <summary>
            With this function you can activate the receiving of user-defined and system-integrated diagnostic buffer messages. 
            You can find more details for this topic in STEP7- Programming package with the help to SFC 52 WR_USMSG. 
            You can specify the events, you want to be informed by a bitmask. For every connection you can mount only one kind of messagetype. 
            After mounting the notification you have to query it via GetDiagMsg. 
            Before closing the connection you have to dismount the diagnostic message.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="OpState">Variable for the operating status (OPSTATE_xxx)</param>
            <param name="DiagMask">Bitmask for the diagnostic messages (S7_DIAG_MSG_xxx)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ExitDiagMsg(System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you deactivate the diagnostic buffer messages. 
            If there is pending GetDiagMsg-function, you have to delete it via DeleteJob. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="OpState">Variable for the operating status (OPSTATE_xxx)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetDiagMsg(System.Int32,Accon.AGLink.AGL4.S7_DIAG_MSG@,System.Int32)">
            <summary>
            With this function you request a diagnostic message. Since this message can happen at any time 
            this function is generally called asynchronous with the timeout value INFINITE and a notification is 
            set onto the job. If you receice that notification you can set up the next query immediately.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="DiagMsg">Pointer to diagnostic message structure</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.InitCyclicRead(System.Int32,System.Int32,System.Int32,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the PLC sends the 
            value of the variables automatically in a configured frame. You don’t have to poll them explicit. 
            When the cyclical reading is mounted you have to launch GetCyclicRead jobs to receive the values.
            You have to pay attention because the whole query has to fit in one PDU. That applies as well the request as 
            to the response telegram with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR 
            will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="CycleTime">Cycle time in milliseconds</param>
            <param name="Start">Flag whether job should be started immediately</param>
            <param name="Buff">Array with DATA_RW-structures, like ReadMix</param>
            <param name="Handle">Variable for the handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.InitCyclicRead(System.Int32,System.Int32,System.Boolean,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the PLC sends the 
            value of the variables automatically in a configured frame. You don’t have to poll them explicit. 
            When the cyclical reading is mounted you have to launch GetCyclicRead jobs to receive the values.
            You have to pay attention because the whole query has to fit in one PDU. That applies as well the request as 
            to the response telegram with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR 
            will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="CycleTime">Cycle time in milliseconds</param>
            <param name="Start">Flag whether job should be started immediately</param>
            <param name="Buff">Array with DATA_RW-structures, like ReadMix</param>
            <param name="Handle">Variable for the handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.InitCyclicReadEx(System.Int32,System.Int32,System.Int32,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the PLC sends the 
            value of the variables automatically in a configured frame. You don’t have to poll them explicit. When the cyclical reading 
            is mounted you have to launch GetCyclicReadEx jobs to receive the values. Here compared with the function GetCyclicRead, 
            the data are read in the provided buffer. Use the element Buff of the structur DATA_RW40 to specify the target memory.
            You have to pay attention because the whole query has to fit in one PDU. That applies as well the request as to the response telegram 
            with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="CycleTime">Cycle time in milliseconds</param>
            <param name="Start">Flag whether the job should be started immediately</param>
            <param name="Buff">Array with DATA_RW-structures, like ReadMixEx</param>
            <param name="Handle">Variable for the handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.InitCyclicReadEx(System.Int32,System.Int32,System.Boolean,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the PLC sends the 
            value of the variables automatically in a configured frame. You don’t have to poll them explicit. When the cyclical reading 
            is mounted you have to launch GetCyclicReadEx jobs to receive the values. Here compared with the function GetCyclicRead, 
            the data are read in the provided buffer. Use the element Buff of the structur DATA_RW40 to specify the target memory.
            You have to pay attention because the whole query has to fit in one PDU. That applies as well the request as to the response telegram 
            with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="CycleTime">Cycle time in milliseconds</param>
            <param name="Start">Flag whether the job should be started immediately</param>
            <param name="Buff">Array with DATA_RW-structures, like ReadMixEx</param>
            <param name="Handle">Variable for the handle</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.StartCyclicRead(System.Int32,System.Int32,System.Int32)">
            <summary>
            With this function you can start the cyclical reading of variables. You need this function if the Flag boStart 
            was at mounting or the reading was stopped with StopCyclicRead. This function can be used for reading jobs 
            which were mounted with InitCyclicRead or InitCyclicReadEx. A connection to the PLC must be already built up and 
            the cyclical reading job must be mounted.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Handle">Handle out of InitCylicRead or InitCyclixReadEx</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.StopCyclicRead(System.Int32,System.Int32,System.Int32)">
            <summary>
            With this function you can stop or interrupt the reading of variables.  This function can be used for reading jobs 
            mounted with InitCyclicRead or InitCyclicReadEx. A connection to the PLC must be already built up and the cyclical reading job must be mounted.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Handle">Handle out of InitCylicRead or InitCyclixReadEx</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ExitCyclicRead(System.Int32,System.Int32,System.Int32)">
            <summary>
            With this function you close the cyclical reading and release the resources on the PLC. This function can 
            be used for reading jobs mounted with InitCyclicRead or InitCyclicReadEx. 
            A connection to the PLC must be already built up and the cyclical reading job must be mounted.
            </summary>
            <param name="ConnNr">Connection handl</param>
            <param name="Handle">Handle out of InitCylicRead or InitCyclixReadEx</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetCyclicRead(System.Int32,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32,System.Int32)">
            <summary>
            With this function you receive a package with variables from the PLC. The timeout value should be greater than the configured cycle time. 
            Ideally this function is called asynchronously with a notification on incoming data. You can launch 
            multiple reading jobs at the same time. They will be used sequential. The parameters Buff und Num have to match to the 
            parameters used on mounting the reading with InitCyclicRead. The easiest way would be, to send the same variables.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Array with DATA_RW-structures, similar to ReadMix</param>
            <param name="Handle">Handle out of InitCylicRead</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetCyclicReadEx(System.Int32,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32,System.Int32)">
            <summary>
            With this function you receive a package with variables from the PLC. The timeout value should be greater than 
            the configured cycle time. Ideally this function is called asynchronously with a notification on incoming data. 
            You can launch multiple reading jobs at the same time. They will be used sequential. The parameters Buff und Num 
            have to match to the parameters used on mounting the reading with InitCyclicReadEx. The easiest way would be, to send the same variables.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Array with DATA_RW-structures, similar to ReadMixEx</param>
            <param name="Handle">Handle out of InitCyclixReadEx</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.InitScanMsg(System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you enable the symbol-related messages on the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="OpState">Variable for operating state of the PLC</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ExitScanMsg(System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can block the sending of symbol-related messages. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="OpState">Variable for the operating status of the PLC</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetScanMsg(System.Int32,Accon.AGLink.AGL4.S7_SCAN@,System.Int32)">
            <summary>
            With this function you receive a package with messages from the PLC. Ideally this function is 
            called asynchronously with a notification on incoming data. You can launch multiple reading jobs at the same time. They will be used sequential.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Scan">Structure for message-data</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.HasAckTriggeredMsg(System.Int32,System.Int32@,System.Int32)">
            <summary>
            This function allows you to check the setting of the option »Acknowledgment of CRC 33-35«. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Mode">Variable for the settings</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.InitAlarmMsg(System.Int32,System.Int32@,System.Int32)">
            <summary>
            This function enables the sending of block-related messages on the PLC. A connection to the PLC must be already built up. 
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="OpState">Variable for the operating state of the PLC</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ExitAlarmMsg(System.Int32,System.Int32@,System.Int32)">
            <summary>
            This function disables the sending of block-related messages on the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="OpState">Variable for the operating state of the PLC</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetAlarmMsg(System.Int32,Accon.AGLink.AGL4.S7_ALARM@,System.Int32)">
            <summary>
            With this function, you receive a message packet from the PLC. Ideally this function is called 
            asynchronously with a notification on incoming data. You can launch multiple reading jobs at the same time. They will be used sequential.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Alarm">Pointer to alarm structure</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadOpenMsg(System.Int32,Accon.AGLink.AGL4.S7_OPEN_MSG_STATE[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            This feature allows you to read the open message. Ideally you call this function after the respective init function. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="State">Pointer to array for states</param>
            <param name="MsgAnz">Variable number of elements in the array when called and number of messages received after the call</param>
            <param name="MsgType">Message type (Symbol, SFB, SFC)</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetMsgStateChange(System.Int32,Accon.AGLink.AGL4.S7_RCV_MSG_STATE@,System.Int32)">
            <summary>
            With this function you can receive an alarm or acknowledgment message. 
            Thus you will get informed as well if e. g. another display device acknowledges a message. 
            Ideally this function is called asynchronously with a notification on incoming data. You can launch multiple 
            reading jobs at the same time. They will be used sequential.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="State">Pointer to structure for states</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.AckMsg(System.Int32,Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32,System.Int32)">
            <summary>
            With this function you can acknowledge messages. The number of acknowledgments must fit into one PDU. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Msg">Messages to be acknowledged</param>
            <param name="MsgType">Type of message to be acknowledged</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.LockMsg(System.Int32,Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32,System.Int32)">
            <summary>
            With this function you can block the messages. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Msg">Messages to block</param>
            <param name="MsgType">Type of the message to block</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.UnlockMsg(System.Int32,Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32,System.Int32)">
            <summary>
            With this function you can release messages. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Msg">Messages to be released</param>
            <param name="MsgType">Type of message to be released</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.InitARSend(System.Int32,Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can activate the receiving of archive data. The desired IDs must be filled in the array pMsg. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Msg">Structure array with identifiers to be activated</param>
            <param name="Handle">Variable to later identify the structure</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ExitARSend(System.Int32,Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32,System.Int32)">
            <summary>
            With this function you can log of from the archive data. The desired IDs must be filled in the array pMsg. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Msg">Structure array with identifiers to be activated</param>
            <param name="Handle">Identification of the structure from InitARSend</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.GetARSend(System.Int32,System.Byte[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can receive archive data. Ideally this function is called asynchronously with a notification 
            on incoming data. You can launch multiple read jobs at the same time. They will be used sequential.
            Pass the allocated length of the buffer on function call in the structure pwsa. 
            At the end of the function there you will get the length of the received data.
            </summary>
            <param name="ConnNr">Conection handle</param>
            <param name="abBuff">Structure for archive data</param>
            <param name="AR_ID">Variable for archive data</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadInt16(System.Byte@)">
            <summary>
            With this function you to read a signed 16-bit integer value from a byte buffer.
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <returns>The value of the 16-Bit-Integers at the address Buff[0], Buff[1].</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadInt32(System.Byte@)">
            <summary>
            With this function you to read a signed 32-bit integer value from a byte buffer.
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <returns>The value of the 32-bit-integer at the address Buff[0], Buff[1], Buff[2], Buff[3].</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadWord(System.Byte@)">
            <summary>
            With this function you read a word out of a bytebuffer.
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <returns>The value of the word at the address Buff[0], Buff[1].</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadDWord(System.Byte@)">
            <summary>
            With this function you read a doubleword out of a bytebuffer.
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <returns>The value of the doubleword at the address Buff[0], Buff[1], Buff[2], Buff[3].</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadReal(System.Byte@)">
            <summary>
            With this function you read a real number out of a bytebuffer.
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <returns>The value of the real number at the address Buff[0], Buff[1], Buff[2], Buff[3].</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadS5Time(System.Byte@)">
            <summary>
            With this function you read a S5-time in the BCD-format out of a bytebuffer.
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <returns>The value of the S5-time (in milliseconds) at the address Buff[0], Buff[1].</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadS5TimeW(System.UInt16@)">
            <summary>
            With this function you read a S5-time in the BCD-format out of a wordbuffer.
            </summary>
            <param name="Buff">Buffer with the dataword</param>
            <returns>The value of the S5-time (in milliseconds) at the address Buff[0].</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteInt16(System.Byte@,System.Int16)">
            <summary>
            With this function you write a signed 16-bit integer value into a byte buffer.
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <param name="Val">16-Bit-Integer to be written</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteInt32(System.Byte@,System.Int32)">
            <summary>
            With this function you write a signed 32-bit integer value into a byte buffer.
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <param name="Val">32-Bit-Integer to be writ</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteWord(System.Byte@,System.UInt16)">
            <summary>
            With this function you write a word into a bytebuffer.
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <param name="Val">Word to be written</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteDWord(System.Byte@,System.UInt32)">
            <summary>
            With this function you write a doubleword into a bytebuffer.
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <param name="Val">Doubleword to be written</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteReal(System.Byte@,System.Single)">
            <summary>
            With this function you write a real number into a bytebuffer.
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <param name="Val">Real value to be written</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteS5Time(System.Byte@,System.Int32)">
            <summary>
            With this function you write a time in milliseconds as S5Time into a byte buffer. 
            The time is displayed with the highest possible accuracy and must lie in the range from 10 ms to 9990000 ms.
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <param name="Val">Timevalue to be written (milliseconds)</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteS5TimeW(System.UInt16@,System.Int32)">
            <summary>
            With this function you write a time as S5 time into a wordbuffer (milliseconds). 
            The time is displayed with the highest accuracy and must be between 10ms and 9990000 ms. 
            </summary>
            <param name="Buff">Buffer with the databytes</param>
            <param name="Val">Time value to be written (milliseconds)</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Byte2Word(System.UInt16[],System.Byte[])">
            <summary>
            With this function you can convert a bytebuffer into a wordbuffer.
            </summary>
            <param name="OutBuff">Pointer to buffer for the resulting words</param>
            <param name="InBuff">Pointer to Bytebuffer</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Byte2DWord(System.UInt32[],System.Byte[])">
            <summary>
            With this function you can convert a bytebuffer into a doublewordbuffer.
            </summary>
            <param name="OutBuff">Pointer to doubleword buffer</param>
            <param name="InBuff">Pointer to byte buffer</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Byte2Real(System.Single[],System.Byte[])">
            <summary>
            With this function you can convert a bytebuffer into a real-number-buffer.
            </summary>
            <param name="OutBuff">Pointer to real-number-buffer</param>
            <param name="InBuff">Pointer to bytebuffer</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Word2Byte(System.Byte[],System.UInt16[])">
            <summary>
            With this function you can convert a wordbuffer into a bytebuffer.
            </summary>
            <param name="OutBuff">Pointer to bytebuffer</param>
            <param name="InBuff">Pointer to wordbuffer</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.DWord2Byte(System.Byte[],System.UInt32[])">
            <summary>
            With this function you can convert a doublewordbuffer into a bytebuffer.
            </summary>
            <param name="OutBuff">Pointer to bytebuffer</param>
            <param name="InBuff">Pointer to doublewordbuffer</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Real2Byte(System.Byte[],System.Single[])">
            <summary>
            With this function you can convert a real-number-buffer into a bytebuffer.
            </summary>
            <param name="OutBuff">Pointer to bytebuffer</param>
            <param name="InBuff">Pointer to  real-number-buffer</param> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetBit(System.Byte,System.Int32)">
            <summary>
            This function gets the state of the desired bit in a byte.
            </summary>
            <param name="Wert">Byte to check</param>
            <param name="BitNr">Number of the bit 0 to 7</param>
            <returns>The state of the bit.</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.SetBit(System.Byte@,System.Int32)">
            <summary>
            This function sets the desired bit to one.
            </summary>
            <param name="Buff">Pointer to byte in which the bit should be set</param>
            <param name="BitNr">Number of the bit between 0 and 7</param>
            <returns>The value of the byte</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ResetBit(System.Byte@,System.Int32)">
            <summary>
            This function sets the desired bit to null.
            </summary>
            <param name="Buff">Pointer to the byte in which the bit should be resetted</param>
            <param name="BitNr">Number of the bit between 0 and 7</param>
            <returns>The value of the byte</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.SetBitVal(System.Byte@,System.Int32,System.Int32)">
            <summary>
            This function sets the bit to the desired value.
            </summary>
            <param name="Buff">Pointer to byte in which the bit should be changed</param>
            <param name="BitNr">Number of the bit between 0 and 7</param>
            <param name="Val">Value of the bit</param>
            <returns>The value of the byte</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Buff2String(System.Byte[],System.String@)">
            <summary>
            This feature allows you to convert a byte buffer into a string. This feature has been implemented specifically for easier access in VB or VBA.
            </summary>
            <param name="InBuff">Pointer to bytebuffer</param>
            <param name="Text">Pointer to string</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.String2Buff(System.Byte[],System.String)">
            <summary>
            This feature allows you to convert a string into a byte buffer. This feature has been implemented specifically for easier access in VB or VBA.
            </summary>
            <param name="OutBuff">Pointer to bytebuffer</param>
            <param name="Text">Pointer to string</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.S7String2String(System.Byte[],System.String@,System.Int32)">
            <summary>
            This feature allows you to convert a string in the S7 format string into a string. 
            This feature has been implemented specifically for easier access in VB or VBA.
            </summary>
            <param name="S7String">Pointer to byte buffer in the S7-String-format </param>
            <param name="Text">Pointer to string</param>
            <param name="MaxChars">Maximum number of characters to copy</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.String2S7String(System.Byte[]@,System.String)">
            <summary>
            This feature allows you to convert a string to a string with S7 format. It is imperative that the 
            S7-string already contains the maximum length in the first byte. 
            The function will fill the used length in the second byte and copy the data arranged behind.
            </summary>
            <param name="S7String">Pointer to byte buffer in the S7-String-format</param>
            <param name="Text">Pointer to string</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.BCD2Int16(System.Int16,System.Int16@)">
            <summary>
            With this function you can convert a BCD number into a signed 16-bit integer.
            </summary>
            <param name="singlevalue">BCD number to convert</param>
            <param name="dual">Pointer to 16-bit integer</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Int162BCD(System.Int16,System.Int16@)">
            <summary>
            With this function you can convert a signed 16-bit integer into a BCD number.
            </summary>
            <param name="Dual">16-bit integer to convert</param>
            <param name="BCD">Pointer to BCD number</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.BCD2Int32(System.Int32,System.Int32@)">
            <summary>
            With this function you can convert a BCD number into a signed 32-bit integer.
            </summary>
            <param name="singlevalue">BCD number to convert</param>
            <param name="dual">Pointer to 32-bit integer</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Int322BCD(System.Int32,System.Int32@)">
            <summary>
            With this function you can convert a signed 32-bit integer into a BCD number.
            </summary>
            <param name="Dual">32-bit integer to convert</param>
            <param name="BCD">Pointer to BCD number</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.LongAsFloat(System.Int32)">
            <summary>
            This function performs only a typecast and returns the long number as float. This is especially useful for type-safe 
            programming languages. Thus you can directly process a long e.g. out of a DATA_RW40 structure as a real number.
            </summary>
            <param name="Var">Number to convert</param>
            <returns>The number as real value</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.FloatAsLong(System.Single)">
            <summary>
            This function performs only a typecast and returns the float number as a long. This is especially useful for type-safe 
            programming languages. Thus you directly write a real number into a DATA_RW40 structure.
            </summary>
            <param name="Var">Float number to convert</param>
            <returns>The number as a long value</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Text2DataRW(System.String,Accon.AGLink.AGL4.DATA_RW40@)">
            <summary>
            This function parses the text and fills the elements of a DATA_RW40 structure. You can use 
            this structures for a consecutively call of a ReadMix- or WriteMix-function.
            </summary>
            <param name="Text">Pointer to the text to analyze</param>
            <param name="RW">Pointer to the DATA_RW40-Struktur to fill</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.DataRW2Text(Accon.AGLink.AGL4.DATA_RW40,System.String@)">
            <summary>
            This function analyzes the structural elements of a DATA_RW40 structure and produces a 
            readable text with the operands. The text buffer must provide place for at least 32 characters.
            </summary>
            <param name="RW">Pointer to the DATA_RW40-structure to be analyzed</param>
            <param name="Text">Pointer to the text</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.S7DT2SysTime(System.Byte@,System.DateTime@)">
            <summary>
            With this function you convert a byte buffer containing a S7 DATE_AND_TIME structure into a system time structure.  
            You can use the result directly, without taking care on BCD conversions.
            </summary>
            <param name="Buff">Pointer to Byte buffer in the S7-DATE_AND_TIME-format t</param>
            <param name="SysTime">Pointer to DateTime</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.SysTime2S7DT(System.DateTime,System.Byte@)">
            <summary>
            With this function, you convert a SysTime into a S7-DATE_AND_TIME structure.
            </summary>
            <param name="SysTime">Pointer to DateTime</param>
            <param name="Buff">Pointer to byte buffer in the S7-DATE_AND_TIME-format </param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.TOD2SysTime(Accon.AGLink.AGL4.TOD,System.DateTime@)">
            <summary>
            With this function you convert a TOD structure to a SYSTEMTIME structure. Thus you can further process a time read with GetPLCClock.
            </summary>
            <param name="tod">Pointer to a  S7-CPU time</param>
            <param name="SysTime">Pointer to a DateTime</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.SysTime2TOD(System.DateTime,Accon.AGLink.AGL4.TOD@)">
            <summary>
            With this function you convert a SYSTEMTIME structure to a TOD structure. 
            Thus you can prepare a system time for the use in a call of SetPLCClock.
            </summary>
            <param name="SysTime">Pointer to DateTime</param>
            <param name="tod">Pointer to S7-CPU time</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.S7Date2YMD(System.UInt16,System.UInt16@,System.UInt16@,System.UInt16@)">
            <summary>
            Extracts the year, month and day out of a S7-Date value.
            </summary>
            <param name="date">S7-Date value to convert</param>
            <param name="year">Variable for the year</param>
            <param name="month">Variable for the month</param>
            <param name="day">Variable for the day</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Float2KG(System.UInt16[],System.Single[])">
            <summary>
            With this function you convert a float buffer into a buffer in the KG-format. The output buffer is a word buffer. 
            Thus it is to be used compatibly with the function WriteDataWords.
            </summary>
            <param name="OutBuff">Pointer to word-buffer for numbers in the KF-format</param>
            <param name="InBuff">Pointer to float buffer</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.KG2Float(System.Single[],System.UInt16[])">
            <summary>
            This feature allows you to convert a buffer in the KG-format into a float buffer. 
            The input buffer is a word buffer. Thus it is to be used compatibly with the function ReadDataWords.
            </summary>
            <param name="OutBuff">Pointer to float buffer</param>
            <param name="InBuff">Pointer to word buffer for numbers in the KG-format</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Float2DWKG(System.UInt32[],System.Single[],System.Int32)">
            <summary>
            With this function you can convert a floatbuffer into a buffer in the KF-format. The output buffer must be a double-word buffer.
            </summary>
            <param name="KG">Pointer to double-word buffer for numbers in the KG-format</param>
            <param name="Float">Pointer to float buffer</param>
            <param name="AnzFloats">Number of floats to convert</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.DWKG2Float(System.Single[],System.UInt32[],System.Int32)">
            <summary>
            With this function you convert a buffer in the KG-format into a float buffer. The input buffer must be a double-word buffer.
            </summary>
            <param name="Float">Pointer to float buffer</param>
            <param name="KG">Pointer to double-word buffer for numbers in the KF-format</param>
            <param name="AnzFloats">Number of floats to convert</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadInBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read the input bytes from the process image of the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start byte to read from</param>
            <param name="Num">Number of the bytes to read</param>
            <param name="Buff">Buffer for the read bytes</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadPInBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read peripheral input bytes from a PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start byte to read from</param>
            <param name="Num">Number of bytes to read</param>
            <param name="Buff">Buffer for the read bytes</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadOutBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read the output bytes of the process image from a PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start byte to read from</param>
            <param name="Num">Number of bytes to read</param>
            <param name="Buff">Buffer for the read bytes</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadFlagBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read the marker bytes from a PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start byte to read from</param>
            <param name="Num">Number of bytes to read</param>
            <param name="Buff">Buffer for the read bytes</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadSFlagBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read special memory bytes (special marker) of a S7-200 PLC. At this PLC 
            type you can alternativly access to markers starting from address 256. These are mapped internally to the 
            special memory. This way, you can keep your programs hardware independent. A connection to the PLC must be already built up.
            Attention: 
            This function isn’t available for all PLC and may return the value AGL40_FUNC_NOT_SUPPORTED.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start byte to read from</param>
            <param name="Num">Number of bytes to read</param>
            <param name="Buff">Buffer for the read bytes</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadVarBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read variable memory bytes of a S7-200 PLC. At this PLC type you can alternativly 
            access to data block DB1. This block is mapped internally to the variable memory. This way, you can keep your 
            programs hardware independent. A connection to the PLC must be already built up.
            Attention: 
            This function isn’t available for all PLC and may return the value AGL40_FUNC_NOT_SUPPORTED.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start byte to read from</param>
            <param name="Num">Number of bytes to read</param>
            <param name="Buff">Buffer for the read bytes</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadDataBytes(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read databytes from the PLC. A connection to the PLC must be 
            already built up. In the context of a S5, you can access the DX-Blocks by using a DB number greater than 255.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="DBNr">Number of the data block to be read from</param>
            <param name="Start">Start byte to read from</param>
            <param name="Num">DNumber of bytes to read</param>
            <param name="Buff">Buffer for the read bytes</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadDataWords(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            With this function you can read datawords in S5-addressing from the PLC. A connection to the 
            PLC must be already built up. The access to dataword 10 means, that you want to read DW 10 in a S5. In a S7 
            it means that DBB 20 and DBB21 will be read. In a S5 you can access the DX-blocks by using a DB-Number greater than 255.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="DBNr">The number of the DB to read from</param>
            <param name="Start">Start word to read from</param>
            <param name="Num">Number of words to read</param>
            <param name="Buff">Buffer for the read words</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadTimerWords(System.Int32,System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            With this function you read the timer words from the PLC. The timer values will be given back as 
            BCD (binary coded decimal) values. The top nibble contains a multiplication factor. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start timer to read from</param>
            <param name="Num">Number of timers to read</param>
            <param name="Buff">Buffer for the read timers</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadCounterWords(System.Int32,System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            With this functionyou can read counter words from the PLC. The values will be given back as 
            BCD-values between 9 and 999. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start counter to read from</param>
            <param name="Num">Number of counters to read</param>
            <param name="Buff">Buffer for the read counters</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadMix(System.Int32,Accon.AGLink.AGL4.DATA_RW40[],System.Int32,System.Int32)">
            <summary>
            With this function you can read mixed datatypes and datasizes in one job. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">handle</param>
            <param name="Buff">Pointer to the reading structurs</param>
            <param name="Num">Count of the structures</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadMixEx(System.Int32,Accon.AGLink.AGL4.DATA_RW40[],System.Int32,System.Int32)">
            <summary>
            With this function you can read mixed datatypes and datasizes in one job. A connection to the PLC must be already built up. 
            Here compared with the function AGL_ReadMix, the data are read in the provided buffer. Use the element Buff of the structur 
            DATA_RW40 to specify the target memory.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to the reading structure</param>
            <param name="Num">Count of the structures</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteInBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            This function writes input bytes into the process image of the PLC. A connection to the PLC must be already built up. 
            Depending on the PLC the bytes will be overwriten immediately at the system point by the values of the physical entries.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start byte to write to</param>
            <param name="Num">Number of bytes to write</param>
            <param name="Buff">Buffer for the bytes to write</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteOutBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can write output bytes into the process image of the PLC. A connection to the PLC must be already built.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start byte to write to</param>
            <param name="Num">Number of bytes to write</param>
            <param name="Buff">Buffer containing the bytes to write</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WritePOutBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can write peripheral output bytes to the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start bytes to write to</param>
            <param name="Num">Number of bytes to write</param>
            <param name="Buff">Buffer containing the bytes to write </param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteFlagBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can write marker bytes to the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Connection handle</param>
            <param name="Num">Number of bytes to write</param>
            <param name="Buff">Buffer containing the bytes to write</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteSFlagBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can write special memory bytes (special marker) to a S7-200 PLC. At this PLC type you can
            alternativly access to markers starting from address 256. These are mapped internally to the special memory. 
            This way, you can keep your programs hardware independent. A connection to the PLC must be already built up.
            Attention: 
            This function isn’t available for all PLC and may return the value AGL40_FUNC_NOT_SUPPORTED.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start byte to write to</param>
            <param name="Num">Number of bytes to write</param>
            <param name="Buff">Buffer containing the bytes to write</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteVarBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can write variable memory bytes to a S7-200 PLC. At this PLC type you can alternativly access to data block DB1. This block is mapped internally to the variable memory. This way, you can keep your programs hardware independent. A connection to the PLC must be already built up.
            Attention: 
            This function isn’t available for all PLC and may return the value AGL40_FUNC_NOT_SUPPORTED.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start byte to write</param>
            <param name="Num">Number of bytes to write</param>
            <param name="Buff">Buffer containing the bytes to write</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteDataBytes(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can write data bytes to the PLC. A connection to the PLC must be already built up. 
            In the context of a S5, you can access the DX-Blocks by using a DB number greater than 255.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="DBNr">The number of the DB to write into</param>
            <param name="Start">Start byte to write to</param>
            <param name="Num">Number of bytes to write</param>
            <param name="Buff">Buffer containing the bytes to write</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteDataWords(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            With this function you can write data words to the PLC using S5-addressing. A connection to the PLC must be 
            already built up. The access to the data word 10 means for a S5 that DW 10 will be written. For a S7 this 
            access means to write DBB 20 and DBB 21. In a S5 you can access the DX-blocks by using a DB-Number greater than 255.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="DBNr">The number of the DB to write into</param>
            <param name="Start">Start word to write to</param>
            <param name="Num">Number of words to write</param>
            <param name="Buff">Buffer containing the words to write</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteTimerWords(System.Int32,System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            With this function you can write timer words to the PLC. The values to be written must be 
            in the BCD-format with the factor in the top nibble. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start timer to write to</param>
            <param name="Num">Number of timers to write</param>
            <param name="Buff">Buffer containing the timer values to write</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteCounterWords(System.Int32,System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            With this function you can write counter words to the PLC. The value to be written must be 
            in the BCD-format and between 0 and 999. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Start">Start counter to write to</param>
            <param name="Num">Number of counters to write</param>
            <param name="Buff">Buffer containing the values to write</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteMix(System.Int32,Accon.AGLink.AGL4.DATA_RW40[],System.Int32,System.Int32)">
            <summary>
            With this function you can write mixed data types and data sizes with one job. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to the writing structures</param>
            <param name="Num">Number of used structure elements</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteMixEx(System.Int32,Accon.AGLink.AGL4.DATA_RW40[],System.Int32,System.Int32)">
            <summary>
            With this function you can write mixed datatypes and datasizes in one job to the PLC. A connection to the 
            PLC must be already built up. Here compared with the function AGL_WriteMix, the data are read from the provided buffer. 
            Use the element Buff of the structure DATA_RW40 to specify the data source.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to the writing structures</param>
            <param name="Num">Number of used structure elements</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.InitOptReadMix(System.Int32,Accon.AGLink.AGL4.DATA_RW40[],System.IntPtr@)">
            <summary>
            With this function a ReadMix-request will be optimized. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to DATA_RW40-structures</param>
            <param name="Opt">Pointer to get the optimization handle </param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadOptReadMix(System.Int32,System.IntPtr,Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            With this function you can execute an optimized ReadMix request. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Opt">Optimization handle</param>
            <param name="Buff">Pointer to DATA_RW40-structures</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.EndOptReadMix(System.IntPtr)">
            <summary>
            With this function the ressources of an optimized ReadMix request will be released.
            </summary>
            <param name="Opt">Optimization handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.InitOptReadMixEx(System.Int32,Accon.AGLink.AGL4.DATA_RW40[],System.IntPtr@)">
            <summary>
            With this function a ReadMixEx request will be optimized. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to DATA_RW40-structures</param>
            <param name="Opt">Pointer to get the optimization handle </param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.ReadOptReadMixEx(System.Int32,System.IntPtr,Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            With this function you can execute an optimized ReadMixEx request. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Opt">Optimization handle</param>
            <param name="Buff">Pointer to DATA_RW40-structures</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.EndOptReadMixEx(System.IntPtr)">
            <summary>
            This function releases the ressources of an optimized ReadMixEx request.
            </summary>
            <param name="Opt">Optimization handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.InitOptWriteMix(System.Int32,Accon.AGLink.AGL4.DATA_RW40[],System.IntPtr@)">
            <summary>
            This function optimizes a WriteMix request. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to DATA_RW40-structures</param>
            <param name="Opt">Pointer to get the optimization handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteOptWriteMix(System.Int32,System.IntPtr,Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            With this function you can execute an optimized WriteMix request. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Opt">Optimization handle</param>
            <param name="Buff">Pointer to DATA_RW40-structures</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.EndOptWriteMix(System.IntPtr)">
            <summary>
            This function releases the ressources of an optimized WriteMix request.
            </summary>
            <param name="Opt">Optimization handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.InitOptWriteMixEx(System.Int32,Accon.AGLink.AGL4.DATA_RW40[],System.IntPtr@)">
            <summary>
            With this function a WriteMixEx request will be optimized. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Buff">Pointer to DATA_RW40-structures</param>
            <param name="Opt">Pointer to the variable for optimization handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.WriteOptWriteMixEx(System.Int32,System.IntPtr,Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            With this function you can execute an optimized WriteMixEx request. A connection to the PLC must be already built up.
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Opt">Optimization handle</param>
            <param name="Buff">Pointer to DATA_RW40-structures</param>
            <param name="Timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.EndOptWriteMixEx(System.IntPtr)">
            <summary>
            This function releases the ressources used by an optimized WriteMixEx request.
            </summary>
            <param name="Opt">Optimization handle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.DeleteOptJob(System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Opt">Optimization handle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.GetOptJobResult(System.Int32,System.IntPtr,Accon.AGLink.AGL4.RESULT40@)">
            <summary>
            
            </summary>
            <param name="ConnNr">Connection handle</param>
            <param name="Opt">Optimization handle</param>
            <param name="pResult"></param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_ReadMixEx(System.Int32,Accon.AGLink.AGL4.SymbolicRW[],System.Int32@,System.Int32)">
            <summary>
            Read data from the plc
            </summary>
            <param name="connNr">Connection number that you got from the call to PLCConnect or PLCConnectEx</param>
            <param name="symbolicRW">Pointer to 1-n SymboliCRW structures with a AccessHandle and read buffer information</param>
            <param name="sError">If an error occurrs than this variable will contain the internal error code from Siemens</param>
            <param name="timeout">Maximum time to wait for a response</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_ReadMixEx(System.Int32,Accon.AGLink.AGL4.SymbolicRW[],System.Int32)">
            <summary>
            Read data from the plc
            </summary>
            <param name="connNr">Connection number that you got from the call to PLCConnect or PLCConnectEx</param>
            <param name="symbolicRW">Pointer to 1-n SymboliCRW structures with a AccessHandle and read buffer information</param>
            <param name="timeout">Maximum time to wait for a response</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_WriteMixEx(System.Int32,Accon.AGLink.AGL4.SymbolicRW[],System.Int32@,System.Int32)">
            <summary>
            Write data to the plc
            </summary>
            <param name="connNr">Connection number that you got from the call to PLCConnect or PLCConnectEx</param>
            <param name="symbolicRW">Pointer to 1-n SymboliCRW structures with a AccessHandle and write buffer information</param>
            <param name="sError">If an error occurrs than this variable will contain the internal error code from Siemens</param>
            <param name="timeout">Maximum time to wait for a response</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_WriteMixEx(System.Int32,Accon.AGLink.AGL4.SymbolicRW[],System.Int32)">
            <summary>
            Write data to the plc
            </summary>
            <param name="connNr">Connection number that you got from the call to PLCConnect or PLCConnectEx</param>
            <param name="symbolicRW">Pointer to 1-n SymboliCRW structures with a AccessHandle and write buffer information</param>
            <param name="timeout">Maximum time to wait for a response</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_LoadTIAProjectSymbols(System.String,System.IntPtr@)">
            <summary>
            Open a TIA project. This is the starting point for every following function call.
            </summary>
            <param name="projectFile">Path to your project file (ap11, ap12, ap13, ap14, ap15, ap15_1)</param>
            <param name="rootSchemaNodeHandle">Handle to the root node of the symbol tree - this is the starting point for all following node functions</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_LoadTIAProjectSymbols(System.String,System.IntPtr@,System.Boolean)">
            <summary>
            Open a TIA project. This is the starting point for every following function call.
            </summary>
            <param name="projectFile">Path to your project file (ap11, ap12, ap13, ap14, ap15, ap15_1)</param>
            <param name="rootSchemaNodeHandle">Handle to the root node of the symbol tree - this is the starting point for all following node functions</param>
            <param name="autoExpand">If this parameter is set to 1 than every child node of arrays will automatically be expanded at the first access. 
            Otherwise you have to call Symbolic_Expand before you acces the node. Large arrays with thousand or millions of items can cause a fast and huge increase in memory usage and slow response time.</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_LoadTIAProjectSymbolsWithFilter(System.String,System.IntPtr@,System.String,Accon.AGLink.AGL4.TiaFilterFlags,System.Int32@,System.Int32@)">
            <summary>
            Open a TIA project with filter. This is the starting point for every following function call.
            </summary>
            <param name="projectFile">Path to your project file (ap11, ap12, ap13, ap14, ap15, ap15_1)</param>
            <param name="rootSchemaNodeHandle">Handle to the root node of the symbol tree - this is the starting point for all following node functions</param>
            <param name="symbolFilter">Parameter is not used in this version yet</param>
            <param name="flags">Additional filter flags. Combinations are possible</param>
            <param name="errorLine">Parameter is not used in this version yet</param>
            <param name="errorPos">Parameter is not used in this version yet</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_FreeHandle(System.IntPtr)">
            <summary>
            Free memory of the given node handle.
            If it's the root node than the whole project will be closed.
            Please note that AccessHandles have to be freed separately.
            </summary>
            <param name="handle">Can be a NodeHandle or AccessHandle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SaveAGLinkSymbolsToFile(System.IntPtr,System.String)">
            <summary>
            Saves the symbol information into a AGLink symbol file format
            </summary>
            <param name="rootNodeHandle">Handle to the root node of the project</param>
            <param name="aglinkSymbolsFile">File to save the symbol information to</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SaveAGLinkSymbolsToFileWithFilter(System.IntPtr,System.String,System.String,Accon.AGLink.AGL4.AglFilterFlags,System.Int32@,System.Int32@)">
            <summary>
            Saves the symbol information into a AGLink symbol file format with filter
            </summary>
            <param name="rootNodeHandle">Handle to the root node of the project</param>
            <param name="aglinkSymbolsFile">File to save the symbol information to</param>
            <param name="symbolFilter">Filter for PLCs/DBs/UDTs/Tags/Symbol. Specification as symbol path, separated with newline '\n'. See documentation</param>
            <param name="flags">Additional filter flags. Combinations are possible</param>
            <param name="errorLine">If the filter string is faulty, this is the line of the error. errorLine starts with 0</param>
            <param name="errorPos">If the filter string is faulty, the position of the error is shown here. errorPos starts with 0</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_LoadAGLinkSymbolsFromFile(System.String,System.IntPtr@)">
            <summary>
            Load the symbol information out of the aglink symbol file format.
            </summary>
            <param name="aglinkSymbolsFile">File to load the symbol information from</param>
            <param name="rootNodeHandle">Handle to the root node of the project</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_LoadAGLinkSymbolsFromPLC(System.Int32,System.IntPtr@)">
            <summary>
            Load the symbol information out of the plc.
            Hint: Use for the PLC node the generic name 'PLC'. Example: PLC.Blocks.DB_Name.VariablenName
            </summary>
            <param name="connection">active connection to a S7-1200(FW 2.2-4.x) or S7-1500 plc</param>
            <param name="rootNodeHandle">Handle to the root node of the project</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetChildCount(System.IntPtr,System.Int32@)">
            <summary>
            Determines the count of direct childs of the given node.
            </summary>
            <param name="nodeHandle">Tree node whose child count will be obtained</param>
            <param name="childCount">Count of child nodes</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetChild(System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
            Gets the x.th direct child node.
            </summary>
            <param name="nodeHandle">Tree node to get the desired child node from</param>
            <param name="childIndex">Number (0...Symbolic_GetChildCount-1) of the desired child node</param>
            <param name="childNodeHandle">Handle of the found child node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetChildByName(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
            Gets the child node using its name
            </summary>
            <param name="nodeHandle">Tree node to get the desired child node from</param>
            <param name="childName">Name of the child node</param>
            <param name="childNodeHandle">Handle of the found child node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetName(System.IntPtr,System.String@)">
            <summary>
            Gets the name of the given node
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="nameBuffer">Buffer for the name</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetLocalOffset(System.IntPtr,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the local offset of the node
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="localByteOffset">Local byte offset</param>
            <param name="localBitOffset">Local bit offset</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetSystemType(System.IntPtr,Accon.AGLink.AGL4.SystemType@)">
            <summary>
            Obtains the plc system datatype
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="systemType">System data type i.e. S7-Time, S7-Bool or DTL</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetHierarchyType(System.IntPtr,Accon.AGLink.AGL4.HierarchyType@)">
            <summary>
            Determines whether it's a structure, array or a single item
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="hierarchyType">The hierarchy type of the node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetArrayDimensionCount(System.IntPtr,System.Int32@)">
            <summary>
            Determines the count of dimensions of an array. I.e. Array[1..2] of int => 1. Array[1..2, 1..2] of int => 2.
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="dimensionCount">Count of dimensions</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetArrayDimension(System.IntPtr,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Determines the lower and upper index value of an array. Array[1..20] of int => {1, 20}. Array[-1..20, 1..10] of int => for dimension 0 = {-1, 20}, or for dimension 1 = {1, 10}
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="dimension">Dimension index</param>
            <param name="lower">Lower index value</param>
            <param name="upper">Upper index value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetMaxStringSize(System.IntPtr,System.Int32@)">
            <summary>
            Determines the maximum allowed amount of characters for a S7-String, S7-WString, etc.
            </summary>
            <param name="stringNodeHandle">Tree node</param>
            <param name="stringSize">Maximum string size, count of characters</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetValueType(System.IntPtr,Accon.AGLink.AGL4.ValueType@)">
            <summary>
            Determines the datatype that is needed to map the system type to a value on a pc. I.e. z.b S7-Bool => UInt8, S7-Int => Int16 und ULInt => UInt64.
            Types that cannot be mapped directly will be "SystemSpecific" i.e. S7-DTL. For those types there are special convertes.
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="valueType">Value type</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetTypeState(System.IntPtr,Accon.AGLink.AGL4.TypeState@)">
            <summary>
            Gets the state of a symbol. Means valid, invalid or not supported.
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="typeState">State of the symbol</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetSegmentType(System.IntPtr,Accon.AGLink.AGL4.SegmentType@)">
            <summary>
            Differentiates the type of a node. Is it a normal field node, an index or the root node.
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="segementType">Node type</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetPermissionType(System.IntPtr,Accon.AGLink.AGL4.PermissionType@)">
            <summary>
            Get information about read or write permissionss for a node.
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="permissionType">Access permission for this node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_EscapeString(System.String,System.String@,System.Int32@)">
            <summary>
            Masks special character in node names, like . ( ) [ ]
            This function expects only a single node namen, not the full path. Otherwise it would mask the cutting point.
            </summary>
            <param name="rawString">Text to escape characters</param>
            <param name="escapedString">Escaped text</param>
            <param name="errorPosition">Error position if an error occurs</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_EscapeString(System.String,System.String@,System.Int32,System.Int32@)">
            <summary>
            Masks special character in node names, like . ( ) [ ]
            This function expects only a single node namen, not the full path. Otherwise it would mask the cutting point.
            </summary>
            <param name="rawString">Text to escape characters</param>
            <param name="escapedString">Escaped text</param>
            <param name="escapedStringMaxSize">Maximum size of the buffer for the escaped text</param>
            <param name="errorPosition">Error position if an error occurs</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetNodeByPath(System.IntPtr,System.String,System.IntPtr@,System.Int32@)">
            <summary>
            Gets a node using its full name. If the root node is used as start node than the name may look like "PLC_1.Datablocks.Datenblock_1.ElementX". As a alternative you can use any node as start node. 
            Then this function will need only rest of the name from this node on. I.e. if the nodeHandle would be "PLC_1.Datablocks" than the item path would look like "Datenblock_1.ElementX".
            </summary>
            <param name="nodeHandle">Start node</param>
            <param name="itemPath">Path to the desired node based on the start node</param>
            <param name="foundNodeHandle">Handle of the found node</param>
            <param name="errorPosition">Error position if an error occurs</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetIndexSize(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the count of dimensions for a system specific index access. (Same result as calling Symbolic_GetArrayDimensionCount). Index = [1,4,2] => 3, [1,6] => 2
            </summary>
            <param name="indexNodeHandle">Index node</param>
            <param name="indexSize">Dimension count</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetIndex(System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            Gets the system specific value of a index component. I.e. for[1,2,4] the sinle value 1, 2 or 4.
            </summary>
            <param name="indexNodeHandle">Index node</param>
            <param name="element">0-based number of the index value</param>
            <param name="value">Value of the index item</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetLinearIndex(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the linear index value
            </summary>
            <param name="indexNodeHandle">Index node</param>
            <param name="value">Linear index</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetArrayElementCount(System.IntPtr,System.Int32@)">
            <summary>
            Gets the count of array elements.
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="elementCount">Element count</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_Expand(System.IntPtr,System.Int32)">
            <summary>
            Expands a node and loads its child nodes. Necessary before accessing an array, if you didn't call Symbolic_LoadTIAProjectSymbols with AutoExpand = 1
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="depth">Depth to expand. 0 = only direct child nodes, -1 = expand every child node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_Collapse(System.IntPtr)">
            <summary>
            Collapses a node and frees its memory.
            </summary>
            <param name="nodeHandle">Tree node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetSystemScope(System.IntPtr,Accon.AGLink.AGL4.SystemType@)">
            <summary>
            Gets the area where the node is located. I.e. S7_Datablock, S7_Tag_Table or S7_UDT.
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="systemType">Node location</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetSystemTypeState(System.IntPtr,Accon.AGLink.AGL4.SystemTypeState@)">
            <summary>
            Gets the system state of the symbol. Means VALID, INVALID or S7_DATABLOCK_NOT_COMPILED
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="systemTypeState">State of the symbol</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_CreateAccess(System.IntPtr,System.IntPtr@)">
            <summary>
            Creates an AccessHandle that can be used to read or write data
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="accessHandle">The AccessHandle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_CreateAccessByPath(System.IntPtr,System.String,System.IntPtr@,System.Int32@)">
            <summary>
            Creates an AccessHandle using the full name of a node. If the root node is used as start node than the name may look like "PLC_1.Datablocks.Datenblock_1.ElementX". As a alternative you can use any node as start node. 
            Then this function will need only rest of the name from this node on. I.e. if the nodeHandle would be "PLC_1.Datablocks" than the item path would look like "Datenblock_1.ElementX".
            </summary>
            <param name="parentNodeHandle">Start node</param>
            <param name="itemPath">Path to the desired node based on the start node</param>
            <param name="accessHandle">The AccessHandle</param>
            <param name="errorPosition">Error position if an error occurs</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_Get_DATA_RW40(System.IntPtr,Accon.AGLink.AGL4.DATA_RW40@,System.Int32@)">
            <summary>
            Fills a DataRW-Structure to access non optimized datablocks or tags via PUT/GET.
            </summary>
            <param name="nodeHandle">Start node</param>
            <param name="dataRW">Pointer to an empty DATA_RW-Structure</param>
            <param name="size">Pointer to a variable for the necessary buffer size</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_Get_DATA_RW40_ByPath(System.IntPtr,System.String,Accon.AGLink.AGL4.DATA_RW40@,System.Int32@,System.Int32@)">
            <summary>
            Creates a DataRW-Structure using the elements path. If the nodeHandle is the root item then for example PLC_1.Datablocks.Datenblock_1.ElementX.
            You can also assign any node to create the structure. For example if you use a nodeHandle "PLC_1.Datablocks" then your itemPath would be "Datablock_1.ElementX". 
            Functionality similar to Symbolic_Get_DATA_RW40.
            </summary>
            <param name="nodeHandle">Start node</param>
            <param name="itemPath">Path to the desired node based on the start node</param>
            <param name="dataRW">Pointer to an empty DATA_RW-Structure</param>
            <param name="errorPosition">Error position if an error occurs</param>
            <param name="size">Pointer to a variable for the necessary buffer size</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetType(System.IntPtr,System.IntPtr@)">
            <summary>
            Determines the node to the base type for complex nodes like Array or UDT.
            I.e. for an array of struct the struct node. For an UDT-Instance the UDT node. For a S7-Memory Tag of bool the bool.
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="typeNodeHandle">Handle for the base type node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferSize(System.IntPtr,System.Int32@)">
            <summary>
            Determines how much memory in byte this access will need to read or write values. For an Array[1..2] of S7-DWORD for example 8 bytes = 2 x sizoef(S7-DWORD).
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="bufferSize">Needed memory in bytes</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferElementSize(System.IntPtr,System.Int32@)">
            <summary>
            Determines the byte size of an item in the access buffer. For an item in an Array[1..2] of S7-DWORD for example 4 Bytes.
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="elementSize">Size of one item in the access buffer in bytes</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessStringSize(System.IntPtr,System.Int32@)">
            <summary>
            Gets the count of characters for a string
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="stringSize">Character count</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferElementCount(System.IntPtr,System.Int32@)">
            <summary>
            Determines how many items this AccessHandle will contain. For an Array or ranged access it may be higher than 1.
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="elementCount">Item count in the for this access</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessElementSystemType(System.IntPtr,Accon.AGLink.AGL4.SystemType@)">
            <summary>
            Gets the system type of this item
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="systemType">The system type</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessElementValueType(System.IntPtr,Accon.AGLink.AGL4.ValueType@)">
            <summary>
            Determines the value type of this item
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="valueType">The value type</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetArrayIndexAsLinearIndex(System.IntPtr,System.Int32[],System.Int32,System.Int32@)">
            <summary>
            Converts between the system specific array index and the 0-based linear index.
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="index">Int-Array with the index components</param>
            <param name="indexCount">Count of index items</param>
            <param name="linearIndex">Linear index representation</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetArrayIndexAsLinearIndex(System.IntPtr,System.Int32[],System.Int32@)">
            <summary>
            Converts between the system specific array index and the 0-based linear index.
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="index">Int-Array with the index components</param>
            <param name="linearIndex">Linear index representation</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetArrayLinearIndexAsIndex(System.IntPtr,System.Int32,System.Int32[],System.Int32,System.Int32@)">
            <summary>
            Converts between the system specific array index and the 0-based linear index.
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="linearIndex">Linear index</param>
            <param name="index">Int-Array to store the index represenation</param>
            <param name="maxIndexCount">Count of index components in the index buffer</param>
            <param name="indexCount">Count of used index components after call</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetArrayLinearIndexAsIndex(System.IntPtr,System.Int32,System.Int32[],System.Int32@)">
            <summary>
            Converts between the system specific array index and the 0-based linear index.
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="linearIndex">Linear index</param>
            <param name="index">Int-Array to store the index represenation</param>
            <param name="indexCount">Count of used index components after call</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_CreateArrayAccessByLinearIndex(System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
            Creates an AccessHandle using the linear index of an array node
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="linearIndex">Linear index of desired item</param>
            <param name="accessHandle">The AccessHandle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_CreateArrayRangeAccessByLinearIndex(System.IntPtr,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            Creates an AccessHandle using the linear index of an array node for ranged access
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="linearIndex">Linear index of desired start item</param>
            <param name="count">Count of items based on the linear index as start index</param>
            <param name="accessHandle">The AccessHandle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_CreateArrayAccessByIndex(System.IntPtr,System.Int32[],System.IntPtr@)">
            <summary>
            Creates an AccessHandle using the system specific index of an array node
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="index">The index of the desired item</param>
            <param name="accessHandle">The AccessHandle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_CreateArrayAccessByIndex(System.IntPtr,System.Int32[],System.Int32,System.IntPtr@)">
            <summary>
            Creates an AccessHandle using the system specific index of an array node
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="index">The index of the desired item</param>
            <param name="indexCount">Count of index components</param>
            <param name="accessHandle">The AccessHandle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_CreateArrayRangeAccessByIndex(System.IntPtr,System.Int32[],System.Int32,System.IntPtr@)">
            <summary>
            Creates an AccessHandle using the system specific index of an array node for ranged access
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="index">The index of the desired start item</param>
            <param name="count">Count of items based on the index as start index</param>
            <param name="accessHandle">The AccessHandle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_CreateArrayRangeAccessByIndex(System.IntPtr,System.Int32[],System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            Creates an AccessHandle using the system specific index of an array node for ranged access
            </summary>
            <param name="arrayNodeHandle">Array node</param>
            <param name="index">The index of the desired start item</param>
            <param name="indexCount">Count of index components</param>
            <param name="count">Count of items based on the index as start index</param>
            <param name="accessHandle">The AccessHandle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferUInt8(System.IntPtr,System.Byte[],System.Int32,System.Byte@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferUInt8(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Byte@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferUInt16(System.IntPtr,System.Byte[],System.Int32,System.UInt16@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferUInt16(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt16@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferUInt32(System.IntPtr,System.Byte[],System.Int32,System.UInt32@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferUInt32(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferUInt64(System.IntPtr,System.Byte[],System.Int32,System.UInt64@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferUInt64(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt64@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferInt8(System.IntPtr,System.Byte[],System.Int32,System.SByte@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferInt8(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.SByte@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferInt16(System.IntPtr,System.Byte[],System.Int32,System.Int16@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferInt16(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Int16@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferInt32(System.IntPtr,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferInt32(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferInt64(System.IntPtr,System.Byte[],System.Int32,System.Int64@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferInt64(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Int64@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferFloat32(System.IntPtr,System.Byte[],System.Int32,System.Single@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferFloat32(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Single@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferFloat64(System.IntPtr,System.Byte[],System.Int32,System.Double@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferFloat64(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Double@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferChar8(System.IntPtr,System.Byte[],System.Int32,System.Byte@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferChar8(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Byte@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferChar16(System.IntPtr,System.Byte[],System.Int32,System.Char@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferChar16(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Char@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferString8(System.IntPtr,System.Byte[],System.Int32,System.String@,System.Text.Encoding)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="stringBuffer">The value</param>
            <param name="encoding">Encoding used to convert the string value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferString8(System.IntPtr,System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="stringBuffer">The value</param>
            <param name="charCount">Count of written characters</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferString8(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="stringBuffer">The value</param>
            <param name="maxCharCount">Maximum count of allowed characters to copy</param>
            <param name="charCount">Count of written characters</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferString16(System.IntPtr,System.Byte[],System.Int32,System.String@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="stringBuffer">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferString16(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.String@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="stringBuffer">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferString16(System.IntPtr,System.Byte[],System.Int32,System.Char[],System.Int32@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="stringBuffer">The value</param>
            <param name="charCount">Count of written characters</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferString16(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="stringBuffer">The value</param>
            <param name="maxCharCount">Maximum count of allowed characters to copy</param>
            <param name="charCount">Count of written characters</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferS7_DTLParts(System.IntPtr,System.Byte[],System.Int32,System.UInt16@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.UInt32@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="weekDay">The week day</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <param name="nanoseconds">The nanosecond</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferS7_DTLParts(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt16@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.UInt32@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="weekDay">The week day</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <param name="nanoseconds">The nanosecond</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferS7_S5TimeParts(System.IntPtr,System.Byte[],System.Int32,System.UInt16@,System.UInt16@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="timeBase">Variable for time base, this means 0=10ms, 1=100ms, 2=1sek, 3=10sec</param>
            <param name="timeValue">Variable for time value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferS7_S5TimeParts(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt16@,System.UInt16@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="timeBase">Variable for time base, this means 0=10ms, 1=100ms, 2=1sek, 3=10sec </param>
            <param name="timeValue">Variable for time value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferS7_S5TimeMs(System.IntPtr,System.Byte[],System.Int32,System.UInt32@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="milliseconds">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferS7_S5TimeMs(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="milliseconds">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferS7_Date_and_TimeParts(System.IntPtr,System.Byte[],System.Int32,System.UInt16@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.UInt16@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="weekDay">The week day</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <param name="millisecond">The millisecond</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferS7_Date_and_TimeParts(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt16@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.UInt16@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="weekDay">The week day</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <param name="millisecond">The millisecond</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferS7_Counter(System.IntPtr,System.Byte[],System.Int32,System.UInt16@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAccessBufferS7_Counter(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt16@)">
            <summary>
            Helper to get the specific value out of the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be obtained for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferUInt8(System.IntPtr,System.Byte[],System.Int32,System.Byte)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferUInt8(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Byte)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferUInt16(System.IntPtr,System.Byte[],System.Int32,System.UInt16)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferUInt16(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt16)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferUInt32(System.IntPtr,System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferUInt32(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferUInt64(System.IntPtr,System.Byte[],System.Int32,System.UInt64)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferUInt64(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt64)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferInt8(System.IntPtr,System.Byte[],System.Int32,System.SByte)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferInt8(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.SByte)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferInt16(System.IntPtr,System.Byte[],System.Int32,System.Int16)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferInt16(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Int16)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferInt32(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferInt32(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferInt64(System.IntPtr,System.Byte[],System.Int32,System.Int64)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferInt64(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Int64)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferFloat32(System.IntPtr,System.Byte[],System.Int32,System.Single)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferFloat32(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Single)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferFloat64(System.IntPtr,System.Byte[],System.Int32,System.Double)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferFloat64(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Double)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferChar8(System.IntPtr,System.Byte[],System.Int32,System.Byte)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferChar8(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Byte)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferChar16(System.IntPtr,System.Byte[],System.Int32,System.Char)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferChar16(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Char)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferString8(System.IntPtr,System.Byte[],System.Int32,System.String,System.Text.Encoding)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="stringBuffer">The value</param>
            <param name="encoding">Encoding that will be used to convert the string</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferString8(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="stringBuffer">The value</param>
            <param name="charCount">Count of characters the stringBuffer contains</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferString16(System.IntPtr,System.Byte[],System.Int32,System.String)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="stringBuffer">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferString16(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="stringBuffer">The value</param>
            <param name="charCount">Count of characters the stringBuffer contains</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferS7_DTLParts(System.IntPtr,System.Byte[],System.Int32,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="weekDay">The week day</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <param name="nanoseconds">The nanosecond</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferS7_DTLParts(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="weekDay">The week day</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <param name="nanoseconds">The nanosecond</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferS7_S5TimeParts(System.IntPtr,System.Byte[],System.Int32,System.UInt16,System.UInt16)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="timeBase">Variable with time base, this means 0=10ms, 1=100ms, 2=1sek, 3=10sec</param>
            <param name="timeValue">Variable with time value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferS7_S5TimeParts(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt16,System.UInt16)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="timeBase">Variable with time base, this means 0=10ms, 1=100ms, 2=1sek, 3=10sec </param>
            <param name="timeValue">Variable with time value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferS7_S5TimeMs(System.IntPtr,System.Byte[],System.Int32,System.UInt32,System.Int32)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="milliseconds">The value</param>
            <param name="round">Defines whether the value is round up or down to the next valid value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferS7_S5TimeMs(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="milliseconds">The value</param>
            <param name="round">Defines whether the value is round up or down to the next valid value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferS7_Counter(System.IntPtr,System.Byte[],System.Int32,System.UInt16)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferS7_Counter(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt16)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="value">The value</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferS7_Date_and_TimeParts(System.IntPtr,System.Byte[],System.Int32,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt16)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="weekDay">The week day</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <param name="milliseconds">The milliseconds</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SetAccessBufferS7_Date_and_TimeParts(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt16)">
            <summary>
            Helper to set the specific value in the AccessBuffer
            </summary>
            <param name="accessHandle">The AccessHandle</param>
            <param name="buffer">Byte buffer storing the value</param>
            <param name="bufferLen">Buffer length - correspondes to AccessBufferSize</param>
            <param name="element">The item whose value should be set for arrays or ranges. 0 based. For single items it must be 0</param>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="weekDay">The week day</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <param name="milliseconds">The milliseconds</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetProjectEditingCulture(System.IntPtr,System.Int32@)">
            <summary>
            Gets the local ID for the currently selected language of the project.
            </summary>
            <param name="rootNodeHandle">Handle of the root node that is created after a call to AGL_Symbolic_LoadTIAProjectSymbols or AGL_Symbolic_LoadAGLinkSymbolsFromFile</param>
            <param name="lcid">Local ID i.e. 1031 for germany, 1033 for the united states, etc.</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetProjectReferenceCulture(System.IntPtr,System.Int32@)">
            <summary>
            Gets the locale id for the reference language of the project.
            </summary>
            <param name="rootNodeHandle">Handle of the root node that is created after a call to AGL_Symbolic_LoadTIAProjectSymbols or AGL_Symbolic_LoadAGLinkSymbolsFromFile.</param>
            <param name="lcid">Local ID i.e. 1031 for germany, 1033 for the united states, etc.</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetProjectCultureCount(System.IntPtr,System.Int32@)">
            <summary>
            Gets the count of languages that were set up.
            </summary>
            <param name="rootNodeHandle">Handle of the root node that is created after a call to AGL_Symbolic_LoadTIAProjectSymbols or AGL_Symbolic_LoadAGLinkSymbolsFromFile</param>
            <param name="count">Variable for count of languages</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetProjectCulture(System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            Gets the local ID at the given position.
            </summary>
            <param name="rootNodeHandle">Handle of the root node that is created after a call to AGL_Symbolic_LoadTIAProjectSymbols or AGL_Symbolic_LoadAGLinkSymbolsFromFile.</param>
            <param name="cultureIndex">Index of the desired locale id</param>
            <param name="lcid">Variable for local ID i.e. 1031 for germany, 1033 for the united states, etc.</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetComment(System.IntPtr,System.Int32,System.String@)">
            <summary>
            Gets the comment of the node in the selected language.
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="lcid">Locale id i.e. 1031 for germany, 1033 for the united states, etc.</param>
            <param name="comment">Buffer for comment</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetCommentCultureCount(System.IntPtr,System.Int32@)">
            <summary>
            Gets the count of languages in the given node.
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="count">Count of available languages</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetCommentCulture(System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            Gets the locale id of the node at the desired position.
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="cultureIndex">Index of the desired local ID</param>
            <param name="lcid">Local ID i.e. 1031 for germany, 1033 for the united states, etc.</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_DatablockGetNumber(System.IntPtr,System.Int32@)">
            <summary>
            Returns data block number of a data block node
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="number">data block number of node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_DatablockGetType(System.IntPtr,Accon.AGLink.AGL4.DatablockTypes_t@)">
            <summary>
            Returns data block type of a data block node
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="Type">type of the data block</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_DatablockIsSymbolic(System.IntPtr,System.Int32@)">
            <summary>
            Returns the infomation that the data block is symbolic type or not
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="booleanValue">boolean Value if the datablock is symbolic</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetPath(System.IntPtr,System.String@)">
            <summary>
            Returns the full path of a node
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="path">Full path of node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetEscapedPath(System.IntPtr,System.String@)">
            <summary>
            Returns full and escaped path of a node suitable for ByPath-functions
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="path">Full and escaped path of node</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAttributeHMIAccessible(System.IntPtr,System.Boolean@)">
            <summary>
            Returns the value of the attribute "Accessible from HMI" of a node
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="value">value of attribute</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAttributeHMIVisible(System.IntPtr,System.Boolean@)">
            <summary>
            Returns the value of the attribute "Visible in HMI" of a node
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="value">value of attribute</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetAttributeRemanent(System.IntPtr,System.Boolean@)">
            <summary>
            Returns the value of the attribute "Retain" of a node
            </summary>
            <param name="nodeHandle">Tree node</param>
            <param name="value">value of attribute</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetS7PlcTypeName(System.IntPtr,System.String@)">
            <summary>
            Returns the PLC type name of a S7-PLC node
            </summary>
            <param name="nodeHandle">S7-PLC tree node</param>
            <param name="typeName">PLC type</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetS7PlcFirmware(System.IntPtr,System.String@)">
            <summary>
            Returns the PLC firmware of a S7-PLC node
            </summary>
            <param name="nodeHandle">S7-PLC tree node</param>
            <param name="firmware">firmware</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetS7PlcMLFB(System.IntPtr,System.String@)">
            <summary>
            Returns the mlfb of a S7-plc node
            </summary>
            <param name="nodeHandle">S7-plc tree node</param>
            <param name="mlfb">mlfb</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetS7PlcFamily(System.IntPtr,Accon.AGLink.AGL4.S7PlcFamily@)">
            <summary>
            Returns the PLC family type of a S7-PLC node
            </summary>
            <param name="nodeHandle">S7-PLC tree node</param>
            <param name="s7PlcFamily">S7-PLC family (300_400,1200,1500)</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_SaveSingleValueAccessSymbolsToFile(System.IntPtr,System.String,System.String,System.String)">
            <summary>
            Save symbol information from the TIA project format optimized/filtered 
            </summary>
            <param name="rootHandle">Handle to the root node of the symbol tree - this is the starting point for all following node functions</param>
            <param name="singleValueFilterFile">Filter file: per line a symbol path to be saved</param>
            <param name="logFile">Logfile contains error hints of the operation</param>
            <param name="aglinkSingleValueAccessSymbolFile">Resulting AGL file</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_LoadSingleValueAccessSymbolsFromFile(System.String,System.IntPtr@)">
            <summary>
            Load symbol information from the filtered AGL project format 
            </summary>
            <param name="aglinkSingleValueAccessSymbolsFile">File from which the symbol information is loaded, generated with Symbolic_SaveSingleValueAccessSymbolsToFile</param>
            <param name="singleValueAccessSymbolsHandle">Handle the access object</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_CreateAccessFromSingleValueAccessSymbols(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
            Erzeugt einen Zugriffshandle auf die Symbole 
            </summary>
            <param name="singleValueAccessSymbolsHandle">Handle generated with Symbolic_LoadSingleValueAccessSymbolsFromFile</param>
            <param name="symbol">Path to the desired symbol element starting from the start element of the filter file</param>
            <param name="accessHandle">Handle the access object</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetSingleValueAccessSymbolCount(System.IntPtr,System.Int32@)">
            <summary>
            Output of the number of symbols of the filtered AGL project
            </summary>
            <param name="singleValueAccessSymbolsHandle">Handle to the access object created with Symbolic_SaveSingleValueAccessSymbolsToFile</param>
            <param name="symbolCount">Number of symbols in the project</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.Symbolic_GetSingleValueAccessSymbolPath(System.IntPtr,System.Int32,System.String@,System.Int32,System.Int32@)">
            <summary>
            Determine a symbol path from the filtered AGL project 
            </summary>
            <param name="singleValueAccessSymbolsHandle">Handle the access object</param>
            <param name="index">Index of the desired symbol</param>
            <param name="path">Variable for path of the nodes</param>
            <param name="initialPathBufferByteCount">Maximum length of the text buffer</param>
            <param name="neededPathByteCount">After calling, the number of characters used</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="P:Accon.AGLink.AGL4.IsAGLink40_dll_Found">
            <summary>
            Checks if the native AGLink40.dll could be found.
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_Class.ePLC_300_400">
            <summary>
            300/400er Reihe
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_Class.ePLC_200">
            <summary>
            200er Reihe
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_Class.ePLC_1200">
            <summary>
            1200er Reihe
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLC_Class.ePLC_Logo">
            <summary>
            LOGO!
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Area.eNCK_AreaUnknown">
            <summary>
            ?: Unknown
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Area.eNCK_AreaNCK">
            <summary>
            N: NC Data
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Area.eNCK_AreaBag">
            <summary>
            B: Data of operational mode group
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Area.eNCK_AreaChannel">
            <summary>
            C: Channel assigned data
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Area.eNCK_AreaAxis">
            <summary>
            A: Axis specific basic settings
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Area.eNCK_AreaTool">
            <summary>
            T: Tool data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Area.eNCK_AreaFeedDrive">
            <summary>
            V: Infeed engine
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Area.eNCK_AreaMainDrive">
            <summary>
            H: Lifting engine
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Area.eNCK_AreaMMC">
            <summary>
            M: MMC-Data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockUnknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockY">
            <summary>
            System data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockYNCFL">
            <summary>
            NCK-Commandgroups
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockFU">
            <summary>
            Adjustable Zero-Point displacement
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockFA">
            <summary>
            Active Zero-Point displacement
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTO">
            <summary>
            Cutting data, Correction data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockRP">
            <summary>
            Calculation parameter
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSE">
            <summary>
            Setting data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSGUD">
            <summary>
            SGUD-Block
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockLUD">
            <summary>
            Local user data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTC">
            <summary>
            Head parameter
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockM">
            <summary>
            Machine data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockWAL">
            <summary>
            CoordSysWorkAreaLimits
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_Block0x1B">
            <summary>
            Unbekannt: z.B. in /nck/drive/techno_function_mask
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTISO">
            <summary>
            ISO Werkzeug Korrekturdaten
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockDIAG">
            <summary>
            Diagnostics, just for development ment
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockFE">
            <summary>
            External Zero-Point displacement
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTD">
            <summary>
            Tool data, common data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTS">
            <summary>
            Cutting data, observal data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTG">
            <summary>
            Tooldata, grinding data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTU">
            <summary>
            Tool data, user defined data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTUE">
            <summary>
            Cutting data, user defined data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTV">
            <summary>
            Tool data, folder
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTM">
            <summary>
            Stack data, common data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTP">
            <summary>
            Stack data, place data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTPM">
            <summary>
            Stack data, multi assignment of place data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTT">
            <summary>
            Stack data, place types
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTMV">
            <summary>
            Stack data, folder
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTMC">
            <summary>
            Stack data, configuration data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockMGUD">
            <summary>
            MGUD-Block
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockUGUD">
            <summary>
            UGUD-Block
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockGUD4">
            <summary>
            GUD4-Block
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockGUD5">
            <summary>
            GUD5-Block
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockGUD6">
            <summary>
            GUD6-Block
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockGUD7">
            <summary>
            GUD7-Block
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockGUD8">
            <summary>
            GUD8-Block
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockGUD9">
            <summary>
            GUD9-Block
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockPA">
            <summary>
            Protection area
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockGD1">
            <summary>
            SGUD-Block GD1
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockNIB">
            <summary>
            Nibbling
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockETP">
            <summary>
            Event types
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockETPD">
            <summary>
            Data lists for logging
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSYNACT">
            <summary>
            Channel specific synchronious data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockDIAGN">
            <summary>
            Diagnostics
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockVSYN">
            <summary>
            NCK-specific user variables for synchronious actions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTUS">
            <summary>
            Obversation user data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTUM">
            <summary>
            Stack user data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTUP">
            <summary>
            Stack place user data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockFB">
            <summary>
            Baseframe: adjustable frame, always affected
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSSP2">
            <summary>
            spindle state data at spindle transfer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockPUD">
            <summary>
            Global user data for programs
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockAD">
            <summary>
            Adapter data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTOT">
            <summary>
            Cutting data, transformed Adjustment data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockAEV">
            <summary>
            Working correction: folder
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockYFAFL">
            <summary>
            NCK-Commandgroups Fanuc
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockFS">
            <summary>
            System-Frame
            </summary> 
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSD">
            <summary>
            Servo data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTAD">
            <summary>
            Application specific data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTAO">
            <summary>
            Application specific cutting data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTAS">
            <summary>
            Application specific observation data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTAM">
            <summary>
            Application specific stack data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTAP">
            <summary>
            Application specific stack place data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSALAC">
            <summary>
            Alarm-Events, oldest first
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockAUXFU">
            <summary>
            Active help methods
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockTDC">
            <summary>
            Tools/Tools
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockCP">
            <summary>
            Generic coupling
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockMTV">
            <summary>
             Multi-tool data, directory
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockMTD">
            <summary>
            Multi-tool data, general data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockMTP">
            <summary>
            Multi-tool data, place data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockMTUD">
            <summary>
            Multi-tool data, user-defined data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockMTUP">
            <summary>
            Multi-tool place user data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockMTAD">
            <summary>
            Application-specific multi-tool data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockMTAP">
            <summary>
            Application-specific multi-tool place data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockCCS">
            <summary>
            Siemens Compilezyklen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSPARPI">
            <summary>
            Programpoint at interception
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSEGA">
            <summary>
            Advanced state data in wks
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSEMA">
            <summary>
            Advanced state data in mks
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSSP">
            <summary>
            State data in spindle
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSGA">
            <summary>
            State data in wks
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSMA">
            <summary>
            State data in mks
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSALAL">
            <summary>
            Last alarm
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSALAP">
            <summary>
            Top prio alarm
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSALA">
            <summary>
            Sequenced alarm
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSSYNAC">
            <summary>
            Synchronious actions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSPARPF">
            <summary>
            Programpointer for search
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSPARPP">
            <summary>
            Programpointer in automatic mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSNCF">
            <summary>
            Active G-Functions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSPARP">
            <summary>
            Partprograminformation
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockSINF">
            <summary>
            Partprogram specific state data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockS">
            <summary>
            State data
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_Block.eNCK_BlockO">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_LE_Uint8">
            <summary>
            Unsigned int 8 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_LE_Uint16">
            <summary>
            Unsigned int 16 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_LE_Int32">
            <summary>
            Signed int 32 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_LE_Float32">
            <summary>
            Float 32 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_LE_Float64">
            <summary>
            Float 64 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_LE_String">
             <summary>
            String zero terminated
             </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_LE_Bit">
             <summary>
            Boolean
             </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_LE_Int8">
             <summary>
            Signed int 8 Bit
             </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_LE_Int16">
            <summary>
            Signed int 16 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_LE_Uint32">
            <summary>
            Unsigned int 32 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_BE_Uint8">
            <summary>
            Unsigned int 8 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_BE_Uint16">
            <summary>
            Unsigned int 16 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_BE_Int32">
            <summary>
            Signed int 32 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_BE_Float32">
            <summary>
            Float 32 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_BE_Float64">
            <summary>
            Float 64 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_BE_String">
            <summary>
            String zero terminated
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_BE_Bit">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_BE_Int8">
             <summary>
            Signed int 8 Bit
             </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_BE_Int16">
            <summary>
            Signed int 16 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_DDEVarFormat.eNCK_BE_Uint32">
            <summary>
            Unsigned int 32 Bit
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MDBVarFormat.eNCK_MDB_Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MDBVarFormat.eNCK_MDB_Bit">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MDBVarFormat.eNCK_MDB_Int32">
            <summary>
            Signed Int32
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MDBVarFormat.eNCK_MDB_Float64">
            <summary>
            Float 64 Bit (Double)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MDBVarFormat.eNCK_MDB_Int8">
            <summary>
            Char
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MDBVarFormat.eNCK_MDB_String">
            <summary>
            String zero-terminated
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MDBVarFormat.eNCK_MDB_DateAndTime">
            <summary>
            Date and Time
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MDBVarFormat.eNCK_MDB_Uint16">
            <summary>
            Unsigned Int16
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MDBVarFormat.eNCK_MDB_Int16">
            <summary>
            Signed Int16
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MDBVarFormat.eNCK_MDB_Uint32">
            <summary>
            Unsigned Int32
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NCK_MDBVarFormat.eNCK_MDB_Float32">
            <summary>
            Float 32 Bit
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.LEDState">
            <summary>
            Possible states of LEDs
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.LEDState.Off">
            <summary>
            LED is off
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.LEDState.On">
            <summary>
            LED is on
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.LEDState.Blink_Normal">
            <summary>
            LED is blinking normally (0,5Hz)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.LEDState.Blink_Slow">
            <summary>
            LED is blinking slowly (0,2Hz)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AccessType.S7_CLASSIC">
            <summary>
            possible with 300/400 and with PUT/GET active 1200,1500 -> ueber 0x32
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AccessType.S7_NEXT">
            <summary>
            possible with 1200,1500
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.AccessType.SINUMERIK">
            <summary>
            Sinumerik 840D PL/SL
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.AglFilterFlags">
            <summary>
            Additional filter flags for function Symbolic_SaveAGLinkSymbolsToFileWithFilter()
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.TiaFilterFlags">
            <summary>
            Additional filter flags for function Symbolic_LoadTIAProjectSymbolsWithFilter()
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.DATA_RW40">
            <summary>
            Structure for use with ReadMix(Ex) or WriteMix(Ex)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40.OpArea">
            <summary>
            Area of the operand which is accessed
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40.OpType">
            <summary>
            Datatype
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40.OpAnz">
            <summary>
            Count of data to be read/written. Only important for ReadMixEx and WriteMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40.DBNr">
            <summary>
            Datablock-number
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40.Offset">
            <summary>
            Offset for the memory access (on T+Z Number)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40.BitNr">
            <summary>
            Bitnumber (if necessary)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40.Result">
            <summary>
            Result (error code) of the read- and write-options
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40.fValue">
            <summary>
            Value of the operand as Single (ReadMix and WriteMix).
            Size of array must be not less than OpAnz
            Usable with OpType TYP_DWORD
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40.Value">
            <summary>
            Value of the operand as DWORD (ReadMix and WriteMix)
            Size of array must be not less than OpAnz
            Usable with OpType TYP_DWORD
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40.W">
            <summary>
            For easier access (ReadMix and WriteMix)
            Size of array must be not less than OpAnz
            Usable with OpType TYP_WORD, TYP_COUNTER, TYP_TIMER, TYP_COUNTER_200, TYP_TIMER_200 und TYP_HS_COUNTER_200.
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40.B">
            <summary>
            For easier access (ReadMix and WriteMix)
            Size of array must be not less than OpAnz
            Usable with OpType TYP_BIT und TYP_BYTE.
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.DATA_RW40_">
            <summary>
            Struktur DATA_RW40_
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.DATA_RW40_RK">
            <summary>
            Structure for use with RK512-Functions
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_RK.OpArea">
            <summary>
            Area of the operand which is accessed
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_RK.OpAnz">
            <summary>
            Count of data to be read/written. Only important for ReadMixEx and WriteMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_RK.DBNr">
            <summary>
            Datablock-number with DB or DX
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_RK.Offset">
            <summary>
            Offset for the memory access
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_RK.KMByte">
            <summary>
            Byte number of Inter-Processor communication flag (0-255)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_RK.KMBit">
            <summary>
            Byte number of Inter-Processor communication flag (0-7 or 15)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_RK.CPUNr">
            <summary>
            Number of CPU (1-4 ir 15)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_RK.W">
            <summary>
            Value as UInt16
            Size of array must be not less than OpAnz
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_RK.B">
            <summary>
            Value as Byte
            Size of array must be not less than OpAnz
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_RK.BuffLen">
            <summary>
            Length of Buffer in ??? for AGL4.RKFetch, AGL4.Recv_RKSend etc.
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.DATA_RW40_RK_">
            <summary>
            Struktur DATA_RW40_RK_
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.DATA_RW40_DRIVE">
            <summary>
            Struktur für Nutzung der Funktionen Drive_ReadMix(Ex) und Drive_WriteMix(Ex)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_DRIVE.OpType">
            <summary>
            Datatype
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_DRIVE.OpAnz">
            <summary>
            Count of data to be read/written.
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_DRIVE.Dev">
            <summary>
            Number of device from your hardware configuration.
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_DRIVE.ParaNum">
            <summary>
            Number of parameter that should be read or written. For parameter P0006 it is 6.
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_DRIVE.ParaInd">
            <summary>
            Index of parameter that should be read or written. For paramter P0013[0..49] it is 0-49.
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_DRIVE.Result">
            <summary>
            Result (error code) of the read- and write-options
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_DRIVE.fValue">
            <summary>
            Value of the operand as Single (Drive_ReadMix and Drive_WriteMix).
            Size of array must be not less than OpAnz
            Usable with OpType DTYP_DWORD, DTYP_REAL, DTYP_INT32.
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_DRIVE.Value">
            <summary>
            Value of the operand as DWORD (ReadMix and WriteMix)
            Size of array must be not less than OpAnz
            Usable with OpType DTYP_DWORD, DTYP_INT32.
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_DRIVE.W">
            <summary>
            For easier access (ReadMix and WriteMix)
            Size of array must be not less than OpAnz
            Usable with OpType DTYP_WORD, DTYP_INT16
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DATA_RW40_DRIVE.B">
            <summary>
            For easier access (Drive_ReadMix and Drive_WriteMix)
            Size of array must be not less than OpAnz
            Usable with OpType DTYP_BIT, DTYP_BYTE, DTYP_INT8.
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.DATA_RW40_DRIVE_">
            <summary>
            Struktur DATA_RW40_DRIVE_
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.NckDataRW">
            <summary>
            Struktur NckDataRW
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGL4.NckDataRW.#ctor">
            <summary>
            Initialized this object
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGL4.NckDataRW.CanConvertTo(System.Type)">
            <summary>
            Checks whether a conversion into the specified data type is possible
            </summary>
            <param name="type">Datatype to check</param>
            <returns>True for possible, otherwise false</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NckDataRW.CanConvertFrom(System.Type)">
            <summary>
            Checks whether a conversion from the specified data type is possible
            </summary>
            <param name="type">Datatype to check</param>
            <returns>True for possible, otherwise false</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NckDataRW.ConvertToCurrentDDeVarType">
            <summary>
            Converts the buffer into the currently set data type of DDEVarType
            </summary>
            <returns>Converted value</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NckDataRW.SetData(System.Object)">
            <summary>
            Sets the value und adjusts the Properties for the given data
            </summary>
            <param name="data">Value to set</param>
            <returns>Flag whether setting the value was successfull</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NckDataRW.ConvertTo(System.Type)">
            <summary>
            Konvertiert den Puffer in den übergebnenen Datentyp
            </summary>
            <param name="type">Der Datentyp in den der Puffer konvertiert werden soll</param>
            <returns></returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NckDataRW.ConvertToSingleElement(System.Type)">
            <summary>
            Konvertiert den Datenpuffer zu einem einzelnen Element vom angegebenen Typ
            </summary>
            <param name="type">Zieldatentyp</param>
            <returns>Konvertierter Wert vom Zieldatentyp</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NckDataRW.ConvertToArray(System.Type)">
            <summary>
            Konvertiert den Datenpuffer zu einem Array
            </summary>
            <param name="type">Zieldatentyp</param>
            <returns>Konvertiertes Array vom Zieldatentyp</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NckDataRW.ConvertToDualArray(System.Type)">
            <summary>
            Konvertiert den Datenpuffer zu einem 2-Dimensionalen-Array
            </summary>
            <param name="type">Zieldatentyp</param>
            <returns>Konvertiertes Array vom Zieldatentyp</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4.NckDataRW.ConvertFromArray(System.Array)">
            <summary>
            Konvertiert die übergebenen Daten in ein Bytefeld und setzt alle zugehörigen Werte vor
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Accon.AGLink.AGL4.NckDataRW.ConvertFromSingleElement(System.Object)">
            <summary>
            Konvertiert die übergebenen Daten in ein Bytefeld und setzt alle zugehörigen Werte vor
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Accon.AGLink.AGL4.NckDataRW.GetSizeOfCurrentDDEVarType">
            <summary>
            Gibt die Länge des gerade ausgewählten Datentyps zurück
            </summary>
            <returns>Größe des Datentyps in Byte</returns>
        </member>
        <member name="T:Accon.AGLink.AGL4.NckDataRW_">
            <summary>
            Struktur NckDataRW_
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.RESULT40">
            <summary>
            Struktur für das Ergebnis der Kommunikation
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RESULT40.State">
            <summary>
            State of communication
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RESULT40.ErrCode">
            <summary>
            Errorcode
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RESULT40.SysTime">
            <summary>
            Date and time after the end of communication
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RESULT40.SError">
            <summary>
            Error code from hardware
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RESULT40.UserVal">
            <summary>
            User defined value
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.PROGRESS">
            <summary>
            Struktur PROGRESS
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROGRESS.AktVal">
            <summary>
            Current byte count
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROGRESS.MaxVal">
            <summary>
            Byte count to reach
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROGRESS.UserVal">
            <summary>
            User defined value
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROGRESS.Reverse">
            <summary>
            Currently not used!
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.MLFB">
            <summary>
            Struktur MLFB
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MLFB.sMLFB">
            <summary>
            MLFB-Nummer als nullterminierter String
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.MLFBEX">
            <summary>
            Struktur MLFBEX
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MLFBEX.PLCVer">
            <summary>
            Ausgabestand des AG
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MLFBEX.PGASVer">
            <summary>
            Ausgabestand PG-Anschaltung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.MLFBEX.sMLFB">
            <summary>
            MLFB-Nummer als nullterminierter String
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.SYSTEMTIME">
            <summary>
            Struktur SYSTEMTIME
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.SYSTEMTIME.wYear">
            <summary>
            Current year
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.SYSTEMTIME.wMonth">
            <summary>
            Current month (1 - January, 2 - February, ...)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.SYSTEMTIME.wDayOfWeek">
            <summary>
            Current day of week (0 - Sunday, 1 - Monday, ...)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.SYSTEMTIME.wDay">
            <summary>
            Day of month
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.SYSTEMTIME.wHour">
            <summary>
            Current hour (0..23)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.SYSTEMTIME.wMinute">
            <summary>
            Current minute (0..59)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.SYSTEMTIME.wSecond">
            <summary>
            Current second (0..59)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.SYSTEMTIME.wMilliseconds">
            <summary>
            Current millisecond (0..999)
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.TOD">
            <summary>
            Struktur TOD
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TOD.ClockStatus">
            <summary>
            q.v. PLC-Documentation
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TOD.Year">
            <summary>
            Year as BCD
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TOD.Month">
            <summary>
            Month as BCD
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TOD.Day">
            <summary>
            Day as BCD
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TOD.Hour">
            <summary>
            Hour as BCD
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TOD.Minute">
            <summary>
            Minute as BCD
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TOD.Second">
            <summary>
            Second as BCD
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TOD.Zero">
            <summary>
            Should always be zero
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.TOD.Weekday">
            <summary>
            Day of wwek, Sunday = 1
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.CYCLETIME">
            <summary>
            Struktur CYCLETIME
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.CYCLETIME.AktCycleTime">
            <summary>
            Current cycle time
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.CYCLETIME.MinCycleTime">
            <summary>
            Minimal cycle time
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.CYCLETIME.MaxCycleTime">
            <summary>
            Maximal cycle time
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.PLCINFO">
            <summary>
            Struktur PLCINFO
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLCINFO.PAE">
            <summary>
            Count of input bytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLCINFO.PAA">
            <summary>
            Count of output bytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLCINFO.Flags">
            <summary>
            Count of flag bytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLCINFO.Timer">
            <summary>
            Count of timer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLCINFO.Counter">
            <summary>
            Count of counter
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLCINFO.LogAddress">
            <summary>
            Size of logical address space
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PLCINFO.LocalData">
            <summary>
            Size of local data
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.PROTLEVEL">
            <summary>
            Struktur PROTLEVEL
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROTLEVEL.KeyProtLevel">
            <summary>
            Trough mode selector specified protection level
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROTLEVEL.ParaProtLevel">
            <summary>
            Parameterized protecion level
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROTLEVEL.CPUProtLevel">
            <summary>
            Valid protection level of CPU
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROTLEVEL.ModeSelector">
            <summary>
            Current value of mode selector
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.PROTLEVEL.StartupSwitch">
            <summary>
            Current value of startup switch
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.NOTIFICATION">
            <summary>
            Struktur für Benachrichtigungsmechanismen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NOTIFICATION.hWnd">
            <summary>
            Fensterhandle für Benachrichtigung über Message
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NOTIFICATION.WndMessage">
            <summary>
            Nummer der Nachricht
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NOTIFICATION.dwThreadID">
            <summary>
            Falls Nachricht direkt an einen Thread geschickt werden soll
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NOTIFICATION.ThreadMessage">
            <summary>
            Gewünschte Nachricht für Thread
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NOTIFICATION.hEvent">
            <summary>
            Benachrichtigung über Event
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.NOTIFICATION.CB">
            <summary>
            Callback-Implementierung
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.WSABUF">
            <summary>
            Struktur WSABUF
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.WSABUF.len">
            <summary>
            Größe des Puffers in Byte
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.WSABUF.buf">
            <summary>
            Zeiger auf den Puffer
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.EXT_MODULE_INFO.Hardware">
            <summary>
            Gets the hardware identification
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.EXT_MODULE_INFO.HardwareVer">
            <summary>
            Gets the hardware version
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.EXT_MODULE_INFO.Firmware">
            <summary>
            Gets the firmware identification
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.EXT_MODULE_INFO.FirmwareVer">
            <summary>
            Gets the firmware version
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.EXT_MODULE_INFO.FirmwareExt1">
            <summary>
            Gets the firmware extension 1 identification
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.EXT_MODULE_INFO.FirmwareExt1Ver">
            <summary>
            Gets the firmware extension 1 version
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.EXT_MODULE_INFO.FirmwareExt2">
            <summary>
            Gets the firmware extension 2 identification
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.EXT_MODULE_INFO.FirmwareExt2Ver">
            <summary>
            Gets the firmware extension 2 version
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.EXT_MODULE_INFO_.Hardware">
            <summary>
            Hardware-Bezeichnung als nullterminierter String
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.EXT_MODULE_INFO_.HardwareVer">
            <summary>
            Version der Hardware als nullterminierter String
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.EXT_MODULE_INFO_.Firmware">
            <summary>
            Firmware-Bezeichnung als nullterminierter String
            </summary>  
        </member>
        <member name="F:Accon.AGLink.AGL4.EXT_MODULE_INFO_.FirmwareVer">
            <summary>
            Version der Firmware als nullterminierter String
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.EXT_MODULE_INFO_.FirmwareExt1">
            <summary>
            Firmware-Erweiterung1-Bezeichnung als nullterminierter String
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.EXT_MODULE_INFO_.FirmwareExt1Ver">
            <summary>
            Version der Firmware-Erweiterung1 als nullterminierter String
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.EXT_MODULE_INFO_.FirmwareExt2">
            <summary>
            Firmware-Erweiterung2-Bezeichnung als nullterminierter String
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.EXT_MODULE_INFO_.FirmwareExt2Ver">
            <summary>
            Version der Firmware-Erweiterung2 als nullterminierter String
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_LED.Led">
            <summary>
            Space for all LEDs
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_LED_.Led">
            <summary>
            Platz für alle möglichen LEDs mit Reserve für die Zukunft
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.RED_CONN_STATE">
            <summary>
            Objekt für den Zustand einer redundanten Verbindung
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RED_CONN_STATE.ActiveConn">
            <summary>
            Actually active connections
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RED_CONN_STATE.LinkStateConn1">
            <summary>
            State of connection 1
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RED_CONN_STATE.LinkStateConn2">
            <summary>
            State of connection 2
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RED_CONN_STATE.OpStateConn1">
            <summary>
            State of plc over connection 1 (only H-CPU system)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RED_CONN_STATE.OpStateConn2">
            <summary>
            State of plc over connection 2 (only H-CPU system)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RED_CONN_STATE_.ActiveConn">
            <summary>
            Momentan aktive Verbindung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RED_CONN_STATE_.LinkStateConn1">
            <summary>
            Zustand der Verbindung 1
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RED_CONN_STATE_.LinkStateConn2">
            <summary>
            Zustand der Verbindung 2
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RED_CONN_STATE_.OpStateConn1">
            <summary>
            Betriebszustand der SPS von Verbindung 1 (nur H-CPU-System)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RED_CONN_STATE_.OpStateConn2">
            <summary>
            Betriebszustand der SPS von Verbindung 2 (nur H-CPU-System)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_USEND_URCV.R_ID">
            <summary>
            Remote connection id
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_USEND_URCV.AnzValues">
            <summary>
            Count of data (1-4)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_USEND_URCV_.R_ID">
            <summary>
            Die R_ID für die Kommunikation
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_USEND_URCV_.AnzValues">
            <summary>
            Anzahl der gelesenen Werte (1-4)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_USEND_URCV_VAL.DataType">
            <summary>
            Data type of additional value
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_USEND_URCV_VAL.DataLen">
            <summary>
            Length of data in bytes
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_USEND_URCV_VAL.Data">
            <summary>
            Data as byte field
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_USEND_URCV_VAL_.DataType">
            <summary>
            Datentyp des Zusatzwertes
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_USEND_URCV_VAL_.DataLen">
            <summary>
            Länge der Daten in Bytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_USEND_URCV_VAL_.Data">
            <summary>
            Daten als Bytearray
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.ALL_BLOCK_COUNT.BC">
            <summary>
            Data blocks
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.BLOCK_COUNT.BlockType">
            <summary>
            Type of data block
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.BLOCK_COUNT.BlockCount">
            <summary>
            Count of blocks
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.BLOCK_COUNT_.BlockType">
            <summary>
            Type des Bausteines
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.BLOCK_COUNT_.BlockCount">
            <summary>
            Anzahl der Bausteine
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.DT.Year">
            <summary>
            Year as BCD
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.DT.Month">
            <summary>
            Month as BCD
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.DT.Day">
            <summary>
            Day as BCD
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.DT.Hour">
            <summary>
            Hour as BCD
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.DT.Minute">
            <summary>
            Minute as BCD
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.DT.Second">
            <summary>
            Second as BCD
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.DT.Zero">
            <summary>
            Should always be zero
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.DT.Weekday">
            <summary>
            Day of week, Sunday = 1
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.DT.AsDateTime">
            <summary>
            Gets the set of properties combined in a date object
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DT_.Year">
            <summary>
            Jahr in BCD (2-stellig)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DT_.Month">
            <summary>
            Monat in BCD (2-stellig)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DT_.Day">
            <summary>
            Tag in BCD (2-stellig)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DT_.Hour">
            <summary>
            Stunde in BCD (2-stellig)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DT_.Minute">
            <summary>
            Minute in BCD (2-stellig)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DT_.Second">
            <summary>
            Sekunde in BCD (2-stellig)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DT_.Zero">
            <summary>
            Sollte immer 0 sein
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.DT_.Weekday">
            <summary>
            Wochentag, Sonntag = 1
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_DIAG_MSG.ID">
            <summary>
            q.v. diagnostic buffer for the stop reason, for WR_USMSG this value is the id (0xA0??, 0xA1??, 0xB0??, 0xB1??, ...)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_DIAG_MSG.AnlInfo">
            <summary>
            Startup informations for WR_USMSG this value is the paramter Info2
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_DIAG_MSG.Timestamp">
            <summary>
            Timestamp of message
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_DIAG_MSG_.ID">
            <summary>
            Siehe Diagnosepuffer-Doku für Stopursache, bei WR_USMSG steht hier ID, entweder 0xA0??, 0xA1??, 0xB0??, 0xB1?? bzw. 
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_DIAG_MSG_.Res1">
            <summary>
            Bei Stop steht hier 0xFF + BZÜ-Infos, bei WR_USMSG unbekannt
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_DIAG_MSG_.Res2">
            <summary>
            Reserviert
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_DIAG_MSG_.Res3">
            <summary>
            Reserviert, bei WR_USMSG steht hier der Parameter Info1
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_DIAG_MSG_.AnlInfo">
            <summary>
            Anlaufinfo, bei WR_USMSG steht hier der Parameter Info2
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_DIAG_MSG_.Timestamp">
            <summary>
            Zeitstempel der Meldung
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_SCAN_ADD_VALUE">
            <summary>
            Einzelner Begleitwert für Scan-Wert
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_SCAN_ADD_VALUE.DataType">
            <summary>
            Data type of additional value
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_SCAN_ADD_VALUE.DataLen">
            <summary>
            Length of data in bytes
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_SCAN_ADD_VALUE.Value">
            <summary>
            Value of the operand as DWORD
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_SCAN_ADD_VALUE_">
            <summary>
            Einzelner Begleitwert für Scan-Wert
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_ADD_VALUE_.DataType">
            <summary>
            Datentyp des Zusatzwertes
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_ADD_VALUE_.DataLen">
            <summary>
            Länge der Daten in Bytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_ADD_VALUE_.Value">
            <summary>
            Wert des Operanden als DWORD
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_SCAN_VALUE">
            <summary>
            Scan-Wert mit Begleitwerten
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_SCAN_VALUE.State">
            <summary>
            Value is available or not(= error)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_SCAN_VALUE.AckState">
            <summary>
            acknowledgement state of event
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_SCAN_VALUE.EventState">
            <summary>
            Actual state of event
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_SCAN_VALUE.EventId">
            <summary>
            Message number from projection
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_SCAN_VALUE.AnzAddValues">
            <summary>
            Count of additional values
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_SCAN_VALUE.AddValues">
            <summary>
            Additional values
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_SCAN_VALUE_">
            <summary>
            Scan-Wert mit Begleitwerten
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_VALUE_.State">
            <summary>
            Wert ist vorhanden oder nicht vorhanden (= Fehler)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_VALUE_.AckState">
            <summary>
            Quittierungszustand des Ereignisses
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_VALUE_.EventState">
            <summary>
            Aktueller Zustand des Ereignisses
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_VALUE_.EventId">
            <summary>
            Meldungsnummer aus Projektierung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_VALUE_.AnzAddValues">
            <summary>
            Anzahl der zusätzlichen Werte
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_VALUE_.AddValues">
            <summary>
            Zusatzwerte (Begleitwerte)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_SCAN.Intervall">
            <summary>
            Intervall of scans: 0x0200 = 100 ms, 0x0300 = 500 ms, 0x0400 = 1000 ms
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_SCAN.Timestamp">
            <summary>
            Timestamp of message
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_SCAN.AnzValues">
            <summary>
            Count of read variables
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_SCAN_">
            <summary>
            Scan-Ergebnisstruktur
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_.Intervall">
            <summary>
            Intervall des Scans: 0x0200 = 100 ms, 0x0300 = 500 ms, 0x0400 = 1000 ms
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_.Timestamp">
            <summary>
            Zeitstempel der Scan-Meldung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_.Reserved">
            <summary>
            Für zukünftige Erweiterungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_.AnzValues">
            <summary>
            Anzahl der gelesene Variablen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SCAN_.ScanVal">
            <summary>
            Damit wir für die Zukunft gerüstet sind gleich so viele in die Struktur aufnehmen
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE.EventId">
            <summary>
            Message number, EVID or AR_ID from projection
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE.AckState">
            <summary>
            Acknowledgement state of events
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE.Result">
            <summary>
            Result of change (error code)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE_.EventId">
            <summary>
            Meldungsnummer, EV_ID bzw. AR_ID aus Projektierung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE_.AckState">
            <summary>
            Quittierungszustand des Ereignisses (nur bei Quittierung)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE_.Result">
            <summary>
            Ergebnis der Änderung (Fehlercode)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_RCV_MSG_STATE.MsgReason">
            <summary>
            0x01 = Message has been acknowledged, 0x02 = Message has been locked, 0x03 = Message has been unlocked
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_RCV_MSG_STATE.Timestamp">
            <summary>
            Timestamp of acknowledge message for lock or unlock allways filled with 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_RCV_MSG_STATE.MsgAnz">
            <summary>
            Count of messages
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_RCV_MSG_STATE.Msg">
            <summary>
            The messages
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RCV_MSG_STATE_.MsgReason">
            <summary>
            0x01 = Meldung wurde quittiert, 0x02 = Meldung wurde gesperrt, 0x03 = Meldung wurde freigegeben
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RCV_MSG_STATE_.Timestamp">
            <summary>
            Zeitstempel der Ack-Meldung, bei Lock bzw. Unlock immer mit 0 gefüllt
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RCV_MSG_STATE_.MsgAnz">
            <summary>
            Anzahl der Nachrichten
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RCV_MSG_STATE_.Msg">
            <summary>
            Die einzelnen Nachrichten. Bis jetzt kam immer nur eine vor, aber als Vorbereitung für die Zukunft ...
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_MSG_STATE.EventState">
            <summary>
            Actual state of events
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_MSG_STATE.EventId">
            <summary>
            Message number from projection
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_MSG_STATE.AckState">
            <summary>
            Acknowledgement state
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MSG_STATE_.EventState">
            <summary>
            Aktueller Zustand des Ereignisses
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MSG_STATE_.EventId">
            <summary>
            Meldungsnummer aus Projektierung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MSG_STATE_.AckState">
            <summary>
            Quittierungszustand des Ereignisses (nur bei Quittierung)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE.State">
            <summary>
            Value available or not (= error)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE.AckState">
            <summary>
            Acknowledgment state of events
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE.EventState">
            <summary>
            Actual state of events
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE.EventId">
            <summary>
            Message number from projeciton
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE.TimestampC">
            <summary>
            Timestamp for coming
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE.DataTypeC">
            <summary>
            Data type of additional value (coming)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE.DataLenC">
            <summary>
            Lenght of data in bytes (coming)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE.DataC">
            <summary>
            Data as byte field (coming)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE.TimestampG">
            <summary>
            Timestamp for gone
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE.DataTypeG">
            <summary>
            Datatype of additional value (gone)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE.DataLenG">
            <summary>
            Lenght of data in bytes (gone)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE.DataG">
            <summary>
            Data as byte field (gone)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE_.State">
            <summary>
            Wert ist vorhanden oder nicht vorhanden (= Fehler)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE_.AckState">
            <summary>
            Quittierungszustand des Ereignisses
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE_.EventState">
            <summary>
            Aktueller Zustand des Ereignisses
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE_.EventId">
            <summary>
            Meldungsnummer aus Projektierung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE_.TimestampC">
            <summary>
            Zeitstempel Kommt
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE_.DataTypeC">
            <summary>
            Datentyp des Zusatzwertes Kommt
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE_.DataLenC">
            <summary>
            Länge der Daten in Bytes Kommt
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE_.DataC">
            <summary>
            Daten als Bytearray Kommt
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE_.TimestampG">
            <summary>
            Zeitstempel Geht
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE_.DataTypeG">
            <summary>
            Datentyp des Zusatzwertes Geht
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE_.DataLenG">
            <summary>
            Länge der Daten in Bytes Geht
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_OPEN_MSG_STATE_.DataG">
            <summary>
            Daten als Bytearray Geht
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_ALARM_ADD_VALUE">
            <summary>
            Einzelner Begleitwert für Alarm-Wert
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_ALARM_ADD_VALUE.DataType">
            <summary>
            Data type of additional value
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_ALARM_ADD_VALUE.DataLen">
            <summary>
            Length of data in bytes
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_ALARM_ADD_VALUE.Data">
            <summary>
            Data as byte field
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_ALARM_ADD_VALUE_">
            <summary>
            Einzelner Begleitwert für Alarm-Wert
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_ADD_VALUE_.DataType">
            <summary>
            Datentyp des Zusatzwertes
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_ADD_VALUE_.DataLen">
            <summary>
            Länge der Daten in Bytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_ADD_VALUE_.Data">
            <summary>
            Daten als Bytearray
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_ALARM">
            <summary>
            Alarm-Ergebnisklasse
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_ALARM.MsgType">
            <summary>
            Type of message (MSG_SFB, MSG_SFC, ...) for Acknowledgment, locking, unlocking, ...
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_ALARM.AckActive">
            <summary>
            confirmation triggered notification for SFB 33-35 relevant for this notification
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_ALARM.Severity">
            <summary>
            Parameter Severity at SFB call
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_ALARM.State">
            <summary>
            Value is available or not (= error)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_ALARM.AckState">
            <summary>
            Acknowledgment state of events
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_ALARM.EventState">
            <summary>
            Actual state of events
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_ALARM.EventId">
            <summary>
            Message number from projection
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_ALARM.Timestamp">
            <summary>
            Timestamp of scan message
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7_ALARM.AnzAddValues">
            <summary>
            Count of additional values
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_ALARM_">
            <summary>
            Alarm-Ergebnisstruktur
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_.MsgType">
            <summary>
            Art der Meldung (MSG_SFB, MSG_SFC, ...) für Quittierung, Sperrung, Entsperrung, ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_.AckActive">
            <summary>
            Quittierungsgetriggertes Melden für SFB 33-35 für diese Meldung relevant
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_.Severity">
            <summary>
            Parameter Severity beim SFB-Aufruf
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_.State">
            <summary>
            Wert ist vorhanden oder nicht vorhanden (= Fehler)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_.AckState">
            <summary>
            Quittierungszustand des Ereignisses
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_.EventState">
            <summary>
            Aktueller Zustand des Ereignisses
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_.EventId">
            <summary>
            Meldungsnummer aus Projektierung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_.Reserved1">
            <summary>
            Für zukünftige Erweiterungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_.Reserved2">
            <summary>
            Für zukünftige Erweiterungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_.Timestamp">
            <summary>
            Zeitstempel der Scan-Meldung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_.AnzAddValues">
            <summary>
            Anzahl der zusätzlichen Werte
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ALARM_.AlarmAddVal1">
            <summary>
            Damit wir für die Zukunft gerüstet sind gleich so viele in die Struktur aufnehmen
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.NCKAlarm.Id">
            <summary>
            Fehlernummer
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Project.Conn">
            <summary>
            Configurated connections per device
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ.Conn1">
            <summary>
            Projektierte Verbindungen je Device
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Project1.PlcNr">
            <summary>
            Logical mapping = virtual or real plc number
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Project1.RemResource">
            <summary>
            remote resource id from your configuration
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Project1.RemRackNr">
            <summary>
            remote rack number from your configuration
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Project1.RemSlotNr">
            <summary>
            remote slot number from your configuration
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Project1.LocResource">
            <summary>
            local resource id from your configuraiton
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Project1.LocRackNr">
            <summary>
            local rack number from your configuration
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Project1.LocSlotNr">
            <summary>
            local slot number from your configuraiton
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Project1.PLCClass">
            <summary>
            Enum of the configured plc type
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.lPlcNr">
            <summary>
            Zum logischen Mappen = virtuelle oder reale PLC-Nummer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.bRemResource">
            <summary>
            Entfernte Resourcen-ID aus Konfiguration
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.bRemRackNr">
            <summary>
            Entfernte Rack-Nummer aus Konfiguration
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.bRemSlotNr">
            <summary>
            Entfernte Slot-Nummer aus Konfiguration
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.bDummy1">
            <summary>
            Füllbyte
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.bLocResource">
            <summary>
            Lokale Resourcen-ID aus Konfiguration
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.bLocRackNr">
            <summary>
            Lokale Rack-Nummer aus Konfiguration
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.bLocSlotNr">
            <summary>
            Lokale Slot-Nummer aus Konfiguration
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.bDummy2">
            <summary>
            Füllbyte
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.bPLCClass">
            <summary>
            Enum der SPS-Klasse (neu)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.bID">
            <summary>
            Nur zur internen Verwendung bestimmt
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.bReserve">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PROJ_1.dwReserve">
            <summary>
            Future extension
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Route.Route">
            <summary>
            Routed connections per device
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ROUTE.Route1">
            <summary>
            Routing Verbindungen je Device
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Route1.PlcNr">
            <summary>
            logical mappgin = virtual or real plc number
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Route1.ProjectID">
            <summary>
            subnet id of project
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Route1.SubnetID">
            <summary>
            subnet id of subnet
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Route1.AddressLen">
            <summary>
            Length of address (1 for MPI, 4 for TCP/IP)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Route1.ConnType">
            <summary>
            Connection type of destination cpu (CONN_PG, CONN_OP oder CONN_SONST)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Route1.RackNr">
            <summary>
            Rack number of destination cpu
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Route1.SlotNr">
            <summary>
            Slot number of destination cpu
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ROUTE_1.lPlcNr">
            <summary>
            Zum logischen Mappen = virtuelle oder reale PLC-Nummer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ROUTE_1.ProjectID">
            <summary>
            Subnetz-ID Projekt
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ROUTE_1.SubnetID">
            <summary>
            Subnetz-ID Subnetz
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ROUTE_1.AddressLen">
            <summary>
            Länge der folgenden Adresse (1 bei MPI, 4 bei TCP/IP)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ROUTE_1.Address">
            <summary>
            Reserve tut gut
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ROUTE_1.bConnType">
            <summary>
            Verbindungsart der Ziel-CPU (CONN_PG, CONN_OP oder CONN_SONST)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ROUTE_1.bRackNr">
            <summary>
            Racknummer Ziel-CPU
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ROUTE_1.bSlotNr">
            <summary>
            Slotnummer Ziel-CPU
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_ROUTE_1.bReserve">
            <summary>
            sicher isch sicher  
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7ConnIE">
            <summary>
            Structure to read the confuiguration data of the connection type S7Conn IE
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE.ConnsUsed">
            <summary>
            Count of used connections
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE.Conn">
            <summary>
            Connections per device
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE.Proj">
            <summary>
            Configred connections (for internal use only)
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7CONN_IE">
            <summary>
            Struktur zum auslesen der Konfiguration vom Typ S7Conn IE
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE.iConnsUsed">
            <summary>
            Anzahl verwendeter Verbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE.Conn1">
            <summary>
            Verbindungen je Device
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE.Proj">
            <summary>
            Projektierte Verbindungen, hier nur zur internen Verwendung
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7ConnIE1">
            <summary>
            Structure to read the configuration parameter data of the connection type S7-CONN/IE
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.ConnID">
            <summary>
            ID of the connection (not necessary since AGLink40.dll v4.0.10)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.PlcNr">
            <summary>
            Defined for future implementation
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.Credits">
            <summary>
            Maximum count of credits at L5
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.RemoteResource">
            <summary>
            ID of remote resource
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.RemoteRackNr">
            <summary>
            Rack number of remote resource
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.RemoteSlotNr">
            <summary>
            Slot number of remote resource
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.LocalResource">
            <summary>
            ID of local resource
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.LocalRackNr">
            <summary>
            Rack number of local resource
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.LocalSlotNr">
            <summary>
            Slot number of local resource
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.Address">
            <summary>
            IP-Address or name of PLC (Max 64 characters)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.Flags">
            <summary>
            Flags for more options, at the moment always 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ConnIE1.PortNr">
            <summary>
            Port number if PAT is needed
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7CONN_IE_1">
            <summary>
            Struktur S7CONN_IE_1 für die Verbindungsparameter beim Gerätetyp S7-CONN/IE
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.wConnID">
            <summary>
            ID der Verbindung (nicht mehr notwendig seit V4.0.10 von AGLink40.dll)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.wPlcNr">
            <summary>
            Für eine zukünftige Erweiterung vorgesehen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.bCredits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.bReserveL5">
            <summary>
            Ein Byte (8-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.wMaxPDUSize">
            <summary>
            Ein Wort (16-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.lReserveL5">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.bRemResource">
            <summary>
            ID der entfernten Resource
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.bRemRackNr">
            <summary>
            Rack-Nummer der entfernten Resource
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.bRemSlotNr">
            <summary>
            Slot-Nummer der entfernten Resource
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.bDummy1">
            <summary>
            Ein Byte (8-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.bLocResource">
            <summary>
            ID der lokalen Resourcen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.bLocRackNr">
            <summary>
            Rack-Nummer der lokalen Resourcen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.bLocSlotNr">
            <summary>
            Slot-Nummer der lokalen Resourcen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.bDummy2">
            <summary>
            Füllbyte
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.lReserveL4">
            <summary>
            Zwei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.Address">
            <summary>
            IP-Adresse bzw. Namen der SPS
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.Flags">
            <summary>
            Flags für weitere Optionen, derzeit immer 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.wPortNr">
            <summary>
            PortNr wenn PAT erforderlich ist
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.wReserveL2">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.lReserveL2">
            <summary>
            Zwei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7CONN_IE_1.lReserve">
            <summary>
            Fünf Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7tcpip">
            <summary>
            Structure to read the confuiguration data of the connection type S7-TCP/IP
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip.Conn">
            <summary>
            Connections per device
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip.Proj">
            <summary>
            Configured connections
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip.Route">
            <summary>
            Configured routed connections
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_TCPIP">
            <summary>
            Struktur zum auslesen der Konfugration vom Typ S7-TCP/IP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP.Proj">
            <summary>
            Projektierte Verbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP.Route">
            <summary>
            Routing-Verbindungen
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7tcpip1">
            <summary>
            Structure to read the confuiguration parameter data of the connection type S7-TCP/IP
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip1.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip1.PlcNr">
            <summary>
            Logical mapping = virtual plc number
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip1.Credits">
            <summary>
            Maximum count of credits at L5
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip1.ConnType">
            <summary>
            Connectiontype (PG/OP/others)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip1.RemoteRackNr">
            <summary>
            Number of rack on which the plc is mounted
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip1.RemoteSlotNr">
            <summary>
            Number of slot on which the plc is mounted
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip1.PLCClass">
            <summary>
            Defines which plc type is used
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip1.Address">
            <summary>
            IP-Address or name of plc (Max 64 characters)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip1.Flags">
            <summary>
            Flags for further options, at the moment always 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip1.PortNr">
            <summary>
            Port number if PAT is needed
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip1.OwnPortNr">
            <summary>
            Your Portnumber if needed
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpip1.OwnAddress">
            <summary>
            Address of the network card
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_TCPIP_1">
            <summary>
            Struktur S7_TCPIP_1 für die Verbindungsparameter beim Gerätetyp S7-TCP/IP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.wDummy">
            <summary>
            Füllwort für S7CONN_IE_1-Kompatibilität
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.wPlcNr">
            <summary>
            Zum logischen Mappen = virtuelle PLC-Nummer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.bCredits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.bReserveL5">
            <summary>
            Ein Byte (8-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.wMaxPDUSize">
            <summary>
            Ein Wort (16-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.lReserveL5">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.bConnType">
            <summary>
            Verbindungsart (PG/OP/Sonstige)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.bRemRackNr">
            <summary>
            Nummer des Rack in welchem die SPS gesteckt ist
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.bRemSlotNr">
            <summary>
            Nummer des Slot in welchem die SPS gesteckt ist
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.PLCClass">
            <summary>
            Flag ob es sich um eine Verbindung zu einer 200er handelt
            Bzw PLCClass die angibt als Enum
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.lReserveL4">
            <summary>
            Drei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.Address">
            <summary>
            IP-Adresse bzw. Namen der SPS
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.Flags">
            <summary>
            Flags für weitere Optionen, derzeit immer 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.wPortNr">
            <summary>
            PortNr wenn PAT
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.wOwnPortNr">
            <summary>
            Eigene Portnummer wenn notwendig
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.dwOwnAddress">
            <summary>
            Adresse der gewünschten Netzwerkkarte
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_TCPIP_1.lReserve">
            <summary>
            Fünf Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S5tcpip">
            <summary>
            Structure to read the confuiguration data of the connection type S5-TCP/IP
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S5tcpip.Conn">
            <summary>
            Connections per device (/2 because 2 IP-connections are needed per connection)
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S5_TCPIP">
            <summary>
            Struktur zum auslesen der Konfugration vom Typ S5-TCP/IP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_TCPIP.Conn1">
            <summary>
            Verbindungen je Device (/2 da 2 IP-Verbindungen pro Verbindung notwendig sind)
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S5tcpip1">
            <summary>
            Structure to read the confuiguration parameter data of the connection type S5-TCP/IP
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S5tcpip1.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S5tcpip1.PlcNr">
            <summary>
            For further implementation
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S5tcpip1.NoRFC1006">
            <summary>s
            Flag if RFC 1006 is not used (not recommended)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S5tcpip1.Send">
            <summary>
            Settings for send
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S5tcpip1.Recv">
            <summary>
            Settings for receive
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S5tcpip1.Address">
            <summary>
            IP-Address or name of plc
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S5tcpip1.Flags">
            <summary>
            Flags for further options, at the moment always 0
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S5_TCPIP_1">
            <summary>
            Struktur S5_TCPIP_1 für die Verbindungsparameter beim Gerätetyp S5-TCP/IP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_TCPIP_1.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_TCPIP_1.lPlcNr">
            <summary>
            Für eine zukünftige Erweiterung vorgesehen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_TCPIP_1.lReserveL5">
            <summary>
            Zwei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_TCPIP_1.boNoRFC1006">
            <summary>
            Flag ob RFC 1006 nicht verwendet wird (nicht empfohlen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_TCPIP_1.Send">
            <summary>
            Einstellungen für Send
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_TCPIP_1.Recv">
            <summary>
            Einstellungen für Receive
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_TCPIP_1.lReserveL4">
            <summary>
            Drei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_TCPIP_1.Address">
            <summary>
            IP-Adresse bzw. Namen der SPS
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_TCPIP_1.Flags">
            <summary>
            Flags für weitere Optionen, derzeit immer 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_TCPIP_1.lReserveL2">
            <summary>
            Zwei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_TCPIP_1.lReserve">
            <summary>
            Fünf Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpipTia.Conn">
            <summary>
            Connections per device
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpipTia1.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpipTia1.PlcNr">
            <summary>
            Logical mapping = virtual plc number
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpipTia1.PLCClassEx">
            <summary>
            
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpipTia1.ConnTypeEx">
            <summary>
            
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpipTia1.Address">
            <summary>
            IP-Address or name of plc (Max 64 characters)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpipTia1.Flags">
            <summary>
            Flags for further options, at the moment always 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpipTia1.PortNr">
            <summary>
            Port number if PAT is needed
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpipTia1.OwnPortNr">
            <summary>
            Your Portnumber if needed
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7tcpipTia1.OwnAddress">
            <summary>
            Address of the network card
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.IP_Conn">
            <summary>
            Structure to read the send and receive parameter data of the connection type S5-TCP/IP
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.IP_Conn.LenLocal">
            <summary>
            Lenght of local TSAP
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.IP_Conn.Local">
            <summary>
            Local TSAP (max. 8 bytes user data, as INAT defines)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.IP_Conn.LenRemote">
            <summary>
            Lenght of remote TSAP
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.IP_Conn.Remote">
            <summary>
            Remote TSAP (max. 8 bytes userdata, as INAT defines)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.IP_Conn.PortNr">
            <summary>
            Port number for connections without RFC 1006
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.IPCONN">
            <summary>
            Struktur IPCONN für die Sende- und Empfangsparameter beim Gerätetyp S5-TCP/IP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.IPCONN.LenLoc">
            <summary>
            Länge des lokalen TSAP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.IPCONN.Local">
            <summary>
            Lokalen TSAP (max. 8 Bytes Nutzdaten laut INAT)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.IPCONN.LenRem">
            <summary>
            Länge des entfernten TSAP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.IPCONN.Rem">
            <summary>
            Entfernter TSAP (max. 8 Bytes Nutzdaten laut INAT)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.IPCONN.PortNr">
            <summary>
            Portnummer für Verbindungen ohne RFC 1006
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7Cif">
            <summary>
            Structure to read the confuiguration data of the connection type S7-CIF
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.Credits">
            <summary>
            Maximum count of credits at L5
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.ConnType">
            <summary>
            Connection type (PG/OP/others)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.UseFlashParas">
            <summary>
            Use the parameters defined in the CIF-Card
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.HSA">
            <summary>
            Highest station address on bus (Highest Station Address - HSA)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.PGAdr">
            <summary>
            Address of CIF-Card, only used if AGL4.S7_CIF.UseFlashParas == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.MPIBaud">
            <summary>
            Baudrate if bus, only used if AGL4.S7_CIF.UseFlashParas == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.Profil">
            <summary>
            Type of parameters (MPI/DP/STD/FMS/USR/PPI), only used if AGL4.S7_CIF.UseFlashParas == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.ttr">
            <summary>
            Target Token Rotation Time, only used if AGL4.S7_CIF.UseFlashParas == 0 and AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.tslot">
            <summary>
            Slot Time, only used if AGL4.S7_CIF.UseFlashParas == 0 and AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.tmin">
            <summary>
            Min. station delay responder, only used if AGL4.S7_CIF.UseFlashParas == 0 and AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.tmax">
            <summary>
            Max. station delay responder, only used if AGL4.S7_CIF.UseFlashParas == 0 and AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.tset">
            <summary>
            Setup Time, only used if AGL4.S7_CIF.UseFlashParas == 0 and AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.tquiet">
            <summary>
            Quiet Time, only used if AGL4.S7_CIF.UseFlashParas == 0 and AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.tgap">
            <summary>
            Gap Update Time, only used if AGL4.S7_CIF.UseFlashParas == 0 and AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.retries">
            <summary>
            Count of retries, only used if AGL4.S7_CIF.UseFlashParas == 0 and AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.L3Flags">
            <summary>
            Flags for advanced PPI etc., only used if AGL4.S7_CIF.UseFlashParas == 0 and AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cif.Flags">
            <summary>
            Flags for further options, at the moment always 0
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_CIF">
            <summary>
            Struktur S7_CIF für die Verbindungsparameter beim Gerätetyp S7-CIF
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.bCredits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.bInternal">
            <summary>
            Nur für internen Gebrauch
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.wMaxPDUSize">
            <summary>
            Ein Wort (16-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.lReserveL5">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.ConnType">
            <summary>
            Verbindungsart (PG/OP/Sonstige)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.lReserveL4">
            <summary>
            Zwei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.UseFlashParas">
            <summary>
            Die in der CIF-Karte eingestellten Parameter verwenden
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.HSA">
            <summary>
            Höchste Stationsadresse im Bus (Highest Station Address - HSA)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.PGAdr">
            <summary>
            Adresse der CIF-Karte im Bus, wird nur verwendet wenn AGL4.S7_CIF.UseFlashParas == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.NotUsed2">
            <summary>
            Aus Kompatibilität zum ACCON-NetLink-S7
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.MPIBaud">
            <summary>
            Baudrate des Busses, wird nur verwendet wenn AGL4.S7_CIF.UseFlashParas == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.Profil">
            <summary>
            Art der Parameter (MPI/DP/STD/FMS/USR/PPI), wird nur verwendet wenn AGL4.S7_CIF.UseFlashParas == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.ttr">
            <summary>
            Target Token Rotation Time, wird nur verwendet wenn AGL4.S7_CIF.UseFlashParas == 0 und AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.tslot">
            <summary>
            Slot Time, wird nur verwendet wenn AGL4.S7_CIF.UseFlashParas == 0 und AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.tmin">
            <summary>
            Min. station delay responder, wird nur verwendet wenn AGL4.S7_CIF.UseFlashParas == 0 und AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.tmax">
            <summary>
            Max. station delay responder, wird nur verwendet wenn AGL4.S7_CIF.UseFlashParas == 0 und AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.align">
            <summary>
            Nur zur Strukturausrichtung auf 4-Byte-Grenze
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.tset">
            <summary>
            Setup Time, wird nur verwendet wenn AGL4.S7_CIF.UseFlashParas == 0 und AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.tquiet">
            <summary>
            Quiet Time, wird nur verwendet wenn AGL4.S7_CIF.UseFlashParas == 0 und AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.tgap">
            <summary>
            Gap Update Time, wird nur verwendet wenn AGL4.S7_CIF.UseFlashParas == 0 und AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.retries">
            <summary>
            Anzahl Wiederholungen, wird nur verwendet wenn AGL4.S7_CIF.UseFlashParas == 0 und AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.L3Flags">
            <summary>
            Flags für Advanced PPI etc., wird nur verwendet wenn AGL4.S7_CIF.UseFlashParas == 0 und AGL4.S7_CIF.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.lReserveL3">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.BoardNr">
            <summary>
            Nummer der CIF-Karte
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.Flags">
            <summary>
            Flags für weitere Optionen, derzeit immer 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.lReserveL2">
            <summary>
            Sechs Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.lReserve">
            <summary>
            Vier Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIF.Proj">
            <summary>
            Projektierte Verbindungen, hier nur zur internen Verwendung
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.Credits">
            <summary>
            Maximum count of creadits at L5
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.ConnTyp">
            <summary>
            Type of connection (PG/OP/others)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.UseFlashParas">
            <summary>
            Use parameters from Flash
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.HSA">
            <summary>
            Default-HSA
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.PGAdr">
            <summary>
            Default-PG-Address
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.MPIBaud">
            <summary>
            Baudrate of MPI-Bus
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.Profil">
            <summary>
            Type of parameters (MPI/DP/STD/FMS/USR)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.ttr">
            <summary>
            Target Token Rotation Time
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.tslot">
            <summary>
            Slot time
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.tmin">
            <summary>
            min. station delay responder
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.tmax">
            <summary>
            max. station delay responder
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.tset">
            <summary>
            Setup time
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.tquiet">
            <summary>
            Quiet time
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.tgap">
            <summary>
            Gap update time
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.retries">
            <summary>
            Count of retries
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.L3Flags">
            <summary>
            Flags for advanced PPI etc.
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.BoardNr">
            <summary>
            Number of CifX-Board
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.ChannelNr">
            <summary>
            Number of used channel on the CifX-Board
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.Flags">
            <summary>
            Flags for further options, at the moment always 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.Proj">
            <summary>
            Configured connections
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Cifx.Route">
            <summary>
            Routed connections
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_CIFX">
            <summary>
            Struktur für die CIFX-Verbindungs-Parameter
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.bCredits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.bInternal">
            <summary>
            For internal use only 
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.wMaxPDUSize">
            <summary>
            Maximale PDU-Größe, 0 verwendet ACCON-AGLink-Standard-Einstellungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.lReserveL5">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.ConnTyp">
            <summary>
            Art der Verbindung (PG/OP/Sonstige)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.lReserveL4">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.UseFlashParas">
            <summary>
            Parameter aus dem Flash übernehmen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.HSA">
            <summary>
            Default-HSA
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.PGAdr">
            <summary>
            Default-PGAdresse
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.NotUsed2">
            <summary>
            Aus Kompatibilität zum NetLink
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.MPIBaud">
            <summary>
            Baudrate des MPI-Busses
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.Profil">
            <summary>
            Art der Parameter (MPI/DP/STD/FMS/USR)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.ttr">
            <summary>
            Target Token Rotation Time
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.tslot">
            <summary>
            Slot Time
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.tmin">
            <summary>
            min. station delay responder
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.tmax">
            <summary>
            max. station delay responder
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.align">
            <summary>
            Nur zur Strukturausrichtung auf 4 Bytegrenze
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.tset">
            <summary>
            Setup Time
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.tquiet">
            <summary>
            Quiet Time
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.tgap">
            <summary>
            Gap Update Time
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.retries">
            <summary>
            Anzahl Wiederholungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.L3Flags">
            <summary>
            Flags für Advanced PPI etc.
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.lReserveL3">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.BoardNr">
            <summary>
            Nummer des CifX-Boards
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.ChannelNr">
            <summary>
            Nummer des verwendeten Kanals auf dem CifX-Board
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.Flags">
            <summary>
            Flags für weitere Optionen (future extension, derzeit immer 0)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.lReserveL2">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.lReserve">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.Proj">
            <summary>
            Projektierte Verbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_CIFX.Route">
            <summary>
            Routing-Verbindungen
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7Netlink">
            <summary>
            Structure to read the confuiguration parameter data of the connection type S7-NetLink
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.Credits">
            <summary>
            Maximum count of credits at L5
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.ConnType">
            <summary>
            Type of connection (PG/OP/others)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.UseFlashParas">
            <summary>
            Use the parameters defined on ACCON-NetLink-S7
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.HSA">
            <summary>
            Highest Station Address on Bus (Highest Station Address - HSA), only used if AGL4.S7_NL.UseFlashParas == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.PGAdr">
            <summary>
            Address of ACCON-NetLink-S7, only used if AGL4.S7_NL.UseFlashParas == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.SingleMaster">
            <summary>
            Flag if PG/PC is the only Master on Bus, only used if AGL4.S7_NL.UseFlashParas == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.MPIBaud">
            <summary>
            Baudrate if Bus, only used if AGL4.S7_NL.UseFlashParas == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.Profil">
            <summary>
            Type of parameters (MPI/DP/STD/FMS/USR/PPI), only used if AGL4.S7_NL.UseFlashParas == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.ttr">
            <summary>
            Target Token Rotation Time, only used if AGL4.S7_NL.UseFlashParas == 0 and AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.tslot">
            <summary>
            Slot time, only used if AGL4.S7_NL.UseFlashParas == 0 and AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.tmin">
            <summary>
            Min. station delay responder, only used if AGL4.S7_NL.UseFlashParas == 0 and AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.tmax">
            <summary>
            Max. station delay responder, only used if AGL4.S7_NL.UseFlashParas == 0 and AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.tset">
            <summary>
            Setup Time, only used if AGL4.S7_NL.UseFlashParas == 0 and AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.tquiet">
            <summary>
            Quiet Time, only used if AGL4.S7_NL.UseFlashParas == 0 and AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.tgap">
            <summary>
            Gap Update Time, only used if AGL4.S7_NL.UseFlashParas == 0 and AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.retries">
            <summary>
            Count of retries, only used if AGL4.S7_NL.UseFlashParas == 0 and AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.L3Flags">
            <summary>
            Flags for Advanced PPI etc., only used if AGL4.S7_NL.UseFlashParas == 0 and AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.Address">
            <summary>
            IP-Address or name of PLC
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.Flags">
            <summary>
            Flags for further options, at the moment always 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.OwnPortNr">
            <summary>
            Your Portnumber if needed
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.OwnAddress">
            <summary>
            Address of the network card
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.Proj">
            <summary>
            Configured connections
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Netlink.Route">
            <summary>
            Routed connections
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_NL">
            <summary>
            Struktur S7_NL für die Verbindungsparameter beim Gerätetyp S7-NetLink
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.bCredits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.bReserveL5">
            <summary>
            Ein Byte (8-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.wMaxPDUSize">
            <summary>
            Ein Wort (16-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.lReserveL5">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.ConnType">
            <summary>
            Verbindungsart (PG/OP/Sonstige)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.lReserveL4">
            <summary>
            Drei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.UseFlashParas">
            <summary>
            Die im ACCON-NetLink-S7 eingestellten Parameter verwenden
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.HSA">
            <summary>
            Höchste Stationsadresse im Bus (Highest Station Address - HSA), wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.PGAdr">
            <summary>
            Adresse des ACCON-NetLink-S7 im Bus, wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.SingleMaster">
            <summary>
            Flag ob PG/PC einziger Master am Bus ist, wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.MPIBaud">
            <summary>
            Baudrate des Busses, wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.Profil">
            <summary>
            Art der Parameter (MPI/DP/STD/FMS/USR/PPI), wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.ttr">
            <summary>
            Target Token Rotation Time, wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0 und AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.tslot">
            <summary>
            Slot Time, wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0 und AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.tmin">
            <summary>
            Min. station delay responder, wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0 und AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.tmax">
            <summary>
            Max. station delay responder, wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0 und AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.align">
            <summary>
            Nur zur Strukturausrichtung auf 4-Byte-Grenze
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.tset">
            <summary>
            Setup Time, wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0 und AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.tquiet">
            <summary>
            Quiet Time, wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0 und AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.tgap">
            <summary>
            Gap Update Time, wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0 und AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.retries">
            <summary>
            Anzahl Wiederholungen, wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0 und AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.L3Flags">
            <summary>
            Flags für Advanced PPI etc., wird nur verwendet wenn AGL4.S7_NL.UseFlashParas == 0 und AGL4.S7_NL.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.lReserveL3">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.Address">
            <summary>
            IP-Adresse bzw. Namen der SPS
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.Flags">
            <summary>
            Flags für weitere Optionen, derzeit immer 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.wSpecialPN">
            <summary>
            Nur für internen Gebrauch
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.wOwnPortNr">
            <summary>
            Eigene Portnummer wenn notwendig
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.dwOwnAddress">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.lReserve">
            <summary>
            Sieben Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NL.Proj">
            <summary>
            Projektierte Verbindungen, hier nur zur internen Verwendung
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7NetlinkPRO">
            <summary>
            Structure to read the confuiguration parameter data of the connection type S7-NetLink-PRO
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.Credits">
            <summary>
            Maximum count of credits at L5
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.ConnType">
            <summary>
            Type of connection (PG/OP/others)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.AutoDetect">
            <summary>
            Automatically detect the busparameters
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.HSA">
            <summary>
            Highest Station Address - HSA, only used if AGL4.S7_NLPRO.AutoDetect == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.PGAdr">
            <summary>
            Address of ACCON-NetLink-PRO on bus, only used if AGL4.S7_NLPRO.AutoDetect == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.SingleMaster">
            <summary>
            Flag whether PG/PC is the only master on the bus, only used if AGL4.S7_NLPRO.AutoDetect == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.MPIBaud">
            <summary>
            Baudrate of bus, only used if AGL4.S7_NLPRO.AutoDetect == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.Profil">
            <summary>
            Type of parameters (MPI/DP/STD/FMS/USR/PPI), only used if AGL4.S7_NLPRO.AutoDetect == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.ttr">
            <summary>
            Target Token Rotation Time, only used if AGL4.S7_NLPRO.AutoDetect == 0 and AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.tslot">
            <summary>
            Slot time, only used if AGL4.S7_NLPRO.AutoDetect == 0 and AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.tmin">
            <summary>
            Min. station delay responder, only used if AGL4.S7_NLPRO.AutoDetect == 0 and AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.tmax">
            <summary>
            Max. station delay responder, only used if AGL4.S7_NLPRO.AutoDetect == 0 and AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.tset">
            <summary>
            Setup time, only used if AGL4.S7_NLPRO.AutoDetect == 0 and AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.tquiet">
            <summary>
            Quiet time, only used if AGL4.S7_NLPRO.AutoDetect == 0 and AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.tgap">
            <summary>
            Gap update time, only used if AGL4.S7_NLPRO.AutoDetect == 0 and AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.retries">
            <summary>
            Count of retries, only used if AGL4.S7_NLPRO.AutoDetect == 0 and AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.L3Flags">
            <summary>
            Flags for advanced PPI etc., only used if AGL4.S7_NLPRO.AutoDetect == 0 and AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.Address">
            <summary>
            IP-Adress or namen of PLC
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.Flags">
            <summary>
            Flags for further optionsat the moment always 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.OwnPortNr">
            <summary>
            Your Portnumber if needed
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.OwnAddress">
            <summary>
            Address of the network card
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.Proj">
            <summary>
            Configured connections
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkPRO.Route">
            <summary>
            Routed connections
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_NLPRO">
            <summary>
            Struktur S7_NLPRO für die Verbindungsparameter beim Gerätetyp S7-NetLink-PRO
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.bCredits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.bInternal">
            <summary>
            Nur für internen Gebrauch
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.wMaxPDUSize">
            <summary>
            Ein Wort (16-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.lReserveL5">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.ConnType">
            <summary>
            Verbindungsart (PG/OP/Sonstige)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.lReserveL4">
            <summary>
            Zwei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.AutoDetect">
            <summary>
            Die Busparameter automatisch ermitteln
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.HSA">
            <summary>
            Höchste Stationsadresse im Bus (Highest Station Address - HSA), wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.PGAdr">
            <summary>
            Adresse des ACCON-NetLink-PRO im Bus, wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.SingleMaster">
            <summary>
            Flag ob PG/PC einziger Master am Bus ist, wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.MPIBaud">
            <summary>
            Baudrate des Busses, wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.Profil">
            <summary>
            Art der Parameter (MPI/DP/STD/FMS/USR/PPI), wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.ttr">
            <summary>
            Target Token Rotation Time, wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0 und AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.tslot">
            <summary>
            Slot Time, wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0 und AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.tmin">
            <summary>
            Min. station delay responder, wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0 und AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.tmax">
            <summary>
            Max. station delay responder, wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0 und AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.align">
            <summary>
            Nur zur Strukturausrichtung auf 4-Byte-Grenze
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.tset">
            <summary>
            Setup Time, wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0 und AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.tquiet">
            <summary>
            Quiet Time, wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0 und AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.tgap">
            <summary>
            Gap Update Time, wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0 und AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.retries">
            <summary>
            Anzahl Wiederholungen, wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0 und AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.L3Flags">
            <summary>
            Flags für Advanced PPI etc., wird nur verwendet wenn AGL4.S7_NLPRO.AutoDetect == 0 und AGL4.S7_NLPRO.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.lReserveL3">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.Address">
            <summary>
            IP-Adresse bzw. Namen der SPS
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.Flags">
            <summary>
            Flags für weitere Optionen, derzeit immer 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.wSpecialPN">
            <summary>
            Nur für internen Gebrauch
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.wOwnPortNr">
            <summary>
            Ein Wort (16-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.dwOwnAddress">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.lReserve">
            <summary>
            Sieben Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLPRO.Proj">
            <summary>
            Projektierte Verbindungen, hier nur zur internen Verwendung
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7NetlinkUSB">
            <summary>
            Structure to read the confuiguration parameter data of the connection type S7-NetLink-USB
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.Credits">
            <summary>
            Maixmum count of creadits at L5
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.ConnType">
            <summary>
            Type of connection (PG/OP/others)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.AutoDetect">
            <summary>
            Automatically detect dusparameters
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.HSA">
            <summary>
            Highest Station Address - HSA, only used if AGL4.S7_NLUSB.AutoDetect == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.PGAdr">
            <summary>
            Address of ACCON-NetLink-USB on bus, only used if AGL4.S7_NLUSB.AutoDetect == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.SingleMaster">
            <summary>
            Flag whether PG/PC is the only master on the bus, only used if AGL4.S7_NLUSB.AutoDetect == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.MPIBaud">
            <summary>
            Baudrate of the bus, only used if AGL4.S7_NLUSB.AutoDetect == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.Profil">
            <summary>
            Type of parameters (MPI/DP/STD/FMS/USR/PPI), only used if AGL4.S7_NLUSB.AutoDetect == 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.ttr">
            <summary>
            Target Token Rotation Time, only used if AGL4.S7_NLUSB.AutoDetect == 0 and AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.tslot">
            <summary>
            Slot time, only used if AGL4.S7_NLUSB.AutoDetect == 0 and AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.tmin">
            <summary>
            Min. station delay responder, only used if AGL4.S7_NLUSB.AutoDetect == 0 and AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.tmax">
            <summary>
            Max. station delay responder, only used if AGL4.S7_NLUSB.AutoDetect == 0 and AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.tset">
            <summary>
            Setup Time, only used if AGL4.S7_NLUSB.AutoDetect == 0 and AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.tquiet">
            <summary>
            Quiet Time, only used if AGL4.S7_NLUSB.AutoDetect == 0 and AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.tgap">
            <summary>
            Gap Update Time, only used if AGL4.S7_NLUSB.AutoDetect == 0 and AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.retries">
            <summary>
            Count of retries, only used if AGL4.S7_NLUSB.AutoDetect == 0 and AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.L3Flags">
            <summary>
            Flags for Advanced PPI etc., only used if AGL4.S7_NLUSB.AutoDetect == 0 and AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.USBName">
            <summary>
            Name of ACCON-NetLink-USB-Treibers
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.Flags">
            <summary>
            Flags for further options, at the moment always 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.Proj">
            <summary>
            Configured connections
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7NetlinkUSB.Route">
            <summary>
            Routed connections
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_NLUSB">
            <summary>
            Struktur S7_NLUSB für die Verbindungsparameter beim Gerätetyp S7-NetLink-USB
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.bCredits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.bInternal">
            <summary>
            Nur für internen Gebrauch
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.wMaxPDUSize">
            <summary>
            Ein Wort (16-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.lReserveL5">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.ConnType">
            <summary>
            Verbindungsart (PG/OP/Sonstige)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.lReserveL4">
            <summary>
            Zwei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.AutoDetect">
            <summary>
            Die Busparameter automatisch ermitteln
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.HSA">
            <summary>
            Höchste Stationsadresse im Bus (Highest Station Address - HSA), wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.PGAdr">
            <summary>
            Adresse des ACCON-NetLink-USB im Bus, wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.SingleMaster">
            <summary>
            Flag ob PG/PC einziger Master am Bus ist, wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.MPIBaud">
            <summary>
            Baudrate des Busses, wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.Profil">
            <summary>
            Art der Parameter (MPI/DP/STD/FMS/USR/PPI), wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.ttr">
            <summary>
            Target Token Rotation Time, wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0 und AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.tslot">
            <summary>
            Slot Time, wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0 und AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.tmin">
            <summary>
            Min. station delay responder, wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0 und AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.tmax">
            <summary>
            Max. station delay responder, wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0 und AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.align">
            <summary>
            Nur zur Strukturausrichtung auf 4-Byte-Grenze
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.tset">
            <summary>
            Setup Time, wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0 und AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.tquiet">
            <summary>
            Quiet Time, wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0 und AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.tgap">
            <summary>
            Gap Update Time, wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0 und AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.retries">
            <summary>
            Anzahl Wiederholungen, wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0 und AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.L3Flags">
            <summary>
            Flags für Advanced PPI etc., wird nur verwendet wenn AGL4.S7_NLUSB.AutoDetect == 0 und AGL4.S7_NLUSB.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.lReserveL3">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.USBName">
            <summary>
            Namen des ACCON-NetLink-USB-Treibers
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.Flags">
            <summary>
            Flags für weitere Optionen, derzeit immer 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.wReserveL2">
            <summary>
            Zwei Worte (16-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.lReserveL2">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.lReserve">
            <summary>
            Sieben Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_NLUSB.Proj">
            <summary>
            Projektierte Verbindungen, hier nur zur internen Verwendung
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7Softing">
            <summary>
            Structure to read the confuiguration parameter data of the connection type S7-Softing
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.Credits">
            <summary>
            Maximum count of creadits at L5
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.ConnType">
            <summary>
            Type of connection (PG/OP/others)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.HSA">
            <summary>
            Highest Station Address - HSA
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.PGAdr">
            <summary>
            Addresse of PROFIboard on bus
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.MPIBaud">
            <summary>
            Baudrate of bus
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.Profil">
            <summary>
            Type of parameters (MPI/DP/STD/FMS/USR/PPI)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.ttr">
            <summary>
            Target Token Rotation Time, only used if AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.tslot">
            <summary>
            Slot Time, only used if AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.tmin">
            <summary>
            Min. station delay responder, only used if AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.tmax">
            <summary>
            Max. station delay responder, only used if AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.tset">
            <summary>
            Setup Time, only used if AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.tquiet">
            <summary>
            Quiet Time, wird only used if AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.tgap">
            <summary>
            Gap Update Time, only used if AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.retries">
            <summary>
            Count of retries, only used if AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.L3Flags">
            <summary>
            Flags for Advanced PPI etc., only used if AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.BoardNr">
            <summary>
            Number of PROFIboard
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.Flags">
            <summary>
            Flags for further options, at the moment always 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.Proj">
            <summary>
            Configured connections
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Softing.Route">
            <summary>
            Routed connections
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_SOFTING">
            <summary>
            Struktur S7_SOFTING für die Verbindungsparameter beim Gerätetyp S7-Softing
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.bCredits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.bInternal">
            <summary>
            Nur für internen Gebrauch
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.wMaxPDUSize">
            <summary>
            Ein Wort (16-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.lReserveL5">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.ConnType">
            <summary>
            Verbindungsart (PG/OP/Sonstige)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.lReserveL4">
            <summary>
            Zwei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.NotUsed1">
            <summary>
            Aus Kompatibilität zum ACCON-NetLink-PRO
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.HSA">
            <summary>
            Höchste Stationsadresse im Bus (Highest Station Address - HSA)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.PGAdr">
            <summary>
            Adresse des PROFIboard im Bus
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.NotUsed2">
            <summary>
            Aus Kompatibilität zum ACCON-NetLink-PRO
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.MPIBaud">
            <summary>
            Baudrate des Busses
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.Profil">
            <summary>
            Art der Parameter (MPI/DP/STD/FMS/USR/PPI)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.ttr">
            <summary>
            Target Token Rotation Time, wird nur verwendet wenn AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.tslot">
            <summary>
            Slot Time, wird nur verwendet wenn AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.tmin">
            <summary>
            Min. station delay responder, wird nur verwendet wenn AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.tmax">
            <summary>
            Max. station delay responder, wird nur verwendet wenn AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.align">
            <summary>
            Nur zur Strukturausrichtung auf 4-Byte-Grenze
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.tset">
            <summary>
            Setup Time, wird nur verwendet wenn AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.tquiet">
            <summary>
            Quiet Time, wird nur verwendet wenn AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.tgap">
            <summary>
            Gap Update Time, wird nur verwendet wenn AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.retries">
            <summary>
            Anzahl Wiederholungen, wird nur verwendet wenn AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.L3Flags">
            <summary>
            Flags für Advanced PPI etc., wird nur verwendet wenn AGL4.S7_SOFTING.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.lReserveL3">
            <summary>
            Ein Doppelwort (32-Bit-Wert) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.BoardNr">
            <summary>
            Nummer des PROFIboard
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.Flags">
            <summary>
            Flags für weitere Optionen, derzeit immer 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.lReserveL2">
            <summary>
            Sechs Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.lReserve">
            <summary>
            Vier Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_SOFTING.Proj">
            <summary>
            Projektierte Verbindungen, hier nur zur internen Verwendung
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7Pca">
            <summary>
            Structure to read the confuiguration parameter data of the connection type S7-MPI
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.TimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.Credits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.ConnType">
            <summary>
            Verbindungsart (PG/OP/Sonstige)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.HSA">
            <summary>
            Höchste Stationsadresse im Bus (Highest Station Address - HSA)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.PGAdr">
            <summary>
            Adresse der CIF-Karte im Bus
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.SingleMaster">
            <summary>
            Flag ob PG/PC einziger Master am Bus ist
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.MPIBaud">
            <summary>
            Baudrate des Busses
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.Profil">
            <summary>
            Art der Parameter (MPI/DP/STD/FMS/USR/PPI)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.ttr">
            <summary>
            Target Token Rotation Time, wird nur verwendet wenn AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.tslot">
            <summary>
            Slot Time, wird nur verwendet wenn AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.tmin">
            <summary>
            Min. station delay responder, wird nur verwendet wenn AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.tmax">
            <summary>
            Max. station delay responder, wird nur verwendet wenn AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.align">
            <summary>
            Nur zur Strukturausrichtung auf 4-Byte-Grenze
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.tset">
            <summary>
            Setup Time, wird nur verwendet wenn AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.tquiet">
            <summary>
            Quiet Time, wird nur verwendet wenn AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.tgap">
            <summary>
            Gap Update Time, wird nur verwendet wenn AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.retries">
            <summary>
            Anzahl Wiederholungen, wird nur verwendet wenn AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.PortNr">
            <summary>
            Index der seriellen Schnittstelle (0=COM1, 1=COM2, ...)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.MaxBaud">
            <summary>
            Maximal zu prüfende Baudrate
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.MinBaud">
            <summary>
            Minimal zu prüfende Baudrate
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.Flags">
            <summary>
            Flags für weitere Optionen, derzeit immer 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.Proj">
            <summary>
            Projektierte Verbindungen
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7Pca.Route">
            <summary>
            Routing-Verbindungen
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_PCA">
            <summary>
            Struktur S7_PCA für die Verbindungsparameter beim Gerätetyp S7-MPI
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.lTimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.bCredits">
            <summary>
            Maximum count of credits at L5
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.bReserveL5">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.wMaxPDUSize">
            <summary>
            max pdu size, 0 as ACCON-AGLink standard setting
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.lReserveL5">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.ConnType">
            <summary>
            Type of connection (PG/OP/others)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.lReserveL4">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.Reserved1">
            <summary>
            For compatibility to ACCON-NetLink
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.HSA">
            <summary>
            Highest Station Address - HSA
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.PGAdr">
            <summary>
            Address if CIF-Karte on bus
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.SingleMaster">
            <summary>
            Flag whether PG/PC is the only Master on bus
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.MPIBaud">
            <summary>
            Baudrate
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.Profil">
            <summary>
            Type of parameters (MPI/DP/STD/FMS/USR/PPI)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.ttr">
            <summary>
            Target Token Rotation Time, only used if AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.tslot">
            <summary>
            Slot Time, only used if AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.tmin">
            <summary>
            Min. station delay responder, only used if AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.tmax">
            <summary>
            Max. station delay responder, only used if AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.tset">
            <summary>
            Setup Time, only used if AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.tquiet">
            <summary>
            Quiet Time, only used if AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.tgap">
            <summary>
            Gap Update Time, only used if AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.retries">
            <summary>
            Count of retries, only used if AGL4.S7_PCA.Profil == USR
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.lReserveL3">
            <summary>
            Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.PortNr">
            <summary>
            Index of serial port (0=COM1, 1=COM2, ...)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.MaxBaud">
            <summary>
            Maximum baudrate to be checked
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.MinBaud">
            <summary>
            Minimal baudrate to be checked
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.Flags">
            <summary>
            Flags for further optionen, at the moment always 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.lReserveL2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.lReserve">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.Proj">
            <summary>
            Configured connections
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCA.Route">
            <summary>
            Routed connections
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.RK5123964R">
            <summary>
            Structure to read the confuiguration parameter data of the connection type RK 512
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RK5123964R.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RK5123964R.CPUNr">
            <summary>
            Number of CPU, valid values are 1-4 and 15
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RK5123964R.KMByte">
            <summary>
            Number of "Koppelmerkerbyte" , valid values are 0-255
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RK5123964R.KMBit">
            <summary>
            Number of bit of the "Koppelmerkerbyte", valid values are 0-7 and 15
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RK5123964R.PortNr">
            <summary>
            Index of serial port (0=COM1, 1=COM2, ...)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RK5123964R.Baud">
            <summary>
            Baudrate to be used
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RK5123964R.HighPrio">
            <summary>
            Sets priority to high
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.RK5123964R.UseBCC">
            <summary>
            Flag whether 3964R (with checksum) is used
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.RK512_3964R">
            <summary>
            Struktur RK512_3964R für die Verbindungsparameter beim Gerätetyp RK 512
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RK512_3964R.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RK512_3964R.CPUNr">
            <summary>
            Die Nummer der CPU, gültige Werte sind 1-4 und 15
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RK512_3964R.KMByte">
            <summary>
            Die Nummer des Koppelmerkerbytes, gültige Werte  0-255
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RK512_3964R.KMBit">
            <summary>
            Die Bitnummer des Koppelmerkerbytes, gültige Werte  0-7 und 15
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RK512_3964R.lReserveL5">
            <summary>
            Sechzehn Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RK512_3964R.PortNr">
            <summary>
            Index der seriellen Schnittstelle (0=COM1, 1=COM2, ...)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RK512_3964R.Baud">
            <summary>
            Zu verwendende Baudrate
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RK512_3964R.HighPrio">
            <summary>
            Flag ob hohe Priorität verwendet wird
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RK512_3964R.UseBCC">
            <summary>
            Flag ob 3964R (mit Prüfsumme) verwendet wird
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RK512_3964R.lReserveL2">
            <summary>
            Vier Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.RK512_3964R.lReserve">
            <summary>
            Vier Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S5AS511">
            <summary>
            Structure to read the confuiguration parameter data of the connection type S5-AS511
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S5AS511.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S5AS511.PortNr">
            <summary>
            Index of serial port (0=COM1, 1=COM2, ...)
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S5_AS511">
            <summary>
            Struktur S5_AS511 für die Verbindungsparameter beim Gerätetyp S5-AS511
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_AS511.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_AS511.lReserveL5">
            <summary>
            Drei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_AS511.PortNr">
            <summary>
            Index der seriellen Schnittstelle (0=COM1, 1=COM2, ...)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_AS511.lReserveL2">
            <summary>
            Drei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S5_AS511.lReserve">
            <summary>
            Vier Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7PlcDef">
            <summary>
            Bildet die Struktur S7_PLCDEF für eine virtuelle Lifelist beim Gerätetyp S7-PC/CP ab
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PlcDef.PlcNr">
            <summary>
            Virtual PLC-Number
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PlcDef.RemoteRackNr">
            <summary>
            Remote Rack-Number
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PlcDef.RemoteSlotNr">
            <summary>
            remote Slot-Number
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PlcDef.PLCClass">
            <summary>
            Type of used PLC (only TCP/P)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PlcDef.Address">
            <summary>
            TCP/IP- or ISO-Addres or name of PLC
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_PLCDEF">
            <summary>
            Struktur S7_PLCDEF für eine virtuelle Lifelist beim Gerätetyp S7-PC/CP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PLCDEF.lPlcNr">
            <summary>
            Virtuelle PLC-Nummer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PLCDEF.lReserveL5">
            <summary>
            
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PLCDEF.bRemRackNr">
            <summary>
            Entfernte Rack-Nummer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PLCDEF.bRemSlotNr">
            <summary>
            Entfernte Slot-Nummer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PLCDEF.PLCClass">
            <summary>
            Flag ob es sich um eine Verbindung zu einer 200er handelt (nur TCP/P)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PLCDEF.bReserveL4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PLCDEF.lReserveL4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PLCDEF.Address">
            <summary>
            TCP/IP- oder ISO-Adresse bzw. Namen der SPS
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PLCDEF.lReserveL2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PLCDEF.lReserve">
            <summary>
            
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7PCCP">
            <summary>
            Bildet die Struktur S7_PCCP für die Verbindungsparameter beim Gerätetyp S7-PC/CP ab
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PCCP.ConnName">
            <summary>
            Zugriffspfad der Applikation
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PCCP.TimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PCCP.Credits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PCCP.CPProto">
            <summary>
            Nur zur internen Verwendung, Typ der Kommunikationsschnittstelle, wird bei OpenDevice eingetragen
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PCCP.PlcTCPIP">
            <summary>
            Für Lifelist etc. um mit "normaler" AG-Nummer zugreifen zu können
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PCCP.PlcISO">
            <summary>
            Für Lifelist etc. um mit "normaler" AG-Nummer zugreifen zu können
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PCCP.ConnTyp">
            <summary>
            Art der Verbindung (PG/OP/Sonstige)      
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PCCP.Proj">
            <summary>
            Projektierte Verbindungen
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PCCP.Route">
            <summary>
            Routing-Verbindungen
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_PCCP">
            <summary>
            Struktur S7_PCCP für die Verbindungsparameter beim Gerätetyp S7-PC/CP
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.ConnName">
            <summary>
            Zugriffspfad der Applikation
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.bCredits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.bCPProto">
            <summary>
            Nur zur internen Verwendung, Typ der Kommunikationsschnittstelle, wird bei OpenDevice eingetragen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.wMaxPDUSize">
            <summary>
             Maximale PDU-Größe, 0 verwendet ACCON-AGLink-Standard-Einstellungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.lReserveL5">
            <summary>
            
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.PlcTCPIP1">
            <summary>
            Für Lifelist etc. um mit "normaler" AG-Nummer zugreifen zu können
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.PlcISO1">
            <summary>
            Für Lifelist etc. um mit "normaler" AG-Nummer zugreifen zu können
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.ConnTyp">
            <summary>
            Art der Verbindung (PG/OP/Sonstige)      
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.lReserveL4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.lReserve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.Proj">
            <summary>
            Projektierte Verbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PCCP.Route">
            <summary>
            Routing-Verbindungen
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7PPI">
            <summary>
            Bildet die Struktur S7_PPI für die Verbindungsparameter beim Gerätetyp S7-PPI ab
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PPI.TimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PPI.HSA">
            <summary>
            Höchste Stationsadresse im Bus (Highest Station Address - HSA)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PPI.PGAdr">
            <summary>
            Adresse der CIF-Karte im Bus
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PPI.PortNr">
            <summary>
            Index der seriellen Schnittstelle (0=COM1, 1=COM2, ...)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PPI.Baudrate">
            <summary>
            Zu verwendende Baudrate
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7PPI.Flags">
            <summary>
            Flags für weitere Optionen, derzeit immer 0
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4.S7_PPI">
            <summary>
            Struktur S7_PPI für die Verbindungsparameter beim Gerätetyp S7-PPI
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PPI.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PPI.lReserveL5">
            <summary>
            Zwei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PPI.lReserveL4">
            <summary>
            Drei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PPI.HSA">
            <summary>
            Höchste Stationsadresse im Bus (Highest Station Address - HSA)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PPI.PGAdr">
            <summary>
            Adresse der CIF-Karte im Bus
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PPI.lReserveL3">
            <summary>
            Zwei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PPI.PortNr">
            <summary>
            Index der seriellen Schnittstelle (0=COM1, 1=COM2, ...)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PPI.Baudrate">
            <summary>
            Zu verwendende Baudrate
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PPI.Flags">
            <summary>
            Flags für weitere Optionen, derzeit immer 0
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PPI.lReserveL2">
            <summary>
            Zwei Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_PPI.lReserve">
            <summary>
            Vier Doppelworte (32-Bit-Werte) als Reserve
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.LocInterfaceValid">
            <summary>
            Flag ob lokale Schnittstelleneinstellungen im Parametersatz gültig sind
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.LocCallParasValid">
            <summary>
            Flag ob die lokalen Rufparameter im Parametersatz gültig sind
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.RemCallParasValid">
            <summary>
            Flag ob die entfernten Rufparameter im Parametersatz gültig sind
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.TimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.Credits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.ConnTyp">
            <summary>
            Art der Verbindung (PG/OP/Sonstige)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.PortNr">
            <summary>
            Index der seriellen Schnittstelle (0=COM1, 1=COM2, ...)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.MaxBaud">
            <summary>
            Maximale Baudrate für Modem
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.DataBits">
            <summary>
            Datenbits:     7, 8
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.Parity">
            <summary>
            Parität:       AGL40_PARITY_NONE, AGL40_PARITY_EVEN, AGL40_PARITY_ODD
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.StopBits">
            <summary>
            Stopbits:      1, 2
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.Handshake">
            <summary>
            Handshakeart:  AGL40_HANDSHAKE_HW, AGL40_HANDSHAKE_SW, AGL40_HANDSHAKE_NONE
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.InitModem1">
            <summary>
            Initialisierungsstring 1 für Modem, dieser wird auf Fehlerrückmeldung geprüft (Max MDM_INIT_LEN Zeichen, alles drüber wird abgeschnitten
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.InitModem2">
            <summary>
            Initialisierungsstring 2 für Modem, dieser wird auf Fehlerrückmeldung geprüft (Max MDM_INIT_LEN Zeichen, alles drüber wird abgeschnitten
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.InitModem3">
            <summary>
            Initialisierungsstring 3 für Modem, dieser wird auf Fehlerrückmeldung geprüft (Max MDM_INIT_LEN Zeichen, alles drüber wird abgeschnitten
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.InitModem4">
            <summary>
            Initialisierungsstring 4 für Modem, dieser wird NICHT auf Fehlerrückmeldung geprüft (wegen AT+CPIN=xxxx) (Max MDM_INIT_LEN Zeichen, alles drüber wird abgeschnitten
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.DialType">
            <summary>
            Wählverfahren: leer für Standard, 'T' für Tonwahl, 'P' für Pulswahl
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.AutoAnswer">
            <summary>
            Anzahl Klingelzeichen bis zum Annehmen eines Anrufes: leer für Standard, '0' bis '9'
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.WaitForDialtone">
            <summary>
            Ob auf Wählton gewartet werden soll: leer für Standard, '4' für warten auf Wählton, '3' für Wählen ohne Wählton
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.DialRetries">
            <summary>
            Anzahl Wahlwiederholungen, muss zwischen 1 und 5 (einschließlich) liegen
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.RetryDelay">
            <summary>
            Wartezeit in Sekunden, muss zwischen 0 und 30 (einschließlich) liegen
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.MinDialUpTimeOut">
            <summary>
            Mindest-Timeout in Sekunden für Funktion AGL_DialUp 
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.Flags">
            <summary>
            Flags für weitere Optionen (future extension, derzeit immer 0)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.OwnNoCountry">
            <summary>
            Eigener Countrycode ohne internationalen Prefix, z.B. 49 für Deutschland, 41 für Schweiz ... (Max MDM_PHONE_NO_LEN Zeichen, alles drüber wird abgeschnitten)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.OwnNoCity">
            <summary>
            Eigene Stadtvorwahl, z.B. 0711 für Stuttgart, 07171 für Schwäbisch Gmünd ... (Max MDM_PHONE_NO_LEN Zeichen, alles drüber wird abgeschnitten)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.OwnNoLocal">
            <summary>
            Eigene Rufnummer, z.B. 9160 für DELTALOGIC GmbH (Max MDM_PHONE_NO_LEN Zeichen, alles drüber wird abgeschnitten)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.PreNoCountry">
            <summary>
            Amtsholung für internationale Verbindungen (Max MDM_PHONE_NO_LEN Zeichen, alles drüber wird abgeschnitten)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.PreNoCity">
            <summary>
            Amtsholung für nationale Verbindungen (Max MDM_PHONE_NO_LEN Zeichen, alles drüber wird abgeschnitten)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.PreNoLocal">
            <summary>
            Amtsholung für Ortsverbindungen (Max MDM_PHONE_NO_LEN Zeichen, alles drüber wird abgeschnitten)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.CallNoCountry">
            <summary>
            Countrycode der Zielnummer ohne internationalen Prefix (Max MDM_PHONE_NO_LEN Zeichen, alles drüber wird abgeschnitten)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.CallNoCity">
            <summary>
            Stadtvorwahl der Zielnummer (Max MDM_PHONE_NO_LEN Zeichen, alles drüber wird abgeschnitten)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.CallNoLocal">
            <summary>
            Rufnummer der Zielnummer (Max MDM_PHONE_NO_LEN Zeichen, alles drüber wird abgeschnitten)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.User">
            <summary>
            Benutzerkennung für Anruf bei Adapter (8 Byte Nutzdaten!) (Max MDM_PHONE_NO_LEN Zeichen, alles drüber wird abgeschnitten)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.Password">
            <summary>
            Passwort für Anruf bei Adapter (8 Byte Nutzdaten!) (Max MDM_PHONE_NO_LEN Zeichen, alles drüber wird abgeschnitten)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.CallBackNo">
            <summary>
            Nummer für den Rückruf (Max MDM_PHONE_NO_LEN Zeichen, alles drüber wird abgeschnitten)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.UseCallBackNo">
            <summary>
            Flag ob Rückrufnummer mitgegeben werden soll
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.Proj">
            <summary>
            Projektierte Verbindungen
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemAt.Route">
            <summary>
            Routing-Verbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.LocInterfaceValid">
            <summary>
            Flag ob lokale Schnittstelleneinstellungen im Parametersatz gültig sind
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.LocCallParasValid">
            <summary>
            Flag ob die lokalen Rufparameter im Parametersatz gültig sind
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.RemCallParasValid">
            <summary>
            Flag ob die entfernten Rufparameter im Parametersatz gültig sind
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.ReserveValid">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.bCredits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.bReserveL5">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.wMaxPDUSize">
            <summary>
            Maximale PDU-Größe, 0 verwendet ACCON-AGLink-Standard-Einstellungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.lReserveL5">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.ConnTyp">
            <summary>
            Art der Verbindung (PG/OP/Sonstige)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.lReserveL4">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.lReserveL3">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.PortNr">
            <summary>
            Index der seriellen Schnittstelle (0=COM1, 1=COM2, ...)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.MaxBaud">
            <summary>
            Maximale Baudrate für Modem
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.DataBits">
            <summary>
            Datenbits:     7, 8
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.Parity">
            <summary>
            Parität:       AGL40_PARITY_NONE, AGL40_PARITY_EVEN, AGL40_PARITY_ODD
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.StopBits">
            <summary>
            Stopbits:      1, 2
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.Handshake">
            <summary>
            Handshakeart:  AGL40_HANDSHAKE_HW, AGL40_HANDSHAKE_SW, AGL40_HANDSHAKE_NONE
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.InitModem1">
            <summary>
            Initialisierungsstring 1 für Modem, dieser wird auf Fehlerrückmeldung geprüft
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.InitModem2">
            <summary>
            Initialisierungsstring 2 für Modem, dieser wird auf Fehlerrückmeldung geprüft
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.InitModem3">
            <summary>
            Initialisierungsstring 3 für Modem, dieser wird auf Fehlerrückmeldung geprüft
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.InitModem4">
            <summary>
            Initialisierungsstring 4 für Modem, dieser wird NICHT auf Fehlerrückmeldung geprüft (wegen AT+CPIN=xxxx)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.DialType">
            <summary>
            Wählverfahren: leer für Standard, 'T' für Tonwahl, 'P' für Pulswahl
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.AutoAnswer">
            <summary>
            Anzahl Klingelzeichen bis zum Annehmen eines Anrufes: leer für Standard, '0' bis '9'
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.WaitForDialtone">
            <summary>
            Ob auf Wählton gewartet werden soll: leer für Standard, '4' für warten auf Wählton, '3' für Wählen ohne Wählton
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.dummy">
            <summary>
            Füllbyte ohne Bedeutung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.DialRetries">
            <summary>
            Anzahl Wahlwiederholungen, muss zwischen 1 und 5 (einschließlich) liegen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.RetryDelay">
            <summary>
            Wartezeit in Sekunden, muss zwischen 0 und 30 (einschließlich) liegen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.MinDialUpTimeOut">
            <summary>
            Mindest-Timeout in Sekunden für Funktion AGL_DialUp 
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.Flags">
            <summary>
            Flags für weitere Optionen (future extension, derzeit immer 0)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.lReserveL2">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.lReserve">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.OwnNoCountry">
            <summary>
            Eigener Countrycode ohne internationalen Prefix, z.B. 49 für Deutschland, 41 für Schweiz ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.OwnNoCity">
            <summary>
            Eigene Stadtvorwahl, z.B. 0711 für Stuttgart, 07171 für Schwäbisch Gmünd ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.OwnNoLocal">
            <summary>
            Eigene Rufnummer, z.B. 9160 für DELTALOGIC GmbH
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.PreNoCountry">
            <summary>
            Amtsholung für internationale Verbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.PreNoCity">
            <summary>
            Amtsholung für nationale Verbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.PreNoLocal">
            <summary>
            Amtsholung für Ortsverbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.ReserveLocPara">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.CallNoCountry">
            <summary>
            Countrycode der Zielnummer ohne internationalen Prefix
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.CallNoCity">
            <summary>
            Stadtvorwahl der Zielnummer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.CallNoLocal">
            <summary>
            Rufnummer der Zielnummer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.User">
            <summary>
            Benutzerkennung für Anruf bei Adapter (8 Byte Nutzdaten!)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.Password">
            <summary>
            Passwort für Anruf bei Adapter (8 Byte Nutzdaten!)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.CallBackNo">
            <summary>
            Nummer für den Rückruf
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.ReserveRemPara">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.UseCallBackNo">
            <summary>
            Flag ob Rückrufnummer mitgegeben werden soll
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.lReserveCall">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.Proj">
            <summary>
            Projektierte Verbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_AT.Route">
            <summary>
            Routing-Verbindungen
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.LocInterfaceValid">
            <summary>
            Flag whether the local port settings are valid
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.LocCallParasValid">
            <summary>
            Flag whether the local parameters are valid
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.RemCallParasValid">
            <summary>
            Flag whether the remote parameters are valid
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.TimeOut">
            <summary>
            Default timeout for communication (synchron)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.Credits">
            <summary>
            Maximum count of credits at L5
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.ConnTyp">
            <summary>
            Type of connection (PG/OP/others)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.ModemName">
            <summary>
            Name of modem (Max 128 characters, everything longer will be truncated)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.AutoAnswer">
            <summary>
            Count of bell signals until call will be accepted: empty for default or '0' - '9'
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.DialRetries">
            <summary>
            Count of dial retries, value must be between 1 to 5 
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.RetryDelay">
            <summary>
            Time to wat in seconds, value must be between 0 to 30
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.MinDialUpTimeOut">
            <summary>
            Minimal timeout for dial up in seconds (Function AGL4.DialUp)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.Flags">
            <summary>
            Flags for further options, at the moment always 0
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.OwnNoCountry">
            <summary>
            Your countrycode with internatilan prefix e.g. 49 for Germany, 41 for Switzerland ... (Max AGL4.MDM_PHONE_NO_LEN characters, everything longer will be truncated)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.OwnNoCity">
            <summary>
            Your area code, e.g. 0711 for Stuttgart, 07171 for Schwäbisch Gmünd ... (Max AGL4.MDM_PHONE_NO_LEN characters, everything longer will be truncated)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.OwnNoLocal">
            <summary>
            Your phone number, e.g. 9160 for DELTALOGIC GmbH (Max AGL4.MDM_PHONE_NO_LEN characters, everything longer will be truncated)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.PreNoCountry">
            <summary>
            "Amtsholung" for international calls (Max AGL4.MDM_PHONE_NO_LEN characters, everything longer will be truncated)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.PreNoCity">
            <summary>
            "Amtsholung" for national calls (Max AGL4.MDM_PHONE_NO_LEN characters, everything longer will be truncated)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.PreNoLocal">
            <summary>
            "Amtsholung" for local calls (Max AGL4.MDM_PHONE_NO_LEN characters, everything longer will be truncated)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.CallNoCountry">
            <summary>
            Countrycode of destination phone number without international prefix (Max AGL4.MDM_PHONE_NO_LEN characters, everything longer will be truncated)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.CallNoCity">
            <summary>
            Area code of destination phone number (Max AGL4.MDM_PHONE_NO_LEN characters, everything longer will be truncated)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.CallNoLocal">
            <summary>
            Phone number of destination (Max AGL4.MDM_PHONE_NO_LEN characters, everything longer will be truncated)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.User">
            <summary>
            User name for call at adapter (8 bytes if usable data!) (Max AGL4.MDM_PHONE_NO_LEN characters, everything longer will be trunacted)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.Password">
            <summary>
            Password for call at adapter (8 bytes of usable data!) (Max AGL4.MDM_PHONE_NO_LEN characters, everything longer will be truncated)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.CallBackNo">
            <summary>
            Phone number for callback (Max AGL4.MDM_PHONE_NO_LEN characters, everything longer will be truncated)
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.UseCallBackNo">
            <summary>
            Flag whether the callback number should be used
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.Proj">
            <summary>
            Configured connections
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7ModemTapi.Route">
            <summary>
            Routed connections
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.LocInterfaceValid">
            <summary>
            Flag ob lokale Schnittstelleneinstellungen im Parametersatz gültig sind
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.LocCallParasValid">
            <summary>
            Flag ob die lokalen Rufparameter im Parametersatz gültig sind
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.RemCallParasValid">
            <summary>
            Flag ob die entfernten Rufparameter im Parametersatz gültig sind
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.ReserveValid">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.lTimeOut">
            <summary>
            Standard-Timeout für Kommunikation (synchrone Abfragen)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.bCredits">
            <summary>
            Maxmimale Anzahl Credits auf L5-Ebene
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.bReserveL5">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.wMaxPDUSize">
            <summary>
            Maximale PDU-Größe, 0 verwendet ACCON-AGLink-Standard-Einstellungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.lReserveL5">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.ConnTyp">
            <summary>
            Art der Verbindung (PG/OP/Sonstige)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.lReserveL4">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.lReserveL3">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.ModemName">
            <summary>
            Name des Modems
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.AutoAnswer">
            <summary>
            Anzahl Klingelzeichen bis zum Annehmen eines Anrufes: leer für Standard, '0' bis '9'
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.bDummy">
            <summary>
            Füllbyte ohne Bedeutung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.wDummy">
            <summary>
            Füllwort ohne Bedeutung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.DialRetries">
            <summary>
            Anzahl Wahlwiederholungen, muss zwischen 1 und 5 (einschließlich) liegen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.RetryDelay">
            <summary>
            Wartezeit in Sekunden, muss zwischen 0 und 30 (einschließlich) liegen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.MinDialUpTimeOut">
            <summary>
            Mindest-Timeout in Sekunden für Funktion AGL_DialUp 
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.Flags">
            <summary>
            Flags für weitere Optionen (future extension, derzeit immer 0)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.lReserveL2">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.lReserve">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.OwnNoCountry">
            <summary>
            Eigener Countrycode ohne internationalen Prefix, z.B. 49 für Deutschland, 41 für Schweiz ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.OwnNoCity">
            <summary>
            Eigene Stadtvorwahl, z.B. 0711 für Stuttgart, 07171 für Schwäbisch Gmünd ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.OwnNoLocal">
            <summary>
            Eigene Rufnummer, z.B. 9160 für DELTALOGIC GmbH
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.PreNoCountry">
            <summary>
            Amtsholung für internationale Verbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.PreNoCity">
            <summary>
            Amtsholung für nationale Verbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.PreNoLocal">
            <summary>
            Amtsholung für Ortsverbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.ReserveLocPara">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.CallNoCountry">
            <summary>
            Countrycode der Zielnummer ohne internationalen Prefix
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.CallNoCity">
            <summary>
            Stadtvorwahl der Zielnummer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.CallNoLocal">
            <summary>
            Rufnummer der Zielnummer
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.User">
            <summary>
            Benutzerkennung für Anruf bei Adapter (8 Byte Nutzdaten!)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.Password">
            <summary>
            Passwort für Anruf bei Adapter (8 Byte Nutzdaten!)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.CallBackNo">
            <summary>
            Nummer für den Rückruf
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.ReserveRemPara">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.UseCallBackNo">
            <summary>
            Flag ob Rückrufnummer mitgegeben werden soll
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.lReserveCall">
            <summary>
            Man weiß ja nie ...
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.Proj">
            <summary>
            Projektierte Verbindungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_MODEM_TAPI.Route">
            <summary>
            Routing-Verbindungen
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7RedConn2.DevNr">
            <summary>
            Devicenumber of connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7RedConn2.PlcNr">
            <summary>
            PLC number of connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7RedConn2.RackNr">
            <summary>
            Racknumber of connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7RedConn2.SlotNr">
            <summary>
            Slotnumber of connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7RedConn2.KeepAliveTime">
            <summary>
            Time to keep connection alive while not communicating
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7RedConn2.RetryTime">
            <summary>
            Timespan to wait after a connection loss to start a reconnect retry
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN_2.DevNr">
            <summary>
            Device-Nummer der Verbindung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN_2.PlcNr">
            <summary>
            Plc-Nummer der Verbindung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN_2.RackNr">
            <summary>
            Rack-Nummer der Verbindung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN_2.SlotNr">
            <summary>
            Slot-Nummer der Verbindung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN_2.KeepAliveTime">
            <summary>
            Verbindungsüberwachungszeit der Verbindung (wenn keine Kommunikation stattfindet)
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN_2.RetryTime">
            <summary>
            Zeitintervall in dem nach Ausfall wein Wiederaufbau der Verbindung versucht wird
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN_2.Reserve">
            <summary>
            Man weiss ja nie ...
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7RedConn1.Conn">
            <summary>
            Connection data for the primary/secondary connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7RedConn1.Flags">
            <summary>
            Flags for connection dependend settings
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN_1.Conn1">
            <summary>
            Verbindungsdaten für die primäre/sekundäre Verbindung
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN_1.Flags">
            <summary>
            Flags für die verbindungsabhängigen Optionen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN_1.Reserve">
            <summary>
            Man weiss ja nie ...
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7RedConn.Conn">
            <summary>
            Connections per device
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.S7RedConn.Flags">
            <summary>
            Flags for common settings
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN.Conn1">
            <summary>
            Verbindungen je Device
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN.Flags">
            <summary>
            Flags für die allgemeinen Optionen
            </summary>
        </member>
        <member name="F:Accon.AGLink.AGL4.S7_RED_CONN.Reserve">
            <summary>
            Man weiss ja nie ...
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.Rfc1006Server.LocalTsap">
            <summary>
            Setzt oder gibt den lokalen TSAP zutück. Maximal 16 Zeichen, alles drüber wird abgeschnitten.
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.Rfc1006Server.RemoteTsap">
            <summary>
            Setzt oder gibt den entfernten TSAP zurück. Maximal 16 Zeichen, alles drüber wird abgeschnitten.
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGL4.Rfc1006Server.RemoteIpAddress">
            <summary>
            Setzt oder gibt die IP-Adresse der Gegenstelle zurück. Maximal 64 Zeichen, alles drüber wird abgeschnitten.
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGL4ConnectionFactory">
            <summary>
            Exposes severall ways to create a object for communication with a plc or nck
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.Create(Accon.AGLink.AsyncReportType)">
            <summary>
            Erstellt für das jeweilige Betriebssystem die richtige AGLink-Instanz
            </summary>
            <returns>Für das jeweilige Betriebssystem entsprechende AGLink-Schnittstelle</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateRfc(Accon.AGLink.AsyncReportType)">
            <summary>
            Erstellt für das jeweilige Betriebssystem die richtige RFC1006-Instanz
            </summary>
            <returns>Für das jeweilige Betriebssystem entsprechende RFC1006-Schnittstelle</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateTia(Accon.AGLink.AsyncReportType)">
            <summary>
            Erstellt für das jeweilige Betriebssystem die richtige TIA Zugriffsinstanz
            </summary>
            <returns>Für das jeweilige Betriebssystem entsprechende TIA-Zugriffsschnittstelle</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateSimotion(Accon.AGLink.AsyncReportType)">
            <summary>
            Erstellt für das jeweilige Betriebssystem die richtige Simotion Zugriffsinstanz
            </summary>
            <returns>Für das jeweilige Betriebssystem entsprechende Simotion-Zugriffsschnittstelle</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstanceAndConfigureTcpIp(System.Int32,System.UInt32,System.Int32,System.String,System.Int32,System.Int32@)">
            <summary>
            Sets the Device type to TYPE_S7_TCP_IP and updates the configuration information with the passed information. Afterwards creates a new instance of IAGLink4 for direct usage.
            The device information wil be configured for S7-300/S7-400 access.
            </summary>
            <param name="devNr">Device the should be used</param>
            <param name="entry">Index of subitem that should be used for configuration (0 - AGL4.MAX_PLCS-1 )</param>
            <param name="plcNr">Plc number</param>
            <param name="ip">IP address of used plc</param>
            <param name="timeout">Timeout for communication functions</param>
            <param name="result">Variable for success information</param>
            <returns>New instance of IAGLink4 or null if setting device information failed</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstanceAndConfigureTcpIp(System.Int32,System.UInt32,System.Int32,System.String,System.Int32,Accon.AGLink.AsyncReportType,System.Int32@)">
            <summary>
            Sets the Device type to TYPE_S7_TCP_IP and updates the configuration information with the passed information. Afterwards creates a new instance of IAGLink4 for direct usage.
            The device information wil be configured for S7-300/S7-400 access.
            </summary>
            <param name="devNr">Device the should be used</param>
            <param name="entry">Index of subitem that should be used for configuration (0 - AGL4.MAX_PLCS-1 )</param>
            <param name="plcNr">Plc number</param>
            <param name="ip">IP address of used plc</param>
            <param name="timeout">Timeout for communication functions</param>
            <param name="reportType">Mode for asynchronous communication</param>
            <param name="result">Variable for success information</param>
            <returns>New instance of IAGLink4 or null if setting device information failed</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstanceAndConfigureTcpIp(System.Int32,System.UInt32,System.Int32,System.String,System.Int32,System.Int32,Accon.AGLink.AsyncReportType,System.Int32@)">
            <summary>
            Sets the Device type to TYPE_S7_TCP_IP and updates the configuration information with the passed information. Afterwards creates a new instance of IAGLink4 for direct usage.
            The device information wil be configured for S7-300/S7-400 access.
            </summary>
            <param name="devNr">Device the should be used</param>
            <param name="entry">Index of subitem that should be used for configuration (0 - AGL4.MAX_PLCS-1 )</param>
            <param name="plcNr">Plc number</param>
            <param name="ip">IP address of used plc</param>
            <param name="port">Port to use for connection</param>
            <param name="timeout">Timeout for communication functions</param>
            <param name="reportType">Mode for asynchronous communication</param>
            <param name="result">Variable for success information</param>
            <returns>New instance of IAGLink4 or null if setting device information failed</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstanceAndConfigureTcpIp(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,Accon.AGLink.AGL4.PLC_Class,System.String,System.UInt16,System.Int32,Accon.AGLink.AsyncReportType,System.Int32@)">
            <summary>
            Sets the Device type to TYPE_S7_TCP_IP and updates the configuration information with the passed information. Afterwards creates a new instance of IAGLink4 for direct usage.
            </summary>
            <param name="devNr">Device the should be used</param>
            <param name="entry">Index of subitem that should be used for configuration (0 - AGL4.MAX_PLCS-1 )</param>
            <param name="plcNr">Plc number</param>
            <param name="rackNr">Rack number</param>
            <param name="slotNr">Slot number</param>
            <param name="plc_class">Type of plc to connect to</param>
            <param name="ip">IP address of used plc</param>
            <param name="port">Port to use for connection</param>
            <param name="timeout">Timeout for communication functions</param>
            <param name="reportType">Mode for asynchronous communication</param>
            <param name="result">Variable for success information</param>
            <returns>New instance of IAGLink4 or null if setting device information failed</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstanceAndConfigureTcpIpTia(System.Int32,System.UInt32,System.Int32,System.String,System.Int32,System.Int32@)">
            <summary>
            Sets the Device type to TYPE_S7_TCP_IP_TIA and updates the configuration information with the passed information. Afterwards creates a new instance of IAGLink4Tia for direct usage.
            </summary>
            <param name="devNr">Device the should be used</param>
            <param name="entry">Index of subitem that should be used for configuration (0 - AGL4.MAX_PLCS-1 )</param>
            <param name="plcNr">Plc number</param>
            <param name="ip">IP address of used plc</param>
            <param name="timeout">Timeout for communication functions</param>
            <param name="result">Variable for success information</param>
            <returns>New instance of IAGLink4Tia or null if setting device information failed</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstanceAndConfigureTcpIpTia(System.Int32,System.UInt32,System.Int32,System.String,System.Int32,Accon.AGLink.AsyncReportType,System.Int32@)">
            <summary>
            Sets the Device type to TYPE_S7_TCP_IP_TIA and updates the configuration information with the passed information. Afterwards creates a new instance of IAGLink4Tia for direct usage.
            </summary>
            <param name="devNr">Device the should be used</param>
            <param name="entry">Index of subitem that should be used for configuration (0 - AGL4.MAX_PLCS-1 )</param>
            <param name="plcNr">Plc number</param>
            <param name="ip">IP address of used plc</param>
            <param name="timeout">Timeout for communication functions</param>
            <param name="reportType">Mode for asynchronous communication</param>
            <param name="result">Variable for success information</param>
            <returns>New instance of IAGLink4Tia or null if setting device information failed</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstanceAndConfigureTcpIpTia(System.Int32,System.UInt32,System.Int32,System.String,System.UInt16,System.Int32,Accon.AGLink.AsyncReportType,System.Int32@)">
            <summary>
            Sets the Device type to TYPE_S7_TCP_IP_TIA and updates the configuration information with the passed information. Afterwards creates a new instance of IAGLink4Tia for direct usage.
            </summary>
            <param name="devNr">Device the should be used</param>
            <param name="entry">Index of subitem that should be used for configuration (0 - AGL4.MAX_PLCS-1 )</param>
            <param name="plcNr">Plc number</param>
            <param name="ip">IP address of used plc</param>
            <param name="port">Port to use for connection</param>
            <param name="timeout">Timeout for communication functions</param>
            <param name="reportType">Mode for asynchronous communication</param>
            <param name="result">Variable for success information</param>
            <returns>New instance of IAGLink5Tia or null if setting device information failed</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateRfcInstance">
            <summary>
            Create a  RFC1006 instance with default connection parameters
            </summary>
            <returns>New default communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateRfcInstance(Accon.AGLink.AsyncReportType)">
            <summary>
            Create a RFC1006 instance with default connection parameters
            </summary>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New default communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateRfcInstance(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a RFC1006 instance with the basic parameters
            </summary>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateRfcInstance(System.Int32,System.Int32,System.Int32,Accon.AGLink.AsyncReportType)">
            <summary>
            Creates a RFC1006 instance with the basic parameters
            </summary>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateTiaInstance">
            <summary>
            Create a  TIA instance with default connection parameters
            </summary>
            <returns>New default communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateTiaInstance(Accon.AGLink.AsyncReportType)">
            <summary>
            Create a TIA instance with default connection parameters
            </summary>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New default communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateTiaInstance(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a TIA instance with the basic parameters
            </summary>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateTiaInstance(System.Int32,System.Int32,System.Int32,Accon.AGLink.AsyncReportType)">
            <summary>
            Creates a TIA instance with the basic parameters
            </summary>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateSimotionInstance">
            <summary>
            Create a  SIMOTION instance with default connection parameters
            </summary>
            <returns>New default communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateSimotionInstance(Accon.AGLink.AsyncReportType)">
            <summary>
            Create a SIMOTION instance with default connection parameters
            </summary>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New default communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateSimotionInstance(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a SIMOTION instance with the basic parameters
            </summary>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateSimotionInstance(System.Int32,System.Int32,System.Int32,Accon.AGLink.AsyncReportType)">
            <summary>
            Creates a SIMOTION instance with the basic parameters
            </summary>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstance">
            <summary>
            Create a instance with default connection parameters
            </summary>
            <returns>New default communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstance(Accon.AGLink.AsyncReportType)">
            <summary>
            Create a instance with default connection parameters
            </summary>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New default communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstance(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a instance with the basic parameters
            </summary>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstance(System.Int32,System.Int32,System.Int32,Accon.AGLink.AsyncReportType)">
            <summary>
            Creates a instance with the basic parameters
            </summary>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a instance with a full parameter set
            </summary>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="rackNr">Number of the used rack</param>
            <param name="slotNr">Number of the used slot</param>
            <param name="timeout">Timeout to use</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Accon.AGLink.AsyncReportType)">
            <summary>
            Creates a instance with a full parameter set
            </summary>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="rackNr">Number of the used rack</param>
            <param name="slotNr">Number of the used slot</param>
            <param name="timeout">Timeout to use</param>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreatePersistentInstance(System.Object)">
            <summary>
            Creates a new default instance and saves it for global use
            </summary>
            <param name="key">Key with that you can obtain this object elsewhere in your application</param>
            <returns>New default communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreatePersistentInstance(System.Object,Accon.AGLink.AsyncReportType)">
            <summary>
            Creates a new default instance and saves it for global use
            </summary>
            <param name="key">Key with that you can obtain this object elsewhere in your application</param>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New default communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreatePersistentInstance(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a instance with the basic parameters and saves it for global use
            </summary>
            <param name="key">Key with that you can obtain this object elsewhere in your application</param>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreatePersistentInstance(System.Object,System.Int32,System.Int32,System.Int32,Accon.AGLink.AsyncReportType)">
            <summary>
            Creates a instance with the basic parameters and saves it for global use
            </summary>
            <param name="key">Key with that you can obtain this object elsewhere in your application</param>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreatePersistentInstance(System.Object,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a instance with a full parameter set and saves it for global use
            </summary>
            <param name="key">Key with that you can obtain this object elsewhere in your application</param>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="rackNr">Number of the used rack</param>
            <param name="slotNr">Number of the used slot</param>
            <param name="timeout">Timeout to use</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreatePersistentInstance(System.Object,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Accon.AGLink.AsyncReportType)">
            <summary>
            Creates a instance with a full parameter set and saves it for global use
            </summary>
            <param name="key">Key with that you can obtain this object elsewhere in your application</param>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="rackNr">Number of the used rack</param>
            <param name="slotNr">Number of the used slot</param>
            <param name="timeout">Timeout to use</param>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New parameterized communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstanceAndConnect(System.Int32,System.Int32,System.Int32,Accon.AGLink.ConnectionEventHandler,Accon.AGLink.ConnectionEventHandler,Accon.AGLink.ConnectionErrorEventHandler)">
            <summary>
            Creates a instance with the basic parameters and connects to the plc
            </summary>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <param name="onConnect">Callback for established connection (can be null)</param>
            <param name="onDisconnect">Callback for disconnected (can be null)</param>
            <param name="onConnError">Callback for connection errors (can be null)</param>
            <returns>New parameterized and connected communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreateInstanceAndConnect(System.Int32,System.Int32,System.Int32,Accon.AGLink.ConnectionEventHandler,Accon.AGLink.ConnectionEventHandler,Accon.AGLink.ConnectionErrorEventHandler,Accon.AGLink.AsyncReportType)">
            <summary>
            Creates a instance with the basic parameters and connects to the plc
            </summary>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <param name="onConnect">Callback for established connection (can be null)</param>
            <param name="onDisconnect">Callback for disconnected (can be null)</param>
            <param name="onConnError">Callback for connection errors (can be null)</param>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New parameterized and connected communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreatePersistentInstanceAndConnect(System.Object,System.Int32,System.Int32,System.Int32,Accon.AGLink.ConnectionEventHandler,Accon.AGLink.ConnectionEventHandler,Accon.AGLink.ConnectionErrorEventHandler)">
            <summary>
            Creates a instance with the basic parameters and connects to the plc
            </summary>
            <param name="key">Key with that you can obtain this object elsewhere in your application</param>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <param name="onConnect">Callback for established connection (can be null)</param>
            <param name="onDisconnect">Callback for disconnected (can be null)</param>
            <param name="onConnError">Callback for connection errors (can be null)</param>
            <returns>New parameterized and connected communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.CreatePersistentInstanceAndConnect(System.Object,System.Int32,System.Int32,System.Int32,Accon.AGLink.ConnectionEventHandler,Accon.AGLink.ConnectionEventHandler,Accon.AGLink.ConnectionErrorEventHandler,Accon.AGLink.AsyncReportType)">
            <summary>
            Creates a instance with the basic parameters and connects to the plc
            </summary>
            <param name="key">Key with that you can obtain this object elsewhere in your application</param>
            <param name="devNr">Number of the used device</param>
            <param name="plcNr">Number of the used plc</param>
            <param name="timeout">Timeout to use</param>
            <param name="onConnect">Callback for established connection (can be null)</param>
            <param name="onDisconnect">Callback for disconnected (can be null)</param>
            <param name="onConnError">Callback for connection errors (can be null)</param>
            <param name="reportType">Asynchronous communication type</param>
            <returns>New parameterized and connected communication object</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.GetByKey(System.Object)">
            <summary>
            Gets the saved communication object
            </summary>
            <param name="key">Key to obtain the object</param>
            <returns>The communication object if found, else null</returns>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.Remove(System.Object)">
            <summary>
            Removes and destroys the communication object
            </summary>
            <param name="key">The key of the saved object</param>
        </member>
        <member name="M:Accon.AGLink.AGL4ConnectionFactory.GetKeys">
            <summary>
            Gets all used keys of the saved communication objects
            </summary>
            <returns>List of all used keys</returns>
        </member>
        <member name="T:Accon.AGLink.AGL4_Class.AGL64">
            <summary>
            Leitet die Funktionen für AGLink 32-Bit durch
            </summary>
            <summary>
            Leitet die Funktionen für AGLink 64-Bit durch
            </summary>
            <summary>
            Leitet die Funktionen für AGLink 32-Bit durch
            </summary>
            <summary>
            Leitet die Funktionen für AGLink 64-Bit durch
            </summary>
        </member>
        <member name="T:Accon.AGLink.IAGLink4Simotion">
            <summary>
            Bietet verfügbaren Funktionen des AGLinks an, die verbindungsorientiert verwendet werden.
            </summary>
            <summary>
            Bietet verfügbaren Funktionen des AGLinks an, die verbindungsorientiert verwendet werden.
            </summary>
            <summary>
            Bietet verfügbaren Funktionen des AGLinks an, die verbindungsorientiert verwendet werden.
            </summary>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.Connect">
            <summary>
            Creates a connection to the parametrized plc
            </summary>
            <returns>true, if connection can be established, otherwise false</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.Disconnect">
            <summary>
            Disconnects from the plc
            </summary>
            <returns>true, if disconnection succeeds, otherwise false</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.StopReconnecting">
            <summary>
            Stops the automatic reconnect retries
            </summary> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.Config">
            <summary>
            This function calls the program "AGLink40_Config.EXE". This one must be in the search path or in the current working directory of your application.
            </summary>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.ConfigEx(System.String)">
            <summary>
            This function calls the program "AGLink40_Config.EXE". This one must be in the search path or in the current working directory of your application.
            </summary>
            <param name="commandLineArguments">Additional parameters for the program</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.GetErrorMsg(System.Int32)">
            <summary>
            This function determines the error text corresponding to the given error number, analyzing the content of the file »AGLink40_Error.TXT«. 
            This file will be loaded with the first call of the function. It will be searched in the directory which 
            contains AGLink40.DLL (resp. AGLink40_x64  or the Shared Object). With LoadErrorFile you can load an alternative file to get the error messages.
            </summary>
            <param name="errorCode">Error number</param>
            <returns>The error message</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.ReadMLFBNr(System.String@,System.Int32)">
            <summary>
            This function determines the MLFB-Number of the PLC with the connection that is given by the connection handle. A connection to the PLC must be already built up.
            </summary>
            <param name="mlfbNr">Pointer to the MLFB-structure (String with 21 signs)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.ReadMLFBNr(System.String@)">
            <summary>
            This function determines the MLFB-Number of the PLC with the connection that is given by the connection handle. A connection to the PLC must be already built up.
            </summary>
            <param name="mlfbNr">Pointer to the MLFB-structure (String with 21 signs)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.ReadMLFBNrEx(System.String@,System.UInt16@,System.UInt16@,System.Int32)">
            <summary>
            This function reads the MLFB number and the version numbers of the PLC and the interface connection from the PLC. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="mlfbNr">Variable for MLFB number</param>
            <param name="plcVer">Variable for PLC version</param>
            <param name="pGasVer">Variable for PG-AS interface connection</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.ReadMLFBNrEx(System.String@,System.UInt16@,System.UInt16@)">
            <summary>
            This function reads the MLFB number and the version numbers of the PLC and the interface connection from the PLC. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="mlfbNr">Variable for MLFB number</param>
            <param name="plcVer">Variable for PLC version</param>
            <param name="pGasVer">Variable for PG-AS interface connection</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.Simotion_ReadMixEx(Accon.AGLink.AGL4.SymbolicRW[],System.Int32)">
            <summary>
            Read data from the SIMOTION device
            </summary>
            <param name="buff">Pointer to 1-n SymboliCRW structures with a AccessHandle and read buffer information</param>
            <param name="timeout">Maximum time to wait for a response</param>
            <returns>>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.Simotion_ReadMixEx(Accon.AGLink.AGL4.SymbolicRW[])">
            <summary>
            Read data from the SIMOTION device
            </summary>
            <param name="buff">Pointer to 1-n SymboliCRW structures with a AccessHandle and read buffer information</param>
            <returns>>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.Simotion_WriteMixEx(Accon.AGLink.AGL4.SymbolicRW[],System.Int32)">
            <summary>
            Write data to the SIMOTION device
            </summary>
            <param name="buff">Pointer to 1-n SymboliCRW structures with a AccessHandle and write buffer information</param>
            <param name="timeout">Maximum time to wait for a response</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Simotion.Simotion_WriteMixEx(Accon.AGLink.AGL4.SymbolicRW[])">
            <summary>
            Write data to the SIMOTION device
            </summary>
            <param name="buff">Pointer to 1-n SymboliCRW structures with a AccessHandle and write buffer information</param>
            <returns></returns>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.Name">
            <summary>
            Name of the instance
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.ConnErrorMessage">
            <summary>
            Gets the last received error message
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.ConnErrorCode">
            <summary>
            Gets the last received error code
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.ConnNr">
            <summary>
            Gets the connection handle after establishing Connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.DevNr">
            <summary>
            Gets or sets the number of the device that should be used for establishing connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.PlcNr">
            <summary>
            Gets or sets the number of the plc to which the connection should be established
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.Timeout">
            <summary>
            Gets or sets the timeout that should be used for method calls
            <p/>&lt;= 0 = Asynchron
            <p/>&gt; 0 = Synchron
            <p/>where 1 defines to use the default timeout in synchron mode from the config file
            <p/>0 defines to use the default timeout in asynchronous mode from the config file
            <p/>-1 defines to wait infinite in asynchronous mode for a method call to end 
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.ReconnectRetries">
            <summary>
            Gets or sets the amount of reconnect attempts (-1 = infinite)
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.ReconnectTimeout">
            <summary>
            Gets or sets the time in ms that should be waited between reconnect retries
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.AutoReconnect">
            <summary>
            Gets or sets if the connection should be automatically reestablished after a connection error
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.AutoDisconnect">
            <summary>
            Gets or sets if the connection should be automtically closed after a connection error
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.Connected">
            <summary>
            Gets whether the instance did successfully connect to a plc and still wasn't disconnected by "Disconnect".
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.IsReconnecting">
            <summary>
            Gets if a reconnect loop is trying to reestablish a connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.SlotNr">
            <summary>
            Gets or sets the number of the slot where the plc is placed
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.RackNr">
            <summary>
            Gets or sets the number of the rack where the plc is placed
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.Connectionstate">
            <summary>
            Gets the state till that a connection hat been established
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Simotion.SuccessfullConnectstate">
            <summary>
            Gets or sets the state till that a connection will be established
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Simotion.OnConnected">
            <summary>
            Connection successfully established 
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Simotion.OnDisconnected">
            <summary>
            Disconnected successfully
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Simotion.OnConnectionErrorOccured">
            <summary>
            Connectionerror occurred or the connection could not be established
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Simotion.OnConnectAborted">
            <summary>
            The automatic reconnect loop has been canceled
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Simotion.OnReadMLFBCompleted">
            <summary>
            The asynchronous operation of ReadMLFB has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Simotion.OnReadMLFBExCompleted">
            <summary>
            The asynchronous operation of ReadMLFBEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Simotion.OnSimotionReadMixExCompleted">
            <summary>
            The asynchronous operation of Symbolic_ReadMixEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Simotion.OnSimotionWriteMixExCompleted">
            <summary>
            The asynchronous operation of Symbolic_WriteMixEx has been accomplished
            </summary>
        </member>
        <member name="T:Accon.AGLink.IAGLink4Tia">
            <summary>
            Bietet verfügbaren Funktionen des AGLinks an, die verbindungsorientiert verwendet werden.
            </summary>
            <summary>
            Bietet verfügbaren Funktionen des AGLinks an, die verbindungsorientiert verwendet werden.
            </summary>
            <summary>
            Bietet verfügbaren Funktionen des AGLinks an, die verbindungsorientiert verwendet werden.
            </summary>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.Connect">
            <summary>
            Creates a connection to the parametrized plc
            </summary>
            <returns>true, if connection can be established, otherwise false</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.Disconnect">
            <summary>
            Disconnects from the plc
            </summary>
            <returns>true, if disconnection succeeds, otherwise false</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.StopReconnecting">
            <summary>
            Stops the automatic reconnect retries
            </summary> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.Config">
            <summary>
            This function calls the program "AGLink40_Config.EXE". This one must be in the search path or in the current working directory of your application.
            </summary>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.ConfigEx(System.String)">
            <summary>
            This function calls the program "AGLink40_Config.EXE". This one must be in the search path or in the current working directory of your application.
            </summary>
            <param name="commandLineArguments">Additional parameters for the program</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.GetErrorMsg(System.Int32)">
            <summary>
            This function determines the error text corresponding to the given error number, analyzing the content of the file »AGLink40_Error.TXT«. 
            This file will be loaded with the first call of the function. It will be searched in the directory which 
            contains AGLink40.DLL (resp. AGLink40_x64  or the Shared Object). With LoadErrorFile you can load an alternative file to get the error messages.
            </summary>
            <param name="errorCode">Error number</param>
            <returns>The error message</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.ReadMLFBNr(System.String@,System.Int32)">
            <summary>
            This function determines the MLFB-Number of the PLC with the connection that is given by the connection handle. A connection to the PLC must be already built up.
            </summary>
            <param name="mlfbNr">Pointer to the MLFB-structure (String with 21 signs)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.ReadMLFBNr(System.String@)">
            <summary>
            This function determines the MLFB-Number of the PLC with the connection that is given by the connection handle. A connection to the PLC must be already built up.
            </summary>
            <param name="mlfbNr">Pointer to the MLFB-structure (String with 21 signs)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.ReadMLFBNrEx(System.String@,System.UInt16@,System.UInt16@,System.Int32)">
            <summary>
            This function reads the MLFB number and the version numbers of the PLC and the interface connection from the PLC. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="mlfbNr">Variable for MLFB number</param>
            <param name="plcVer">Variable for PLC version</param>
            <param name="pGasVer">Variable for PG-AS interface connection</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.ReadMLFBNrEx(System.String@,System.UInt16@,System.UInt16@)">
            <summary>
            This function reads the MLFB number and the version numbers of the PLC and the interface connection from the PLC. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="mlfbNr">Variable for MLFB number</param>
            <param name="plcVer">Variable for PLC version</param>
            <param name="pGasVer">Variable for PG-AS interface connection</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.Symbolic_ReadMixEx(Accon.AGLink.AGL4.SymbolicRW[],System.Int32@,System.Int32)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <param name="sError"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.Symbolic_ReadMixEx(Accon.AGLink.AGL4.SymbolicRW[],System.Int32)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.Symbolic_ReadMixEx(Accon.AGLink.AGL4.SymbolicRW[],System.Int32@)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <param name="sError"></param>
            <returns></returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.Symbolic_ReadMixEx(Accon.AGLink.AGL4.SymbolicRW[])">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <returns></returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.Symbolic_WriteMixEx(Accon.AGLink.AGL4.SymbolicRW[],System.Int32@,System.Int32)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <param name="sError"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.Symbolic_WriteMixEx(Accon.AGLink.AGL4.SymbolicRW[],System.Int32)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.Symbolic_WriteMixEx(Accon.AGLink.AGL4.SymbolicRW[],System.Int32@)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <param name="sError"></param>
            <returns></returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4Tia.Symbolic_WriteMixEx(Accon.AGLink.AGL4.SymbolicRW[])">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <returns></returns>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Tia.OnConnected">
            <summary>
            Connection successfully established 
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Tia.OnDisconnected">
            <summary>
            Disconnected successfully
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Tia.OnConnectionErrorOccured">
            <summary>
            Connectionerror occurred or the connection could not be established
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Tia.OnConnectAborted">
            <summary>
            The automatic reconnect loop has been canceled
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Tia.OnReadMLFBCompleted">
            <summary>
            The asynchronous operation of ReadMLFB has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Tia.OnReadMLFBExCompleted">
            <summary>
            The asynchronous operation of ReadMLFBEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Tia.OnSymbolicReadMixExCompleted">
            <summary>
            The asynchronous operation of Symbolic_ReadMixEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4Tia.OnSymbolicWriteMixExCompleted">
            <summary>
            The asynchronous operation of Symbolic_WriteMixEx has been accomplished
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.Name">
            <summary>
            Name of the instance
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.ConnErrorMessage">
            <summary>
            Gets the last received error message
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.ConnErrorCode">
            <summary>
            Gets the last received error code
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.ConnNr">
            <summary>
            Gets the connection handle after establishing Connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.DevNr">
            <summary>
            Gets or sets the number of the device that should be used for establishing connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.PlcNr">
            <summary>
            Gets or sets the number of the plc to which the connection should be established
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.Timeout">
            <summary>
            Gets or sets the timeout that should be used for method calls
            <p/>&lt;= 0 = Asynchron
            <p/>&gt; 0 = Synchron
            <p/>where 1 defines to use the default timeout in synchron mode from the config file
            <p/>0 defines to use the default timeout in asynchronous mode from the config file
            <p/>-1 defines to wait infinite in asynchronous mode for a method call to end 
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.ReconnectRetries">
            <summary>
            Gets or sets the amount of reconnect attempts (-1 = infinite)
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.ReconnectTimeout">
            <summary>
            Gets or sets the time in ms that should be waited between reconnect retries
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.AutoReconnect">
            <summary>
            Gets or sets if the connection should be automatically reestablished after a connection error
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.AutoDisconnect">
            <summary>
            Gets or sets if the connection should be automtically closed after a connection error
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.Connected">
            <summary>
            Gets whether the instance did successfully connect to a plc and still wasn't disconnected by "Disconnect".
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.IsReconnecting">
            <summary>
            Gets if a reconnect loop is trying to reestablish a connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.SlotNr">
            <summary>
            Gets or sets the number of the slot where the plc is placed
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.RackNr">
            <summary>
            Gets or sets the number of the rack where the plc is placed
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.Connectionstate">
            <summary>
            Gets the state till that a connection hat been established
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4Tia.SuccessfullConnectstate">
            <summary>
            Gets or sets the state till that a connection will be established
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.Name">
            <summary>
            Name of the instance
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.ConnErrorMessage">
            <summary>
            Gets the last received error message
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.ConnErrorCode">
            <summary>
            Gets the last received error code
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.ConnNr">
            <summary>
            Gets the connection handle after establishing Connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.DevNr">
            <summary>
            Gets or sets the number of the device that should be used for establishing connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.PlcNr">
            <summary>
            Gets or sets the number of the plc to which the connection should be established
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.Timeout">
            <summary>
            Gets or sets the timeout that should be used for method calls
            <p/>&lt;= 0 = Asynchron
            <p/>&gt; 0 = Synchron
            <p/>where 1 defines to use the default timeout in synchron mode from the config file
            <p/>0 defines to use the default timeout in asynchronous mode from the config file
            <p/>-1 defines to wait infinite in asynchronous mode for a method call to end 
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.ReconnectRetries">
            <summary>
            Gets or sets the amount of reconnect attempts (-1 = infinite)
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.ReconnectTimeout">
            <summary>
            Gets or sets the time in ms that should be waited between reconnect retries
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.AutoReconnect">
            <summary>
            Gets or sets if the connection should be automatically reestablished after a connection error
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.AutoDisconnect">
            <summary>
            Gets or sets if the connection should be automtically closed after a connection error
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.Connected">
            <summary>
            Gets whether the instance did successfully connect to a plc and still wasn't disconnected by "Disconnect".
            </summary>
        </member>
        <member name="P:Accon.AGLink.IConnection.IsReconnecting">
            <summary>
            Gets if a reconnect loop is trying to reestablish a connection
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGLink4">
            <summary>
            Führt asynchrone Kommunikation mit den konfigurierten AGs durch
            </summary>
        </member>
        <member name="M:Accon.AGLink.InternalBase.HandleErrorCode(Accon.AGLink.ErrorDO)">
            <summary>
            Prüft einen Fehlercode und löst bei einem Fehler ein Fehlerereignis aus, wenn keine Jobs mehr aktiv sind
            </summary>
            <param name="errordetails">Fehlerinformationen</param>
            <returns>True = Fehler aufgetreten, sonst False</returns>
        </member>
        <member name="P:Accon.AGLink.InternalBase.Name">
            <summary>
            Benennung der Instant, kann z.B. für die Speicherung der Instanz verwendet werden.
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.ConnErrorMessage">
            <summary>
            Tritt ein Fehler auf, kann hier der Fehlertext abgefragt werden.
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.ConnErrorCode">
            <summary>
            Tritt ein Fehler auf, kann hier der Fehlercode abgefragt werden.
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.ConnNr">
            <summary>
            Gibt das Verbindungshandle zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.DevNr">
            <summary>
            Setzt oder gibt die Gerätenummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.PlcNr">
            <summary>
            Setzt oder gibt die AG-Nummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.SlotNr">
            <summary>
            Setzt oder gibt die Slot-Nummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.RackNr">
            <summary>
            Setzt oder gibt die Rack-Nummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.Timeout">
            <summary>
            Setzt oder gibt den Funktions-Timeout zurück.
            <p/>kleiner oder gleich 0 = Asynchron
            <p/>größer 0 = Synchron
            <p/>wobei 1 bedeutet Standardtimeout synchron aus der Konfiguration nutzen
            <p/>0 bedeutet Standardtimeout asynchron aus der Konfiguration nutzen
            <p/>-1 bedeutet asynchron undendlich lange auf Funktionsende warten
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.ReconnectTimeout">
            <summary>
            Setzt oder gibt den Timeout, der zwischen zwei Verbindungsaufbauversuchen gewartet werden soll, zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.ReconnectRetries">
            <summary>
            Gibt oder setzt die Anzahl der Verbindungswiederaufbauversuche (-1 = Unendlich)
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.AutoReconnect">
            <summary>
            Setzt oder gibt an, ob automatisch ein Verbindungswiedreaufbau ausgeführt werden soll
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.AutoDisconnect">
            <summary>
            Setzt oder gibt an, ob bei einem Fehler, automatisch die Verbindung abgebaut werden soll
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.Connected">
            <summary>
            Gibt ein Flag zurück, welches angibt ob eine Verbindung besteht
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.IsReconnecting">
            <summary>
            Gibt an, ob gerade ein Verbindungswiederaufbauversucht läuft
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.Connectionstate">
            <summary>
            Gibt den Verbindungsstatus zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.InternalBase.SuccessfullConnectstate">
            <summary>
            Setzt oder gibt den Verbindungsstatus zurück, bis zu dem eine Verbindung aufgebaut werden soll
            </summary>
        </member>
        <member name="T:Accon.AGLink.IAGLink4">
            <summary>
            Bietet verfügbaren Funktionen des AGLinks an, die verbindungsorientiert verwendet werden.
            </summary>
            <summary>
            Teilklasse für Ereginisdefinitionen
            </summary>
            <summary>
            Partial interface für function definitions
            </summary> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetActiveJobCount(Accon.AGLink.FunctionType)">
            <summary>
            Gets the amount of open jobs for a specific function
            </summary>
            <param name="function">function for that the amount of open jobs will be calculated</param>
            <returns>Amount of open jobs</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.CreateCyclicReader">
            <summary>
            Creates a cyclic reader that continously reads data from a plc that supports cyclic reading
            </summary>
            <returns>cyclic reader</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.CreateCyclicNCKReader">
            <summary>
            Creates a cyclic reader that continously reads data from a nck
            </summary>
            <returns>cyclic reader</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Connect">
            <summary>
            Creates a connection to the parametrized plc
            </summary>
            <returns>true, if connection can be established, otherwise false</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Disconnect">
            <summary>
            Disconnects from the plc
            </summary>
            <returns>true, if disconnection succeeds, otherwise false</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.StopReconnecting">
            <summary>
            Stops the automatic reconnect retries
            </summary> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Config">
            <summary>
            This function calls the program "AGLink40_Config.EXE". This one must be in the search path or in the current working directory of your application.
            </summary>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ConfigEx(System.String)">
            <summary>
            This function calls the program "AGLink40_Config.EXE". This one must be in the search path or in the current working directory of your application.
            </summary>
            <param name="commandLineArguments">Additional parameters for the program</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.SetParas(System.Int32,System.Object)">
            <summary>
            By this function, settings for a device and a communication path will be set. If no XML file was loaded this will be done automatically  by this function.
            </summary>
            <param name="paraType">Type of the parameters</param>
            <param name="para">Pointer to the actual parameter</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetParas(System.Int32,System.Object@)">
            <summary>
            By calling this function, settings for a device and a communication path will be read. If no XML file was loaded this will be done automatically.
            </summary>
            <param name="ParaType">Type of the parameters </param>
            <param name="Para">Pointer to the actual parameter </param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.SetParas``1(System.Int32,``0)">
            <summary>
            Durch diese Funktion werden Einstellungen für ein Gerät und einen Kommu-nikationsweg gesetzt.
            </summary>
            <typeparam name="S">Der Typ der Parameterstruktur, die geschrieben werden soll</typeparam>
            <param name="paraType">Der Parametertyp, der geschrieben werden soll</param>
            <param name="para">Konkrete Struktur, in die geschrieben werden soll</param>
            <returns>AGL4_SUCCESS im Erfolgsfall. Eine Zahl kleiner 0 ist eine Fehlernummer</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetParas``1(System.Int32,``0@)">
            <summary>
            Durch diese Funktion werden Einstellungen für ein Gerät und einen Kommunikationsweg gelesen.
            </summary>
            <typeparam name="S">Der Typ der Parameterstruktur, die gelesen werden soll</typeparam>
            <param name="paraType">Der Parametertyp, der gelesen werden soll</param>
            <param name="para">Konkrete Struktur, in die gelesen wird.</param>
            <returns>AGL4_SUCCESS im Erfolgsfall. Eine Zahl kleiner 0 ist eine Fehlernummer</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.SetDevType(System.Int32)">
            <summary>
            This function sets the device type of the selected device. If no XML file was loaded this will be done automatically.
            </summary>
            <param name="devType">Device type to be set</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetDevType">
            <summary>
            This function returns the currently set device type of the given device. If no XML file was loaded this will be done automatically.
            </summary>
            <returns>&gt;=0	Currently selected type &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadParas(System.Int32)">
            <summary>
            This function reads the settings for a device type from a loaded XML file and puts them into an internal memory area.  
            If no XML file was loaded this will be done automatically.
            </summary>
            <param name="paraType">Device type to be read</param>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteParas(System.Int32)">
            <summary>
            This function writes the settings for a device type from the internal memory into the loaded XML file.
            </summary>
            <param name="paraType">Type of the parameter to be written</param> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDevice">
            <summary>
            With this function the complete device settings of the device,  containing the parameters from all connection 
            paths and the actual selected device typ, will be read from the registry and filled in an internal memory area.
            </summary>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteDevice">
            <summary>
            With this function the complete device settings of the device, containing the parameters from all connection 
            paths and the actual selected device typ, will be written from the internal memory area into the registry. 
            </summary>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadParasFromFile(System.String)">
            <summary>
            With this function the complete settings, containing the parameters from all connection paths and the actual 
            selected device type will be read from the called XML file into the internal memory area at once.
            </summary>
            <param name="fileName">Name of the XML file</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteParasToFile(System.String)">
            <summary>
            With this function the complete settings, containing the parameters from all connection paths and the actuall 
            selected device type will be written from the called XML file into the internal memory area at once.
            </summary>
            <param name="fileName">Name of the XML file</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WaitForJobEx(System.Int32,Accon.AGLink.AGL4.RESULT40@)">
            <summary>
            This function waits for the end of an asynchronous started job. 
            The function returns automatically the error code of the communication and fills the result structure.
            </summary>
            <param name="jobNr">The JobNo. out of the asynchronous call</param>
            <param name="result">Pointer to the result structure</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WaitForJob(System.Int32)">
            <summary>
            This function waits for the end of an asynchronous started job. The function returns automatically the error code of the communication.
            </summary>
            <param name="jobNr">The JobNo. out of the asynchronous call</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetErrorMsg(System.Int32)">
            <summary>
            This function determines the error text corresponding to the given error number, analyzing the content of the file »AGLink40_Error.TXT«. 
            This file will be loaded with the first call of the function. It will be searched in the directory which 
            contains AGLink40.DLL (resp. AGLink40_x64  or the Shared Object). With LoadErrorFile you can load an alternative file to get the error messages.
            </summary>
            <param name="errorCode">Error number</param>
            <returns>The error message</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetLifeList(System.Byte[],System.Int32)">
            <summary>
            This function gets the active and the passive member at the MPI-, PPI- or PROFIBUS when accessing a S7-Control. 
            The parameter List is an array with at least 128 entries (bytes). After every completition of the 
            function there is 0x10(=LL_NONE) for all members which aren’t there, 0x00(=LL_PASSIVE) for all member 
            which are passive, 0x30(=LL_ACTIVE) for all members which are active and 0x20(=LL_ACTIVE_READY) for all active 
            members which are ready to go on the Bus, in the respective Byte.
            </summary>
            <param name="list">Array for the Busmember (must be greater than 127 byte)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetLifeList(System.Byte[])">
            <summary>
            This function gets the active and the passive member at the MPI-, PPI- or PROFIBUS when accessing a S7-Control. 
            The parameter List is an array with at least 128 entries (bytes). After every completition of the 
            function there is 0x10(=LL_NONE) for all members which aren’t there, 0x00(=LL_PASSIVE) for all member 
            which are passive, 0x30(=LL_ACTIVE) for all members which are active and 0x20(=LL_ACTIVE_READY) for all active 
            members which are ready to go on the Bus, in the respective Byte.
            </summary>
            <param name="list">Array for the Busmember (must be greater than 127 byte)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetDirectPLC(System.Byte@,System.Int32)">
            <summary>
            This function determines the directly connected PLC on an access to the S7-Controls via PC or TS-Adapter. In other 
            communications you always receive the PLC-Number 255 because a directly connected PLC can’t determined.
            Attention: 
            This function only returns valid values if the device type is ACCON-AGLink S7 seriell or ACCON-AGLink S7 seriall/TS 
            (Types: TYPE_S7_MPI_SER, TYPE_s7_TS_AT and TYPE_S7_TS_TAPI ). In all other cases PLC-Number 255 will be returned.
            </summary>
            <param name="plc">Variable for the PLC-Number</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetDirectPLC(System.Byte@)">
            <summary>
            This function determines the directly connected PLC on an access to the S7-Controls via PC or TS-Adapter. In other 
            communications you always receive the PLC-Number 255 because a directly connected PLC can’t determined.
            Attention: 
            This function only returns valid values if the device type is ACCON-AGLink S7 seriell or ACCON-AGLink S7 seriall/TS 
            (Types: TYPE_S7_MPI_SER, TYPE_s7_TS_AT and TYPE_S7_TS_TAPI ). In all other cases PLC-Number 255 will be returned.
            </summary>
            <param name="plc">Variable for the PLC-Number</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadMaxPacketSize">
            <summary>
            This function returns the maximum packet size of the of the PLC communication in Bytes. Possible values are
            112 Bytes (in general at S7-200-controller of the first generation 21x), 
            240 Bytes (S7-200-controller of the new generation S7-22x and at S7-300-controller except S7-318), 
            480 Bytes (in general at S7-318 and S7-400-controller) or
            960 Bytes (right now this is only available on a S7-compatible controller). 
            The connection to the PLC must be established. The packet size can be a token for the efficiency of the
            communication interface. But a bigger packet size does not necessarily mean that the data transfer is faster. 
            It also depends on the PLC, putting the datapackages together and sending them via the connection. To compare the 
            communication performance of different PLC’s you do fine if you use the program »AGLink40_Performance.exe« of the ACCON-AGLink examples.
            </summary>
            <returns>&gt;= 0	The maximum package size of the communication &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetRedConnStateMsg(Accon.AGLink.AGL4.RED_CONN_STATE@,System.Int32)">
            <summary>
            Use this function to get a message if the connection state of a redundand connected PLC or 
            the operating state of  at least one PLC in a H-CPU-system is changing. In general this 
            function will be called asynchronous and with timeout = INFINITE.  ACCON-AGLink will inform you if something 
            changes at the redundand connection. The function will be pending, until a change will occur!
            </summary>
            <param name="state">Pointer to the variable for the state of the connection</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetRedConnStateMsg(Accon.AGLink.AGL4.RED_CONN_STATE@)">
            <summary>
            Use this function to get a message if the connection state of a redundand connected PLC or 
            the operating state of  at least one PLC in a H-CPU-system is changing. In general this 
            function will be called asynchronous and with timeout = INFINITE.  ACCON-AGLink will inform you if something 
            changes at the redundand connection. The function will be pending, until a change will occur!
            </summary>
            <param name="state">Pointer to the variable for the state of the connection</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadOpState(System.Int32@,System.Int32)">
            <summary>
            With this function you can request the operating state of the PLC. There must be a connection to 
            the desired PLC. The current operating state will be returned in State using the following 
            constants: OPSTATE_STOP, OPSTATE_START, OPSTATE_RUN and OPSTATE_UNKNOWN.
            </summary>
            <param name="state">Variable for the operating state of the PLC </param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadOpState(System.Int32@)">
            <summary>
            With this function you can request the operating state of the PLC. There must be a connection to 
            the desired PLC. The current operating state will be returned in State using the following 
            constants: OPSTATE_STOP, OPSTATE_START, OPSTATE_RUN and OPSTATE_UNKNOWN.
            </summary>
            <param name="state">Variable for the operating state of the PLC </param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadOpStateEx(System.Int32@,System.Int32)">
            <summary>
            With this function you can request the current operating status of the PLC. A connection to that 
            PLC must already be established. The current operational status will be returned in State. You will get one 
            of the OPSTATEEX_xxx-Constants. With this you can e.g. recognize if there is a fault-tolerant S7-400H-System trying to link up.
            </summary>
            <param name="state">Variable for the operational status</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadOpStateEx(System.Int32@)">
            <summary>
            With this function you can request the current operating status of the PLC. A connection to that 
            PLC must already be established. The current operational status will be returned in State. You will get one 
            of the OPSTATEEX_xxx-Constants. With this you can e.g. recognize if there is a fault-tolerant S7-400H-System trying to link up.
            </summary>
            <param name="state">Variable for the operational status</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetPLCStartOptions(System.Int32@,System.Int32)">
            <summary>
            With this function you can determine whether the connected CPU supports a restart, a 
            softboot or a cold restart. The parameter StartOptions contains the Bitflags (S7_OPT_WARMSTART, S7_OPT_COLDSTART, S7_OPT_RESUME). 
            If you want to call that function there must be a connection to the PLC.
            </summary>
            <param name="startOptions">Variable for the possible startvalues</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetPLCStartOptions(System.Int32@)">
            <summary>
            With this function you can determine whether the connected CPU supports a restart, a 
            softboot or a cold restart. The parameter StartOptions contains the Bitflags (S7_OPT_WARMSTART, S7_OPT_COLDSTART, S7_OPT_RESUME). 
            If you want to call that function there must be a connection to the PLC.
            </summary>
            <param name="startOptions">Variable for the possible startvalues</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLCStop(System.Int32)">
            <summary>
            This function sets the state of the PLC to Stop. A connection to the PLC must be already built up.
            </summary>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLCStop">
            <summary>
            This function sets the state of the PLC to Stop. A connection to the PLC must be already built up.
            </summary>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLCStart(System.Int32)">
            <summary>
            This function sets the state of the PLC to Run by a restart. A connection to the PLC must already be built up.
            </summary>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLCStart">
            <summary>
            This function sets the state of the PLC to Run by a restart. A connection to the PLC must already be built up.
            </summary>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLCResume(System.Int32)">
            <summary>
            This function sets the PLC to Run by a cold restart. This function isn’t available for all controllers in 
            all PLC-parameterizations and may therefore return an error. You can test whether the start 
            will be supported by GetPLCStartOptions in advance. A connection to the PLC must be already built up.
            </summary>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLCResume">
            <summary>
            This function sets the PLC to Run by a cold restart. This function isn’t available for all controllers in 
            all PLC-parameterizations and may therefore return an error. You can test whether the start 
            will be supported by GetPLCStartOptions in advance. A connection to the PLC must be already built up.
            </summary>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLCColdStart(System.Int32)">
            <summary>
            This function sets the AG to Run by a cold start. This function isn’t available for 
            all controllers in all PLC- parameterizations and may therefore return an error. You can test 
            whether the start will be supported by GetPLCStartOptions in advance. A connection to the PLC must be already built up.
            </summary>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLCColdStart">
            <summary>
            This function sets the AG to Run by a cold start. This function isn’t available for 
            all controllers in all PLC- parameterizations and may therefore return an error. You can test 
            whether the start will be supported by GetPLCStartOptions in advance. A connection to the PLC must be already built up.
            </summary>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.IsHPLC(System.Int32@,System.Int32)">
            <summary>
            With this function you can determine if you are connected to fault-tolerant system (H-CPU). A connection to the PLC must be already built up.
            </summary>
            <param name="isHplc">Variable for the H-CPU-Flag</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.IsHPLC(System.Int32@)">
            <summary>
            With this function you can determine if you are connected to fault-tolerant system (H-CPU). A connection to the PLC must be already built up.
            </summary>
            <param name="isHplc">Variable for the H-CPU-Flag</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.HPLCStop(System.Int32,System.Int32)">
            <summary>
            With this function you can stop the CPU of a fault-tolerant system (H-CPU). A connection to the PLC must be already built up. 
            </summary>
            <param name="cpuNr">The number of the CPU to stop</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.HPLCStop(System.Int32)">
            <summary>
            With this function you can stop the CPU of a fault-tolerant system (H-CPU). A connection to the PLC must be already built up. 
            </summary>
            <param name="cpuNr">The number of the CPU to stop</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.HPLCStart(System.Int32,System.Int32)">
            <summary>
            With this function you can start a CPU of a fault-tolerant system (H-CPU) by a restart. A connection to this PLC must be already built up. 
            </summary>
            <param name="cpuNr">The number of the CPU which should be startet</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.HPLCStart(System.Int32)">
            <summary>
            With this function you can start a CPU of a fault-tolerant system (H-CPU) by a restart. A connection to this PLC must be already built up. 
            </summary>
            <param name="cpuNr">The number of the CPU which should be startet</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.HPLCColdStart(System.Int32,System.Int32)">
            <summary>
            With this function you can start a CPU of a fault-tolerant system (H-CPU) by a cold start. A connection to this PLC must be already built up. 
            </summary>
            <param name="cpuNr">The number of the CPU which should be startet</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.HPLCColdStart(System.Int32)">
            <summary>
            With this function you can start a CPU of a fault-tolerant system (H-CPU) by a cold start. A connection to this PLC must be already built up. 
            </summary>
            <param name="cpuNr">The number of the CPU which should be startet</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetPLCClock(Accon.AGLink.AGL4.TOD@,System.Int32)">
            <summary>
            This function reads the system time of the PLC. A connection to the PLC must be already built up. 
            </summary>
            <param name="tod">Pointer to the TimeOfDay-Structure</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetPLCClock(Accon.AGLink.AGL4.TOD@)">
            <summary>
            This function reads the system time of the PLC. A connection to the PLC must be already built up. 
            </summary>
            <param name="tod">Pointer to the TimeOfDay-Structure</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.SetPLCClock(Accon.AGLink.AGL4.TOD@,System.Int32)">
            <summary>
            This function sets the system time of the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="tod">Pointer to the TimeOfDay-structure</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.SetPLCClock(Accon.AGLink.AGL4.TOD@)">
            <summary>
            This function sets the system time of the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="tod">Pointer to the TimeOfDay-structure</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.SyncPLCClock(System.Int32)">
            <summary>
            With this function you can set the Clock of the PLC to the same value as the Clock of the PC. A connection to the PLC must be already built up.
            </summary>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.SyncPLCClock">
            <summary>
            With this function you can set the Clock of the PLC to the same value as the Clock of the PC. A connection to the PLC must be already built up.
            </summary>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadMLFBNr(System.String@,System.Int32)">
            <summary>
            This function determines the MLFB-Number of the PLC with the connection that is given by the connection handle. A connection to the PLC must be already built up.
            </summary>
            <param name="mlfbNr">Pointer to the MLFB-structure (String with 21 signs)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadMLFBNr(System.String@)">
            <summary>
            This function determines the MLFB-Number of the PLC with the connection that is given by the connection handle. A connection to the PLC must be already built up.
            </summary>
            <param name="mlfbNr">Pointer to the MLFB-structure (String with 21 signs)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadMLFBNrEx(System.String@,System.UInt16@,System.UInt16@,System.Int32)">
            <summary>
            This function reads the MLFB number and the version numbers of the PLC and the interface connection from the PLC. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="mlfbNr">Variable for MLFB number</param>
            <param name="plcVer">Variable for PLC version</param>
            <param name="pGasVer">Variable for PG-AS interface connection</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadMLFBNrEx(System.String@,System.UInt16@,System.UInt16@)">
            <summary>
            This function reads the MLFB number and the version numbers of the PLC and the interface connection from the PLC. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="mlfbNr">Variable for MLFB number</param>
            <param name="plcVer">Variable for PLC version</param>
            <param name="pGasVer">Variable for PG-AS interface connection</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadPLCInfo(Accon.AGLink.AGL4.PLCINFO@,System.Int32)">
            <summary>
            With this function you can read the number of inputs, outputs, flags, timers and counters from the connected CPU. 
            A connection to the PLC must be already built up.
            Attention: 
            This function is not available for all controls. This works only on controllers of the S7-300 and S7-400 family. 
            You may therefore receive AGL40_FUNC_NOT_IMPLEMENTED as function result.
            </summary>
            <param name="plcInfo">Buffer for the values</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadPLCInfo(Accon.AGLink.AGL4.PLCINFO@)">
            <summary>
            With this function you can read the number of inputs, outputs, flags, timers and counters from the connected CPU. 
            A connection to the PLC must be already built up.
            Attention: 
            This function is not available for all controls. This works only on controllers of the S7-300 and S7-400 family. 
            You may therefore receive AGL40_FUNC_NOT_IMPLEMENTED as function result.
            </summary>
            <param name="plcInfo">Buffer for the values</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadCycleTime(Accon.AGLink.AGL4.CYCLETIME@,System.Int32)">
            <summary>
            This function reads the current, minimal and maximal cycle time of the PLC. There must be a connection to the PLC.
            </summary>
            <param name="cycleTime">Pointer to the CYCLETIME-structure</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadCycleTime(Accon.AGLink.AGL4.CYCLETIME@)">
            <summary>
            This function reads the current, minimal and maximal cycle time of the PLC. There must be a connection to the PLC.
            </summary>
            <param name="cycleTime">Pointer to the CYCLETIME-structure</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadProtLevel(Accon.AGLink.AGL4.PROTLEVEL@,System.Int32)">
            <summary>
            This function reads the current protection level, the parameterised protection level, the active protection level 
            of the CPU, the setting of the mode switch and the setting of the starting switch from the given PLC. 
            A connection to the PLC must be already built up.
            Possible values are 1, 2 or 3 for the protection level which is set by the mode switch. 
            For the parameterized protection level possible values are 0, 1, 2 or 3. 0 means: no password set or parameterized 
            protection level is invalid. The values of the mode switch mean: 1 =RUN, 2 = RUN-P, 3 = STOP, 4= MRES and 0 = undefined or indeterminate. 
            The values of the starting switch means 1 = CRST, 2 0 WRST and 0 =undefined, not available or nonexistent.
            </summary>
            <param name="protLevel">Pointer to PROTLEVEL-Structure</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadProtLevel(Accon.AGLink.AGL4.PROTLEVEL@)">
            <summary>
            This function reads the current protection level, the parameterised protection level, the active protection level 
            of the CPU, the setting of the mode switch and the setting of the starting switch from the given PLC. 
            A connection to the PLC must be already built up.
            Possible values are 1, 2 or 3 for the protection level which is set by the mode switch. 
            For the parameterized protection level possible values are 0, 1, 2 or 3. 0 means: no password set or parameterized 
            protection level is invalid. The values of the mode switch mean: 1 =RUN, 2 = RUN-P, 3 = STOP, 4= MRES and 0 = undefined or indeterminate. 
            The values of the starting switch means 1 = CRST, 2 0 WRST and 0 =undefined, not available or nonexistent.
            </summary>
            <param name="protLevel">Pointer to PROTLEVEL-Structure</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadS7Ident(System.String[],System.Int32)">
            <summary>
            With this function you are able to read the identification strings of the PLC. Some string may be not present, 
            giving you empty result entries.  This function is only available at S7-300 – and S7-400-Controllers. A connection to the PLC must be already built up.
            </summary>
            <param name="s7Ident">Pointer to Ident-structure</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadS7Ident(System.String[])">
            <summary>
            With this function you are able to read the identification strings of the PLC. Some string may be not present, 
            giving you empty result entries.  This function is only available at S7-300 – and S7-400-Controllers. A connection to the PLC must be already built up.
            </summary>
            <param name="s7Ident">Pointer to Ident-structure</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadS7LED(Accon.AGLink.AGL4.S7_LED@,System.Int32)">
            <summary>
            With this function you can read the state of the LEDs of the CPU. It is only available at S7-300 – and S7-400-Controllers. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="leds">Structure for the state of the LEDs</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadS7LED(Accon.AGLink.AGL4.S7_LED@)">
            <summary>
            With this function you can read the state of the LEDs of the CPU. It is only available at S7-300 – and S7-400-Controllers. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="leds">Structure for the state of the LEDs</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetExtModuleInfo(Accon.AGLink.AGL4.EXT_MODULE_INFO@,System.Int32)">
            <summary>
            With this function you can read extended information about the module of a S7-300 – or a S7-400-Controller. 
            Not all structureelements will be given back everytime, sometimes some are empty. A connection to the PLC must be already built up.
            </summary>
            <param name="moduleinfo">Pointer to the structure for the extended module information</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetExtModuleInfo(Accon.AGLink.AGL4.EXT_MODULE_INFO@)">
            <summary>
            With this function you can read extended information about the module of a S7-300 – or a S7-400-Controller. 
            Not all structureelements will be given back everytime, sometimes some are empty. A connection to the PLC must be already built up.
            </summary>
            <param name="moduleinfo">Pointer to the structure for the extended module information</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadSzl(System.Int32,System.Int32,System.Byte[]@,System.Int32@,System.Int32)">
            <summary>
            This function reads the system status list of the PLC. You get the meaning of the parameter and the valid values for Szlld and Index from the description of the respective PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="szlId">Number of the system status list</param>
            <param name="index">Index of the system status list</param>
            <param name="buff">Pointer to the buffer</param>
            <param name="buffLength">Length of the buffer at a call of the function, returns the number of read chars</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadSzl(System.Int32,System.Int32,System.Byte[]@,System.Int32@)">
            <summary>
            This function reads the system status list of the PLC. You get the meaning of the parameter and the valid values for Szlld and Index from the description of the respective PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="szlId">Number of the system status list</param>
            <param name="index">Index of the system status list</param>
            <param name="buff">Pointer to the buffer</param>
            <param name="buffLength">Length of the buffer at a call of the function, returns the number of read chars</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.IsPasswordReq(System.Int32@,System.Int32)">
            <summary>
            With this function you can check if you need a password for the access to the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="pwReq">Variable for the flag</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.IsPasswordReq(System.Int32@)">
            <summary>
            With this function you can check if you need a password for the access to the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="pwReq">Variable for the flag</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.SetPassword(System.String,System.Int32)">
            <summary>
            With this function you can authenticate a connection. The password has 8 signs. If it’s shorter, then add some blanks. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="password">Password</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.SetPassword(System.String)">
            <summary>
            With this function you can authenticate a connection. The password has 8 signs. If it’s shorter, then add some blanks. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="password">Password</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.UnSetPassword(System.Int32)">
            <summary>
            With this function you can cancel the connection authentication. A connection to the PLC must be already built up.
            </summary>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.UnSetPassword">
            <summary>
            With this function you can cancel the connection authentication. A connection to the PLC must be already built up.
            </summary>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDiagBufferEntrys(System.Int32@,System.Int32)">
            <summary>
            This function reads the count of the parameterized diagnostig puffer entries from the PLC. A connection to the PLC must be already built up. 
            Use the function ReadDiagBuffer for the subsequent reading of the diagnostic buffer and the function GetDiagBufferEntry to convert the entry into text.
            Note:
            You don’t have to call this function necessarily. You can reserve the memory space and call directly ReadDiagBuffer. 
            In general there are up to 120 diagnostic buffer entries in a PLC.
            </summary>
            <param name="entries">Pointer to parameterized count of entries</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDiagBufferEntrys(System.Int32@)">
            <summary>
            This function reads the count of the parameterized diagnostig puffer entries from the PLC. A connection to the PLC must be already built up. 
            Use the function ReadDiagBuffer for the subsequent reading of the diagnostic buffer and the function GetDiagBufferEntry to convert the entry into text.
            Note:
            You don’t have to call this function necessarily. You can reserve the memory space and call directly ReadDiagBuffer. 
            In general there are up to 120 diagnostic buffer entries in a PLC.
            </summary>
            <param name="entries">Pointer to parameterized count of entries</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDiagBuffer(System.Int32@,System.Byte[]@,System.Int32)">
            <summary>
            This function reads the diagnostic buffer from the PLC. A connection to the PLC must be already built up. 
            Use the variable entry to specify the number of entries for which you have allocated space for. After the function return, 
            you will get number of read diagnostic buffer entries. Use the function GetDiagBufferEntry to  translate the read binary informations into text.
            Note:
            Every entry in the diagnostic buffer needs 20 bytes. Additional 8 bytes are needed in the communication buffer for head information. 
            To read 100 entries you must allocate 100 *20 + 8 = 2008 bytes.
            </summary>
            <param name="entries">Count of the reserved entries in the call and count of read entries on the end of the function</param>
            <param name="diagBuff">Pointer to buffer area</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDiagBuffer(System.Int32@,System.Byte[]@)">
            <summary>
            This function reads the diagnostic buffer from the PLC. A connection to the PLC must be already built up. 
            Use the variable entry to specify the number of entries for which you have allocated space for. After the function return, 
            you will get number of read diagnostic buffer entries. Use the function GetDiagBufferEntry to  translate the read binary informations into text.
            Note:
            Every entry in the diagnostic buffer needs 20 bytes. Additional 8 bytes are needed in the communication buffer for head information. 
            To read 100 entries you must allocate 100 *20 + 8 = 2008 bytes.
            </summary>
            <param name="entries">Count of the reserved entries in the call and count of read entries on the end of the function</param>
            <param name="diagBuff">Pointer to buffer area</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetDiagBufferEntry(System.Int32,System.Byte[]@,System.String@)">
            <summary>
            This function converts the content of the diagnostic buffer entry to text. You should call that function with an index from 0 to Entrys-1. 
            Other values are invalid and will return an error.    
            </summary>
            <param name="index">The Index of the diagnostic buffer entry</param>
            <param name="diagBuff">Pointer to the buffer</param>
            <param name="text">Pointer to the string</param>
            <returns>&gt;= 0	Length of the diagnostic buffer message &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDBCount(System.Int32@,System.Int32)">
            <summary>
            With this function you can get the information, how many datablocks are present in the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="dbCount">Pointer to a variable for the count of datablocks</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDBCount(System.Int32@)">
            <summary>
            With this function you can get the information, how many datablocks are present in the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="dbCount">Pointer to a variable for the count of datablocks</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDBList(System.Int32@,System.UInt16[],System.Int32)">
            <summary>
            With this function you can read directory of the datablocks. You have to allocate memory for the numbers 
            of the data blocks, specifying the count of reserved elements in DBCount at the function call. 
            The count of used elements will be given back inDBCount at the end of the function. 
            To get a complete list, first call ReadDBCount and reserve the memory before you call this function. A connection to the PLC must be already built up.
            </summary>
            <param name="dbCount">Specifies the count of the reserved elements in the DBList at the call. Returns the count of used elements</param>
            <param name="dbList">Array for the identified elements</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDBList(System.Int32@,System.UInt16[])">
            <summary>
            With this function you can read directory of the datablocks. You have to allocate memory for the numbers 
            of the data blocks, specifying the count of reserved elements in DBCount at the function call. 
            The count of used elements will be given back inDBCount at the end of the function. 
            To get a complete list, first call ReadDBCount and reserve the memory before you call this function. A connection to the PLC must be already built up.
            </summary>
            <param name="dbCount">Specifies the count of the reserved elements in the DBList at the call. Returns the count of used elements</param>
            <param name="dbList">Array for the identified elements</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDBLen(System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can get the length of the desired datablock. A connection to the PLC must be already built up.
            </summary>
            <param name="dbNr">The number of the datablock</param>
            <param name="dbLen">Pointer to variable with the length of a datablock</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDBLen(System.Int32,System.Int32@)">
            <summary>
            With this function you can get the length of the desired datablock. A connection to the PLC must be already built up.
            </summary>
            <param name="dbNr">The number of the datablock</param>
            <param name="dbLen">Pointer to variable with the length of a datablock</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadAllBlockCount(Accon.AGLink.AGL4.ALL_BLOCK_COUNT@,System.Int32)">
            <summary>
            With this function you get the count of all blocks in a PLC. A connection to the PLC must be already built up. 
            </summary>
            <param name="allblockcount">Pointer to structure of datablock numbers</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadAllBlockCount(Accon.AGLink.AGL4.ALL_BLOCK_COUNT@)">
            <summary>
            With this function you get the count of all blocks in a PLC. A connection to the PLC must be already built up. 
            </summary>
            <param name="allblockcount">Pointer to structure of datablock numbers</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadBlockCount(System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can determine how many blocks of a specific type are existent on the PLC. A connection to the PLC must be already built up. 
            </summary>
            <param name="blocktype">Block type to check (BLK_TYPE_xxx)</param>
            <param name="blockcount">Variable for the count of blocks of one type</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadBlockCount(System.Int32,System.Int32@)">
            <summary>
            With this function you can determine how many blocks of a specific type are existent on the PLC. A connection to the PLC must be already built up. 
            </summary>
            <param name="blocktype">Block type to check (BLK_TYPE_xxx)</param>
            <param name="blockcount">Variable for the count of blocks of one type</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadBlockList(System.Int32,System.Int32@,System.UInt16[]@,System.Int32)">
            <summary>
            With this function you can read the directory of a specific block type. You have to allocate memory for the 
            numbers of the blocks, specifying the count of reserved elements in BlockCount at the function call. 
            The count of used elements will be given back in BlockCount at the end of the function. 
            To get a complete list, first call ReadBlockCount and reserve the memory 
            before you call this function. A connection to the PLC must be already built up.
            </summary>
            <param name="blocktype">Block type to check(BLK_TYPE_xxx)</param>
            <param name="blockcount">Variable for the count of blocks of one type</param>
            <param name="blocklist">Pointer to array with block numbers</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadBlockList(System.Int32,System.Int32@,System.UInt16[]@)">
            <summary>
            With this function you can read the directory of a specific block type. You have to allocate memory for the 
            numbers of the blocks, specifying the count of reserved elements in BlockCount at the function call. 
            The count of used elements will be given back in BlockCount at the end of the function. 
            To get a complete list, first call ReadBlockCount and reserve the memory 
            before you call this function. A connection to the PLC must be already built up.
            </summary>
            <param name="blocktype">Block type to check(BLK_TYPE_xxx)</param>
            <param name="blockcount">Variable for the count of blocks of one type</param>
            <param name="blocklist">Pointer to array with block numbers</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadBlockLen(System.Int32,System.Int32,System.Int32@,System.Int32)">
            <summary>
            With this function you can determine the length of a desired block. A connection to the PLC must be already built up.
            </summary>
            <param name="blocktype">Block type to check (BLK_TYPE_xxx)</param>
            <param name="blocknr">Block number to check</param>
            <param name="blocklen">Variable for the length of the block</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadBlockLen(System.Int32,System.Int32,System.Int32@)">
            <summary>
            With this function you can determine the length of a desired block. A connection to the PLC must be already built up.
            </summary>
            <param name="blocktype">Block type to check (BLK_TYPE_xxx)</param>
            <param name="blocknr">Block number to check</param>
            <param name="blocklen">Variable for the length of the block</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadInBytes(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read the input bytes from the process image of the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start byte to read from</param>
            <param name="count">Number of the bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadInBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can read the input bytes from the process image of the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start byte to read from</param>
            <param name="count">Number of the bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadPInBytes(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read peripheral input bytes from a PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start byte to read from</param>
            <param name="count">Number of bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadPInBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can read peripheral input bytes from a PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start byte to read from</param>
            <param name="count">Number of bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadOutBytes(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read the output bytes of the process image from a PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start byte to read from</param>
            <param name="count">Number of bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadOutBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can read the output bytes of the process image from a PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start byte to read from</param>
            <param name="count">Number of bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadFlagBytes(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read the marker bytes from a PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start byte to read from</param>
            <param name="count">Number of bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadFlagBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can read the marker bytes from a PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start byte to read from</param>
            <param name="count">Number of bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadSFlagBytes(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read special memory bytes (special marker) of a S7-200 PLC. At this PLC 
            type you can alternativly access to markers starting from address 256. These are mapped internally to the 
            special memory. This way, you can keep your programs hardware independent. A connection to the PLC must be already built up.
            Attention: 
            This function isn’t available for all PLC and may return the value AGL40_FUNC_NOT_SUPPORTED.
            </summary>
            <param name="start">Start byte to read from</param>
            <param name="count">Number of bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadSFlagBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can read special memory bytes (special marker) of a S7-200 PLC. At this PLC 
            type you can alternativly access to markers starting from address 256. These are mapped internally to the 
            special memory. This way, you can keep your programs hardware independent. A connection to the PLC must be already built up.
            Attention: 
            This function isn’t available for all PLC and may return the value AGL40_FUNC_NOT_SUPPORTED.
            </summary>
            <param name="start">Start byte to read from</param>
            <param name="count">Number of bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadVarBytes(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read variable memory bytes of a S7-200 PLC. At this PLC type you can alternativly 
            access to data block DB1. This block is mapped internally to the variable memory. This way, you can keep your 
            programs hardware independent. A connection to the PLC must be already built up.
            Attention: 
            This function isn’t available for all PLC and may return the value AGL40_FUNC_NOT_SUPPORTED.
            </summary>
            <param name="start">Start byte to read from</param>
            <param name="count">Number of bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadVarBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can read variable memory bytes of a S7-200 PLC. At this PLC type you can alternativly 
            access to data block DB1. This block is mapped internally to the variable memory. This way, you can keep your 
            programs hardware independent. A connection to the PLC must be already built up.
            Attention: 
            This function isn’t available for all PLC and may return the value AGL40_FUNC_NOT_SUPPORTED.
            </summary>
            <param name="start">Start byte to read from</param>
            <param name="count">Number of bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDataBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can read databytes from the PLC. A connection to the PLC must be 
            already built up. In the context of a S5, you can access the DX-Blocks by using a DB number greater than 255.
            </summary>
            <param name="dbNr">Number of the data block to be read from</param>
            <param name="start">Start byte to read from</param>
            <param name="count">DNumber of bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDataBytes(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can read databytes from the PLC. A connection to the PLC must be 
            already built up. In the context of a S5, you can access the DX-Blocks by using a DB number greater than 255.
            </summary>
            <param name="dbNr">Number of the data block to be read from</param>
            <param name="start">Start byte to read from</param>
            <param name="count">DNumber of bytes to read</param>
            <param name="buff">Buffer for the read bytes</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDataWords(System.Int32,System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            With this function you can read datawords in S5-addressing from the PLC. A connection to the 
            PLC must be already built up. The access to dataword 10 means, that you want to read DW 10 in a S5. In a S7 
            it means that DBB 20 and DBB21 will be read. In a S5 you can access the DX-blocks by using a DB-Number greater than 255.
            </summary>
            <param name="dbNr">The number of the DB to read from</param>
            <param name="start">Start word to read from</param>
            <param name="count">Number of words to read</param>
            <param name="buff">Buffer for the read words</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadDataWords(System.Int32,System.Int32,System.Int32,System.UInt16[])">
            <summary>
            With this function you can read datawords in S5-addressing from the PLC. A connection to the 
            PLC must be already built up. The access to dataword 10 means, that you want to read DW 10 in a S5. In a S7 
            it means that DBB 20 and DBB21 will be read. In a S5 you can access the DX-blocks by using a DB-Number greater than 255.
            </summary>
            <param name="dbNr">The number of the DB to read from</param>
            <param name="start">Start word to read from</param>
            <param name="count">Number of words to read</param>
            <param name="buff">Buffer for the read words</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadTimerWords(System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            With this function you read the timer words from the PLC. The timer values will be given back as 
            BCD (binary coded decimal) values. The top nibble contains a multiplication factor. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start timer to read from</param>
            <param name="count">Number of timers to read</param>
            <param name="buff">Buffer for the read timers</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadTimerWords(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            With this function you read the timer words from the PLC. The timer values will be given back as 
            BCD (binary coded decimal) values. The top nibble contains a multiplication factor. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start timer to read from</param>
            <param name="count">Number of timers to read</param>
            <param name="buff">Buffer for the read timers</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadCounterWords(System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            With this functionyou can read counter words from the PLC. The values will be given back as 
            BCD-values between 9 and 999. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start counter to read from</param>
            <param name="count">Number of counters to read</param>
            <param name="buff">Buffer for the read counters</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadCounterWords(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            With this functionyou can read counter words from the PLC. The values will be given back as 
            BCD-values between 9 and 999. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start counter to read from</param>
            <param name="count">Number of counters to read</param>
            <param name="buff">Buffer for the read counters</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadMix(Accon.AGLink.AGL4.DATA_RW40[],System.Int32,System.Int32)">
            <summary>
            With this function you can read mixed datatypes and datasizes in one job. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to the reading structurs</param>
            <param name="count">Count of the structures</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadMix(Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            With this function you can read mixed datatypes and datasizes in one job. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to the reading structurs</param>
            <param name="count">Count of the structures</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadMixEx(Accon.AGLink.AGL4.DATA_RW40[],System.Int32,System.Int32)">
            <summary>
            With this function you can read mixed datatypes and datasizes in one job. A connection to the PLC must be already built up. 
            Here compared with the function ReadMix, the data are read in the provided buffer. Use the element Buff of the structur 
            DATA_RW40 to specify the target memory.
            </summary>
            <param name="buff">Pointer to the reading structure</param>
            <param name="count">Count of the structures</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadMixEx(Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            With this function you can read mixed datatypes and datasizes in one job. A connection to the PLC must be already built up. 
            Here compared with the function ReadMix, the data are read in the provided buffer. Use the element Buff of the structur 
            DATA_RW40 to specify the target memory.
            </summary>
            <param name="buff">Pointer to the reading structure</param>
            <param name="count">Count of the structures</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteInBytes(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            This function writes input bytes into the process image of the PLC. A connection to the PLC must be already built up. 
            Depending on the PLC the bytes will be overwriten immediately at the system point by the values of the physical entries.
            </summary>
            <param name="start">Start byte to write to</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer for the bytes to write</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteInBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            This function writes input bytes into the process image of the PLC. A connection to the PLC must be already built up. 
            Depending on the PLC the bytes will be overwriten immediately at the system point by the values of the physical entries.
            </summary>
            <param name="start">Start byte to write to</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer for the bytes to write</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteOutBytes(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can write output bytes into the process image of the PLC. A connection to the PLC must be already built.
            </summary>
            <param name="start">Start byte to write to</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer containing the bytes to write</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteOutBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can write output bytes into the process image of the PLC. A connection to the PLC must be already built.
            </summary>
            <param name="start">Start byte to write to</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer containing the bytes to write</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WritePOutBytes(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can write peripheral output bytes to the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start bytes to write to</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer containing the bytes to write </param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WritePOutBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can write peripheral output bytes to the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start bytes to write to</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer containing the bytes to write </param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteFlagBytes(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can write marker bytes to the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Connection handle</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer containing the bytes to write</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteFlagBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can write marker bytes to the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Connection handle</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer containing the bytes to write</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteSFlagBytes(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can write special memory bytes (special marker) to a S7-200 PLC. At this PLC type you can
            alternativly access to markers starting from address 256. These are mapped internally to the special memory. 
            This way, you can keep your programs hardware independent. A connection to the PLC must be already built up.
            Attention: 
            This function isn’t available for all PLC and may return the value AGL40_FUNC_NOT_SUPPORTED.
            </summary>
            <param name="start">Start byte to write to</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer containing the bytes to write</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteSFlagBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can write special memory bytes (special marker) to a S7-200 PLC. At this PLC type you can
            alternativly access to markers starting from address 256. These are mapped internally to the special memory. 
            This way, you can keep your programs hardware independent. A connection to the PLC must be already built up.
            Attention: 
            This function isn’t available for all PLC and may return the value AGL40_FUNC_NOT_SUPPORTED.
            </summary>
            <param name="start">Start byte to write to</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer containing the bytes to write</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteVarBytes(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can write variable memory bytes to a S7-200 PLC. At this PLC type you can alternativly access to data block DB1. This block is mapped internally to the variable memory. This way, you can keep your programs hardware independent. A connection to the PLC must be already built up.
            Attention: 
            This function isn’t available for all PLC and may return the value AGL40_FUNC_NOT_SUPPORTED.
            </summary>
            <param name="start">Start byte to write</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer containing the bytes to write</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteVarBytes(System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can write variable memory bytes to a S7-200 PLC. At this PLC type you can alternativly access to data block DB1. This block is mapped internally to the variable memory. This way, you can keep your programs hardware independent. A connection to the PLC must be already built up.
            Attention: 
            This function isn’t available for all PLC and may return the value AGL40_FUNC_NOT_SUPPORTED.
            </summary>
            <param name="start">Start byte to write</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer containing the bytes to write</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteDataBytes(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            With this function you can write data bytes to the PLC. A connection to the PLC must be already built up. 
            In the context of a S5, you can access the DX-Blocks by using a DB number greater than 255.
            </summary>
            <param name="dbNr">The number of the DB to write into</param>
            <param name="start">Start byte to write to</param>
            <param name="count">Number of bytes to write</param>
            <param name="buff">Buffer containing the bytes to write</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteDataBytes(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            With this function you can write data bytes to the PLC. A connection to the PLC must be already built up. 
            In the context of a S5, you can access the DX-Blocks by using a DB number greater than 255.
            </summary>
            <param name="dbNr">The number of the DB to write into</param>
            <param name="start">Start byte to write to</param>
            <param name="count">Number of bytes to write</param>
            <param name="Buff">Buffer containing the bytes to write</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteDataWords(System.Int32,System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            With this function you can write data words to the PLC using S5-addressing. A connection to the PLC must be 
            already built up. The access to the data word 10 means for a S5 that DW 10 will be written. For a S7 this 
            access means to write DBB 20 and DBB 21. In a S5 you can access the DX-blocks by using a DB-Number greater than 255.
            </summary>
            <param name="dbNr">The number of the DB to write into</param>
            <param name="start">Start word to write to</param>
            <param name="count">Number of words to write</param>
            <param name="buff">Buffer containing the words to write</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteDataWords(System.Int32,System.Int32,System.Int32,System.UInt16[])">
            <summary>
            With this function you can write data words to the PLC using S5-addressing. A connection to the PLC must be 
            already built up. The access to the data word 10 means for a S5 that DW 10 will be written. For a S7 this 
            access means to write DBB 20 and DBB 21. In a S5 you can access the DX-blocks by using a DB-Number greater than 255.
            </summary>
            <param name="dbNr">The number of the DB to write into</param>
            <param name="start">Start word to write to</param>
            <param name="count">Number of words to write</param>
            <param name="buff">Buffer containing the words to write</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteTimerWords(System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            With this function you can write timer words to the PLC. The values to be written must be 
            in the BCD-format with the factor in the top nibble. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start timer to write to</param>
            <param name="count">Number of timers to write</param>
            <param name="buff">Buffer containing the timer values to write</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteTimerWords(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            With this function you can write timer words to the PLC. The values to be written must be 
            in the BCD-format with the factor in the top nibble. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start timer to write to</param>
            <param name="count">Number of timers to write</param>
            <param name="buff">Buffer containing the timer values to write</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteCounterWords(System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            With this function you can write counter words to the PLC. The value to be written must be 
            in the BCD-format and between 0 and 999. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start counter to write to</param>
            <param name="count">Number of counters to write</param>
            <param name="buff">Buffer containing the values to write</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteCounterWords(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            With this function you can write counter words to the PLC. The value to be written must be 
            in the BCD-format and between 0 and 999. A connection to the PLC must be already built up.
            </summary>
            <param name="start">Start counter to write to</param>
            <param name="count">Number of counters to write</param>
            <param name="buff">Buffer containing the values to write</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteMix(Accon.AGLink.AGL4.DATA_RW40[],System.Int32,System.Int32)">
            <summary>
            With this function you can write mixed datatypes and data sizes with one job. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to the writing structures</param>
            <param name="count">Number of used structure elements</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteMix(Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            With this function you can write mixed datatypes and data sizes with one job. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to the writing structures</param>
            <param name="count">Number of used structure elements</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteMixEx(Accon.AGLink.AGL4.DATA_RW40[],System.Int32,System.Int32)">
            <summary>
            With this function you can write mixed datatypes and datasizes in one job to the PLC. A connection to the 
            PLC must be already built up. Here compared with the function WriteMix, the data are read from the provided buffer. 
            Use the element Buff of the structure DATA_RW40 to specify the data source.
            </summary>
            <param name="buff">Pointer to the writing structures</param>
            <param name="count">Number of used structure elements</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteMixEx(Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            With this function you can write mixed datatypes and datasizes in one job to the PLC. A connection to the 
            PLC must be already built up. Here compared with the function WriteMix, the data are read from the provided buffer. 
            Use the element Buff of the structure DATA_RW40 to specify the data source.
            </summary>
            <param name="buff">Pointer to the writing structures</param>
            <param name="count">Number of used structure elements</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitOptReadMix(Accon.AGLink.AGL4.DATA_RW40[],System.IntPtr@)">
            <summary>
            With this function a ReadMix-request will be optimized. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40-structures</param>
            <param name="opt">Pointer to get the optimization handle </param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadOptReadMix(System.IntPtr,Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            With this function you can execute an optimized ReadMix request. A connection to the PLC must be already built up.
            </summary>
            <param name="opt">Optimization handle</param>
            <param name="buff">Pointer to DATA_RW40-structures</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadOptReadMix(System.IntPtr,Accon.AGLink.AGL4.DATA_RW40[])">
            <summary>
            With this function you can execute an optimized ReadMix request. A connection to the PLC must be already built up.
            </summary>
            <param name="opt">Optimization handle</param>
            <param name="buff">Pointer to DATA_RW40-structures</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.EndOptReadMix(System.IntPtr)">
            <summary>
            With this function the ressources of an optimized ReadMix request will be released.
            </summary>
            <param name="opt">Optimization handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitOptReadMixEx(Accon.AGLink.AGL4.DATA_RW40[],System.IntPtr@)">
            <summary>
            With this function a ReadMixEx request will be optimized. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40-structures</param>
            <param name="opt">Pointer to get the optimization handle </param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadOptReadMixEx(System.IntPtr,Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            With this function you can execute an optimized ReadMixEx request. A connection to the PLC must be already built up.
            </summary>
            <param name="opt">Optimization handle</param>
            <param name="buff">Pointer to DATA_RW40-structures</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadOptReadMixEx(System.IntPtr,Accon.AGLink.AGL4.DATA_RW40[])">
            <summary>
            With this function you can execute an optimized ReadMixEx request. A connection to the PLC must be already built up.
            </summary>
            <param name="opt">Optimization handle</param>
            <param name="buff">Pointer to DATA_RW40-structures</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.EndOptReadMixEx(System.IntPtr)">
            <summary>
            This function releases the ressources of an optimized ReadMixEx request.
            </summary>
            <param name="opt">Optimization handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitOptWriteMix(Accon.AGLink.AGL4.DATA_RW40[],System.IntPtr@)">
            <summary>
            This function optimizes a WriteMix request. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40-structures</param>
            <param name="opt">Pointer to get the optimization handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteOptWriteMix(System.IntPtr,Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            With this function you can execute an optimized WriteMix request. A connection to the PLC must be already built up.
            </summary>
            <param name="opt">Optimization handle</param>
            <param name="buff">Pointer to DATA_RW40-structures</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteOptWriteMix(System.IntPtr,Accon.AGLink.AGL4.DATA_RW40[])">
            <summary>
            With this function you can execute an optimized WriteMix request. A connection to the PLC must be already built up.
            </summary>
            <param name="opt">Optimization handle</param>
            <param name="buff">Pointer to DATA_RW40-structures</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.EndOptWriteMix(System.IntPtr)">
            <summary>
            This function releases the ressources of an optimized WriteMix request.
            </summary>
            <param name="opt">Optimization handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitOptWriteMixEx(Accon.AGLink.AGL4.DATA_RW40[],System.IntPtr@)">
            <summary>
            With this function a WriteMixEx request will be optimized. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40-structures</param>
            <param name="opt">Pointer to the variable for optimization handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteOptWriteMixEx(System.IntPtr,Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            With this function you can execute an optimized WriteMixEx request. A connection to the PLC must be already built up.
            </summary>
            <param name="opt">Optimization handle</param>
            <param name="buff">Pointer to DATA_RW40-structures</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.WriteOptWriteMixEx(System.IntPtr,Accon.AGLink.AGL4.DATA_RW40[])">
            <summary>
            With this function you can execute an optimized WriteMixEx request. A connection to the PLC must be already built up.
            </summary>
            <param name="opt">Optimization handle</param>
            <param name="buff">Pointer to DATA_RW40-structures</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.EndOptWriteMixEx(System.IntPtr)">
            <summary>
            This function releases the ressources used by an optimized WriteMixEx request.
            </summary>
            <param name="opt">Optimization handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.DeleteOptJob(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="opt">Optimization handle</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetOptJobResult(System.IntPtr,Accon.AGLink.AGL4.RESULT40@)">
            <summary>
            
            </summary>
            <param name="opt">Optimization handle</param>
            <param name="pResult"></param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.RKSend(Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            This function writes data to the PLC, using the RK512 protocol. The communication parameters CPU-Number, 
            IPC flag byte and IPCflag bit (Inter-processor communication) are taken from the device configuration. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function returns the error 
            AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.RKSend(Accon.AGLink.AGL4.DATA_RW40_RK[])">
            <summary>
            This function writes data to the PLC, using the RK512 protocol. The communication parameters CPU-Number, 
            IPC flag byte and IPCflag bit (Inter-processor communication) are taken from the device configuration. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function returns the error 
            AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.RKSendEx(Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            This function writes data to the PLC, using the RK512 protocol. The communication parameters CPU-Number, 
            IPC flag byte and IPCflag bit (Inter-processor communication) are taken from the DATA_RW40_RK structure. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function 
            returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.RKSendEx(Accon.AGLink.AGL4.DATA_RW40_RK[])">
            <summary>
            This function writes data to the PLC, using the RK512 protocol. The communication parameters CPU-Number, 
            IPC flag byte and IPCflag bit (Inter-processor communication) are taken from the DATA_RW40_RK structure. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function 
            returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.RKFetch(Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            With this function you can read data from the PLC, using the RK512 protocol. The communication parameters CPU-Number, 
            IPC flag byte and IPCflag bit (Inter-processor communication) are taken from the device configuration. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function returns the error AGL40_FUNC_NOT_SUPPORTED. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.RKFetch(Accon.AGLink.AGL4.DATA_RW40_RK[])">
            <summary>
            With this function you can read data from the PLC, using the RK512 protocol. The communication parameters CPU-Number, 
            IPC flag byte and IPCflag bit (Inter-processor communication) are taken from the device configuration. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function returns the error AGL40_FUNC_NOT_SUPPORTED. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.RKFetchEx(Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            This function reads data from the PLC, using the RK512 protocol. The communication parameters CPU-Number, 
            IPC flag byte and IPCflag bit (Inter-processor communication) are taken from the DATA_RW40_RK structure. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function returns the error AGL40_FUNC_NOT_SUPPORTED. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.RKFetchEx(Accon.AGLink.AGL4.DATA_RW40_RK[])">
            <summary>
            This function reads data from the PLC, using the RK512 protocol. The communication parameters CPU-Number, 
            IPC flag byte and IPCflag bit (Inter-processor communication) are taken from the DATA_RW40_RK structure. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function returns the error AGL40_FUNC_NOT_SUPPORTED. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Send_RKFetch(Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            This function sends the data which where requested by the counterpart station through RKFetch. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise 
            the function returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Send_RKFetch(Accon.AGLink.AGL4.DATA_RW40_RK[])">
            <summary>
            This function sends the data which where requested by the counterpart station through RKFetch. 
            Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise 
            the function returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Recv_RKSend(Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            This function receives the data, written by the counterpart station through RKSend. The DATA_RW40_RK structure receives 
            all communication parameters like memory area, db-number, offset etc. Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the 
            function returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Recv_RKSend(Accon.AGLink.AGL4.DATA_RW40_RK[])">
            <summary>
            This function receives the data, written by the counterpart station through RKSend. The DATA_RW40_RK structure receives 
            all communication parameters like memory area, db-number, offset etc. Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the 
            function returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Recv_RKFetch(Accon.AGLink.AGL4.DATA_RW40_RK[],System.Int32)">
            <summary>
            With this function you can receive a data request which was send by the counterpart station through RKFetch. 
            The DATA_RW40_RK structure receives all communication parameter like memory area, db-number, offset etc.You can 
            send the desired data through the function Send_RKFetch. Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the 
            function returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Recv_RKFetch(Accon.AGLink.AGL4.DATA_RW40_RK[])">
            <summary>
            With this function you can receive a data request which was send by the counterpart station through RKFetch. 
            The DATA_RW40_RK structure receives all communication parameter like memory area, db-number, offset etc.You can 
            send the desired data through the function Send_RKFetch. Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the 
            function returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to DATA_RW40_RK-Buffer</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Send_3964(System.Byte[],System.Int32)">
            <summary>
            This function sends data via the 3964- or 3964R-protocol. Use the device configuration to specify, which 
            of both to use. Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function 
            returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to the data to send</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Send_3964(System.Byte[])">
            <summary>
            This function sends data via the 3964- or 3964R-protocol. Use the device configuration to specify, which 
            of both to use. Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function 
            returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to the data to send</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Recv_3964(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            With this function you can receive data via the 3964- or 3964R-protocol. Use the device configuration 
            to specify, which of both to use. Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function 
            returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to the data to send</param>
            <param name="buffLength">Length of the input buffer when called and length of the received data when ending</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Recv_3964(System.Byte[],System.Int32@)">
            <summary>
            With this function you can receive data via the 3964- or 3964R-protocol. Use the device configuration 
            to specify, which of both to use. Only the ACCON-AGLink device type RK512 (TYPE_RK) is supported. Otherwise the function 
            returns the error AGL40_FUNC_NOT_SUPPORTED. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to the data to send</param>
            <param name="buffLength">Length of the input buffer when called and length of the received data when ending</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.BSend(System.Byte[],System.Int32)">
            <summary>
            With this function you can send a data-block to be received by the PLC via BReceive. This function uses the value 
            1 for the R_ID. An appropriate connection must be parameterized. A connection to the PLC must be already built up.
            In the structure pwsa you send the reserved length of the buffer when the function is called. 
            At the end of the function it contains the length of the received data.
            </summary>
            <param name="abBuff">Pointer to Data-Buffer</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.BSend(System.Byte[])">
            <summary>
            With this function you can send a data-block to be received by the PLC via BReceive. This function uses the value 
            1 for the R_ID. An appropriate connection must be parameterized. A connection to the PLC must be already built up.
            In the structure pwsa you send the reserved length of the buffer when the function is called. 
            At the end of the function it contains the length of the received data.
            </summary>
            <param name="abBuff">Pointer to Data-Buffer</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.BReceive(System.Byte[],System.Int32)">
            <summary>
            With this function you can receive a data-block which was send by the PLC via BSend. A connection must be parameterized. 
            A connection to the PLC must be already built up.
            In the structure pwsa you pass the allocated length of the buffer when the function is called. 
            At the end of the function it contains the length of the received data.
            </summary>
            <param name="abBuff">Pointer to Data-Buffer</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.BReceive(System.Byte[])">
            <summary>
            With this function you can receive a data-block which was send by the PLC via BSend. A connection must be parameterized. 
            A connection to the PLC must be already built up.
            In the structure pwsa you pass the allocated length of the buffer when the function is called. 
            At the end of the function it contains the length of the received data.
            </summary>
            <param name="abBuff">Pointer to Data-Buffer</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.BSendEx(System.Byte[],System.Int32,System.Int32)">
            <summary>
            With this function you can send a data-block to be received by the PLC via BReceive. Compared to the function 
            BSend you can pass a value for R_ID. An appropriate connection must be parameterized. A connection to the PLC must be already built up.
            In the structure pwsa you send the length of the buffer when the function is called. At the end of the function it contains the length of the received data.
            </summary>
            <param name="abBuff">Pointer to Data-Buffer</param>
            <param name="R_ID">The RemoteID for the communication</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.BSendEx(System.Byte[],System.Int32)">
            <summary>
            With this function you can send a data-block to be received by the PLC via BReceive. Compared to the function 
            BSend you can pass a value for R_ID. An appropriate connection must be parameterized. A connection to the PLC must be already built up.
            In the structure pwsa you send the length of the buffer when the function is called. At the end of the function it contains the length of the received data.
            </summary>
            <param name="abBuff">Pointer to Data-Buffer</param>
            <param name="R_ID">The RemoteID for the communication</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.BReceiveEx(System.Byte[]@,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            With this function you can receive a data-block which was send by the PLC via BSend. Compared to the function 
            BReceive you additinaly get the R_ID of the connection. A connection must be parameterized. A connection to the PLC must be already built up.
            In the structure pwsa you pass the allocated length of the buffer when the function is called. At the end of 
            the function it contains the length of the received data.
            </summary>
            <param name="abBuff">Pointer to Data-Buffer</param>
            <param name="R_ID">Pointer to variable for RemoteID of the connection</param>
            <param name="usedLen">Used amount of bytes after call</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.BReceiveEx(System.Byte[]@,System.Int32@,System.Int32@)">
            <summary>
            With this function you can receive a data-block which was send by the PLC via BSend. Compared to the function 
            BReceive you additinaly get the R_ID of the connection. A connection must be parameterized. A connection to the PLC must be already built up.
            In the structure pwsa you pass the allocated length of the buffer when the function is called. At the end of 
            the function it contains the length of the received data.
            </summary>
            <param name="abBuff">Pointer to Data-Buffer</param>
            <param name="R_ID">Pointer to variable for RemoteID of the connection</param>
            <param name="usedLen">Used amount of bytes after call</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.USend(Accon.AGLink.AGL4.S7_USEND_URCV,System.Int32)">
            <summary>
            With this function you can send a data block to be received by the PLC via UReceive. 
            A connection must be parameterized. A connection to the PLC must be already built up.
            </summary>
            <param name="uSendUrcv">Pointer to structure with the values to send</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.USend(Accon.AGLink.AGL4.S7_USEND_URCV)">
            <summary>
            With this function you can send a data block to be received by the PLC via UReceive. 
            A connection must be parameterized. A connection to the PLC must be already built up.
            </summary>
            <param name="uSendUrcv">Pointer to structure with the values to send</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.UReceive(Accon.AGLink.AGL4.S7_USEND_URCV@,System.Int32)">
            <summary>
            With this function you can receive a data block which was send by the PLC via USend. 
            A connection must be parameterized. A connection to the PLC must be already built up.
            </summary>
            <param name="uSendUrcv">Pointer to the structur for the data to read</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.UReceive(Accon.AGLink.AGL4.S7_USEND_URCV@)">
            <summary>
            With this function you can receive a data block which was send by the PLC via USend. 
            A connection must be parameterized. A connection to the PLC must be already built up.
            </summary>
            <param name="uSendUrcv">Pointer to the structur for the data to read</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitOpStateMsg(System.Int32@,System.Int32)">
            <summary>
            This function allows you to activate the operating state transition messages. 
            This means that you will be informed by the connected PLC about a change of the operating state, such as a change from run to stop. 
            This way, you can save yourself the polling via GetOpState. After mounting the notification you have to query it via GetOpStateMsg. 
            You’ll get the current operating state of the PLC as returned value.
            </summary>
            <param name="opState">Variable for the operating state(OPSTATE_xxx)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitOpStateMsg(System.Int32@)">
            <summary>
            This function allows you to activate the operating state transition messages. 
            This means that you will be informed by the connected PLC about a change of the operating state, such as a change from run to stop. 
            This way, you can save yourself the polling via GetOpState. After mounting the notification you have to query it via GetOpStateMsg. 
            You’ll get the current operating state of the PLC as returned value.
            </summary>
            <param name="opState">Variable for the operating state(OPSTATE_xxx)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ExitOpStateMsg(System.Int32@,System.Int32)">
            <summary>
            With this function you deactivate the operating state change messages. When calling this function you get the current 
            operating state of the PLC as returned value. There must be a connection to the AG. 
            If there is a pending GetOpStateMsg function, you have to delete it with DeleteJob.
            </summary>
            <param name="opState">Variable for the operating status (OPSTATE_xxx)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ExitOpStateMsg(System.Int32@)">
            <summary>
            With this function you deactivate the operating state change messages. When calling this function you get the current 
            operating state of the PLC as returned value. There must be a connection to the AG. 
            If there is a pending GetOpStateMsg function, you have to delete it with DeleteJob.
            </summary>
            <param name="opState">Variable for the operating status (OPSTATE_xxx)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetOpStateMsg(System.Int32@,System.Int32)">
            <summary>
            This function requests the operating state change message. 
            Since this message can happen at any time this function is generally called asynchronous with the timeout value 
            INFINITE and a notification is set onto the job. If you receice that notification you can set up the next query immediately.
            </summary>
            <param name="opState">Variable for the operating state (OPSTATE_xxx)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetOpStateMsg(System.Int32@)">
            <summary>
            This function requests the operating state change message. 
            Since this message can happen at any time this function is generally called asynchronous with the timeout value 
            INFINITE and a notification is set onto the job. If you receice that notification you can set up the next query immediately.
            </summary>
            <param name="opState">Variable for the operating state (OPSTATE_xxx)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitDiagMsg(System.Int32@,System.Int32,System.Int32)">
            <summary>
            With this function you can activate the receiving of user-defined and system-integrated diagnostic buffer messages. 
            You can find more details for this topic in STEP7- Programming package with the help to SFC 52 WR_USMSG. 
            You can specify the events, you want to be informed by a bitmask. For every connection you can mount only one kind of messagetype. 
            After mounting the notification you have to query it via GetDiagMsg. 
            Before closing the connection you have to dismount the diagnostic message.
            </summary>
            <param name="opState">Variable for the operating status (OPSTATE_xxx)</param>
            <param name="diagMask">Bitmask for the diagnostic messages (S7_DIAG_MSG_xxx)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitDiagMsg(System.Int32@,System.Int32)">
            <summary>
            With this function you can activate the receiving of user-defined and system-integrated diagnostic buffer messages. 
            You can find more details for this topic in STEP7- Programming package with the help to SFC 52 WR_USMSG. 
            You can specify the events, you want to be informed by a bitmask. For every connection you can mount only one kind of messagetype. 
            After mounting the notification you have to query it via GetDiagMsg. 
            Before closing the connection you have to dismount the diagnostic message.
            </summary>
            <param name="opState">Variable for the operating status (OPSTATE_xxx)</param>
            <param name="diagMask">Bitmask for the diagnostic messages (S7_DIAG_MSG_xxx)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ExitDiagMsg(System.Int32@,System.Int32)">
            <summary>
            With this function you deactivate the diagnostic buffer messages. 
            If there is pending GetDiagMsg-function, you have to delete it via DeleteJob. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="opState">Variable for the operating status (OPSTATE_xxx)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ExitDiagMsg(System.Int32@)">
            <summary>
            With this function you deactivate the diagnostic buffer messages. 
            If there is pending GetDiagMsg-function, you have to delete it via DeleteJob. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="opState">Variable for the operating status (OPSTATE_xxx)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetDiagMsg(Accon.AGLink.AGL4.S7_DIAG_MSG@,System.Int32)">
            <summary>
            With this function you request a diagnostic message. Since this message can happen at any time 
            this function is generally called asynchronous with the timeout value INFINITE and a notification is 
            set onto the job. If you receice that notification you can set up the next query immediately.
            </summary>
            <param name="diagMsg">Pointer to diagnostic message structure</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetDiagMsg(Accon.AGLink.AGL4.S7_DIAG_MSG@)">
            <summary>
            With this function you request a diagnostic message. Since this message can happen at any time 
            this function is generally called asynchronous with the timeout value INFINITE and a notification is 
            set onto the job. If you receice that notification you can set up the next query immediately.
            </summary>
            <param name="diagMsg">Pointer to diagnostic message structure</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitCyclicRead(System.Int32,System.Int32,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the PLC sends the 
            value of the variables automatically in a configured frame. You don’t have to poll them explicit. 
            When the cyclical reading is mounted you have to launch GetCyclicRead jobs to receive the values.
            You have to pay attention because the whole query has to fit in one PDU. That applies as well the request as 
            to the response telegram with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR 
            will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            </summary>
            <param name="cycleTime">Cycle time in milliseconds</param>
            <param name="start">Flag whether job should be started immediately</param>
            <param name="buff">Array with DATA_RW-structures, like ReadMix</param>
            <param name="handle">Variable for the handle</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitCyclicRead(System.Int32,System.Int32,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32@)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the PLC sends the 
            value of the variables automatically in a configured frame. You don’t have to poll them explicit. 
            When the cyclical reading is mounted you have to launch GetCyclicRead jobs to receive the values.
            You have to pay attention because the whole query has to fit in one PDU. That applies as well the request as 
            to the response telegram with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR 
            will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            </summary>
            <param name="cycleTime">Cycle time in milliseconds</param>
            <param name="start">Flag whether job should be started immediately</param>
            <param name="buff">Array with DATA_RW-structures, like ReadMix</param>
            <param name="handle">Variable for the handle</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitCyclicRead(System.Int32,System.Boolean,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the PLC sends the 
            value of the variables automatically in a configured frame. You don’t have to poll them explicit. 
            When the cyclical reading is mounted you have to launch GetCyclicRead jobs to receive the values.
            You have to pay attention because the whole query has to fit in one PDU. That applies as well the request as 
            to the response telegram with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR 
            will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            </summary>
            <param name="cycleTime">Cycle time in milliseconds</param>
            <param name="start">Flag whether job should be started immediately</param>
            <param name="buff">Array with DATA_RW-structures, like ReadMix</param>
            <param name="handle">Variable for the handle</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitCyclicRead(System.Int32,System.Boolean,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32@)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the PLC sends the 
            value of the variables automatically in a configured frame. You don’t have to poll them explicit. 
            When the cyclical reading is mounted you have to launch GetCyclicRead jobs to receive the values.
            You have to pay attention because the whole query has to fit in one PDU. That applies as well the request as 
            to the response telegram with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR 
            will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            </summary>
            <param name="cycleTime">Cycle time in milliseconds</param>
            <param name="start">Flag whether job should be started immediately</param>
            <param name="buff">Array with DATA_RW-structures, like ReadMix</param>
            <param name="handle">Variable for the handle</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitCyclicReadEx(System.Int32,System.Int32,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the PLC sends the 
            value of the variables automatically in a configured frame. You don’t have to poll them explicit. When the cyclical reading 
            is mounted you have to launch GetCyclicReadEx jobs to receive the values. Here compared with the function GetCyclicRead, 
            the data are read in the provided buffer. Use the element Buff of the structur DATA_RW40 to specify the target memory.
            You have to pay attention because the whole query has to fit in one PDU. That applies as well the request as to the response telegram 
            with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            </summary>
            <param name="cycleTime">Cycle time in milliseconds</param>
            <param name="start">Flag whether the job should be started immediately</param>
            <param name="buff">Array with DATA_RW-structures, like ReadMixEx</param>
            <param name="handle">Variable for the handle</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitCyclicReadEx(System.Int32,System.Int32,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32@)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the PLC sends the 
            value of the variables automatically in a configured frame. You don’t have to poll them explicit. When the cyclical reading 
            is mounted you have to launch GetCyclicReadEx jobs to receive the values. Here compared with the function GetCyclicRead, 
            the data are read in the provided buffer. Use the element Buff of the structur DATA_RW40 to specify the target memory.
            You have to pay attention because the whole query has to fit in one PDU. That applies as well the request as to the response telegram 
            with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            </summary>
            <param name="cycleTime">Cycle time in milliseconds</param>
            <param name="start">Flag whether the job should be started immediately</param>
            <param name="buff">Array with DATA_RW-structures, like ReadMixEx</param>
            <param name="handle">Variable for the handle</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitCyclicReadEx(System.Int32,System.Boolean,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the PLC sends the 
            value of the variables automatically in a configured frame. You don’t have to poll them explicit. When the cyclical reading 
            is mounted you have to launch GetCyclicReadEx jobs to receive the values. Here compared with the function GetCyclicRead, 
            the data are read in the provided buffer. Use the element Buff of the structur DATA_RW40 to specify the target memory.
            You have to pay attention because the whole query has to fit in one PDU. That applies as well the request as to the response telegram 
            with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            </summary>
            <param name="cycleTime">Cycle time in milliseconds</param>
            <param name="start">Flag whether the job should be started immediately</param>
            <param name="buff">Array with DATA_RW-structures, like ReadMixEx</param>
            <param name="handle">Variable for the handle</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitCyclicReadEx(System.Int32,System.Boolean,Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32@)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the PLC sends the 
            value of the variables automatically in a configured frame. You don’t have to poll them explicit. When the cyclical reading 
            is mounted you have to launch GetCyclicReadEx jobs to receive the values. Here compared with the function GetCyclicRead, 
            the data are read in the provided buffer. Use the element Buff of the structur DATA_RW40 to specify the target memory.
            You have to pay attention because the whole query has to fit in one PDU. That applies as well the request as to the response telegram 
            with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            </summary>
            <param name="cycleTime">Cycle time in milliseconds</param>
            <param name="start">Flag whether the job should be started immediately</param>
            <param name="buff">Array with DATA_RW-structures, like ReadMixEx</param>
            <param name="handle">Variable for the handle</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.StartCyclicRead(System.Int32,System.Int32)">
            <summary>
            With this function you can start the cyclical reading of variables. You need this function if the Flag boStart 
            was at mounting or the reading was stopped with StopCyclicRead. This function can be used for reading jobs 
            which were mounted with InitCyclicRead or InitCyclicReadEx. A connection to the PLC must be already built up and 
            the cyclical reading job must be mounted.
            </summary>
            <param name="handle">Handle out of InitCylicRead or InitCyclixReadEx</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.StartCyclicRead(System.Int32)">
            <summary>
            With this function you can start the cyclical reading of variables. You need this function if the Flag boStart 
            was at mounting or the reading was stopped with StopCyclicRead. This function can be used for reading jobs 
            which were mounted with InitCyclicRead or InitCyclicReadEx. A connection to the PLC must be already built up and 
            the cyclical reading job must be mounted.
            </summary>
            <param name="handle">Handle out of InitCylicRead or InitCyclixReadEx</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.StopCyclicRead(System.Int32,System.Int32)">
            <summary>
            With this function you can stop or interrupt the reading of variables.  This function can be used for reading jobs 
            mounted with InitCyclicRead or InitCyclicReadEx. A connection to the PLC must be already built up and the cyclical reading job must be mounted.
            </summary>
            <param name="handle">Handle out of InitCylicRead or InitCyclixReadEx</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.StopCyclicRead(System.Int32)">
            <summary>
            With this function you can stop or interrupt the reading of variables.  This function can be used for reading jobs 
            mounted with InitCyclicRead or InitCyclicReadEx. A connection to the PLC must be already built up and the cyclical reading job must be mounted.
            </summary>
            <param name="handle">Handle out of InitCylicRead or InitCyclixReadEx</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ExitCyclicRead(System.Int32,System.Int32)">
            <summary>
            With this function you close the cyclical reading and release the resources on the PLC. This function can 
            be used for reading jobs mounted with InitCyclicRead or InitCyclicReadEx. 
            A connection to the PLC must be already built up and the cyclical reading job must be mounted.
            </summary>
            <param name="handle">Handle out of InitCylicRead or InitCyclixReadEx</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ExitCyclicRead(System.Int32)">
            <summary>
            With this function you close the cyclical reading and release the resources on the PLC. This function can 
            be used for reading jobs mounted with InitCyclicRead or InitCyclicReadEx. 
            A connection to the PLC must be already built up and the cyclical reading job must be mounted.
            </summary>
            <param name="handle">Handle out of InitCylicRead or InitCyclixReadEx</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetCyclicRead(Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32,System.Int32)">
            <summary>
            With this function you receive a package with variables from the PLC. The timeout value should be greater than the configured cycle time. 
            Ideally this function is called asynchronously with a notification on incoming data. You can launch 
            multiple reading jobs at the same time. They will be used sequential. The parameters Buff und Num have to match to the 
            parameters used on mounting the reading with InitCyclicRead. The easiest way would be, to send the same variables.
            </summary>
            <param name="buff">Array with DATA_RW-structures, similar to ReadMix</param>
            <param name="handle">Handle out of InitCylicRead</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetCyclicRead(Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32)">
            <summary>
            With this function you receive a package with variables from the PLC. The timeout value should be greater than the configured cycle time. 
            Ideally this function is called asynchronously with a notification on incoming data. You can launch 
            multiple reading jobs at the same time. They will be used sequential. The parameters Buff und Num have to match to the 
            parameters used on mounting the reading with InitCyclicRead. The easiest way would be, to send the same variables.
            </summary>
            <param name="buff">Array with DATA_RW-structures, similar to ReadMix</param>
            <param name="handle">Handle out of InitCylicRead</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetCyclicReadEx(Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32,System.Int32)">
            <summary>
            With this function you receive a package with variables from the PLC. The timeout value should be greater than 
            the configured cycle time. Ideally this function is called asynchronously with a notification on incoming data. 
            You can launch multiple reading jobs at the same time. They will be used sequential. The parameters Buff und Num 
            have to match to the parameters used on mounting the reading with InitCyclicReadEx. The easiest way would be, to send the same variables.
            </summary>
            <param name="buff">Array with DATA_RW-structures, similar to ReadMixEx</param>
            <param name="handle">Handle out of InitCyclixReadEx</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetCyclicReadEx(Accon.AGLink.AGL4.DATA_RW40[]@,System.Int32)">
            <summary>
            With this function you receive a package with variables from the PLC. The timeout value should be greater than 
            the configured cycle time. Ideally this function is called asynchronously with a notification on incoming data. 
            You can launch multiple reading jobs at the same time. They will be used sequential. The parameters Buff und Num 
            have to match to the parameters used on mounting the reading with InitCyclicReadEx. The easiest way would be, to send the same variables.
            </summary>
            <param name="buff">Array with DATA_RW-structures, similar to ReadMixEx</param>
            <param name="handle">Handle out of InitCyclixReadEx</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitScanMsg(System.Int32@,System.Int32)">
            <summary>
            With this function you enable the symbol-related messages on the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="opState">Variable for operating state of the PLC</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitScanMsg(System.Int32@)">
            <summary>
            With this function you enable the symbol-related messages on the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="opState">Variable for operating state of the PLC</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ExitScanMsg(System.Int32@,System.Int32)">
            <summary>
            With this function you can block the sending of symbol-related messages. A connection to the PLC must be already built up.
            </summary>
            <param name="opState">Variable for the operating status of the PLC</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ExitScanMsg(System.Int32@)">
            <summary>
            With this function you can block the sending of symbol-related messages. A connection to the PLC must be already built up.
            </summary>
            <param name="opState">Variable for the operating status of the PLC</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetScanMsg(Accon.AGLink.AGL4.S7_SCAN@,System.Int32)">
            <summary>
            With this function you receive a package with messages from the PLC. Ideally this function is 
            called asynchronously with a notification on incoming data. You can launch multiple reading jobs at the same time. They will be used sequential.
            </summary>
            <param name="scan">Structure for message-data</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetScanMsg(Accon.AGLink.AGL4.S7_SCAN@)">
            <summary>
            With this function you receive a package with messages from the PLC. Ideally this function is 
            called asynchronously with a notification on incoming data. You can launch multiple reading jobs at the same time. They will be used sequential.
            </summary>
            <param name="scan">Structure for message-data</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.HasAckTriggeredMsg(System.Int32@,System.Int32)">
            <summary>
            This function allows you to check the setting of the option »Acknowledgment of CRC 33-35«. A connection to the PLC must be already built up.
            </summary>
            <param name="mode">Variable for the settings</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.HasAckTriggeredMsg(System.Int32@)">
            <summary>
            This function allows you to check the setting of the option »Acknowledgment of CRC 33-35«. A connection to the PLC must be already built up.
            </summary>
            <param name="mode">Variable for the settings</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitAlarmMsg(System.Int32@,System.Int32)">
            <summary>
            This function enables the sending of block-related messages on the PLC. A connection to the PLC must be already built up. 
            </summary>
            <param name="opState">Variable for the operating state of the PLC</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitAlarmMsg(System.Int32@)">
            <summary>
            This function enables the sending of block-related messages on the PLC. A connection to the PLC must be already built up. 
            </summary>
            <param name="opState">Variable for the operating state of the PLC</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ExitAlarmMsg(System.Int32@,System.Int32)">
            <summary>
            This function disables the sending of block-related messages on the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="opState">Variable for the operating state of the PLC</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ExitAlarmMsg(System.Int32@)">
            <summary>
            This function disables the sending of block-related messages on the PLC. A connection to the PLC must be already built up.
            </summary>
            <param name="opState">Variable for the operating state of the PLC</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetAlarmMsg(Accon.AGLink.AGL4.S7_ALARM@,System.Int32)">
            <summary>
            With this function, you receive a message packet from the PLC. Ideally this function is called 
            asynchronously with a notification on incoming data. You can launch multiple reading jobs at the same time. They will be used sequential.
            </summary>
            <param name="alarm">Pointer to alarm structure</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetAlarmMsg(Accon.AGLink.AGL4.S7_ALARM@)">
            <summary>
            With this function, you receive a message packet from the PLC. Ideally this function is called 
            asynchronously with a notification on incoming data. You can launch multiple reading jobs at the same time. They will be used sequential.
            </summary>
            <param name="alarm">Pointer to alarm structure</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadOpenMsg(Accon.AGLink.AGL4.S7_OPEN_MSG_STATE[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            This feature allows you to read the open message. Ideally you call this function after the respective init function. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="state">Pointer to array for states</param>
            <param name="msgCount">Variable number of elements in the array when called and number of messages received after the call</param>
            <param name="msgType">Message type (Symbol, SFB, SFC)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ReadOpenMsg(Accon.AGLink.AGL4.S7_OPEN_MSG_STATE[]@,System.Int32@,System.Int32)">
            <summary>
            This feature allows you to read the open message. Ideally you call this function after the respective init function. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="state">Pointer to array for states</param>
            <param name="msgCount">Variable number of elements in the array when called and number of messages received after the call</param>
            <param name="msgType">Message type (Symbol, SFB, SFC)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetMsgStateChange(Accon.AGLink.AGL4.S7_RCV_MSG_STATE@,System.Int32)">
            <summary>
            With this function you can receive an alarm or acknowledgment message. 
            Thus you will get informed as well if e. g. another display device acknowledges a message. 
            Ideally this function is called asynchronously with a notification on incoming data. You can launch multiple 
            reading jobs at the same time. They will be used sequential.
            </summary>
            <param name="state">Pointer to structure for states</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetMsgStateChange(Accon.AGLink.AGL4.S7_RCV_MSG_STATE@)">
            <summary>
            With this function you can receive an alarm or acknowledgment message. 
            Thus you will get informed as well if e. g. another display device acknowledges a message. 
            Ideally this function is called asynchronously with a notification on incoming data. You can launch multiple 
            reading jobs at the same time. They will be used sequential.
            </summary>
            <param name="state">Pointer to structure for states</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.AckMsg(Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32,System.Int32)">
            <summary>
            With this function you can acknowledge messages. The number of acknowledgments must fit into one PDU. A connection to the PLC must be already built up.
            </summary>
            <param name="msg">Messages to be acknowledged</param>
            <param name="msgType">Type of message to be acknowledged</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.AckMsg(Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32)">
            <summary>
            With this function you can acknowledge messages. The number of acknowledgments must fit into one PDU. A connection to the PLC must be already built up.
            </summary>
            <param name="msg">Messages to be acknowledged</param>
            <param name="msgType">Type of message to be acknowledged</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.LockMsg(Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32,System.Int32)">
            <summary>
            With this function you can block the messages. A connection to the PLC must be already built up.
            </summary>
            <param name="msg">Messages to block</param>
            <param name="msgType">Type of the message to block</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.LockMsg(Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32)">
            <summary>
            With this function you can block the messages. A connection to the PLC must be already built up.
            </summary>
            <param name="msg">Messages to block</param>
            <param name="msgType">Type of the message to block</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.UnlockMsg(Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32,System.Int32)">
            <summary>
            With this function you can release messages. A connection to the PLC must be already built up.
            </summary>
            <param name="msg">Messages to be released</param>
            <param name="msgType">Type of message to be released</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.UnlockMsg(Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32)">
            <summary>
            With this function you can release messages. A connection to the PLC must be already built up.
            </summary>
            <param name="msg">Messages to be released</param>
            <param name="msgType">Type of message to be released</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitARSend(Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can activate the receiving of archive data. The desired IDs must be filled in the array pMsg. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="msg">Structure array with identifiers to be activated</param>
            <param name="handle">Variable to later identify the structure</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.InitARSend(Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32@)">
            <summary>
            With this function you can activate the receiving of archive data. The desired IDs must be filled in the array pMsg. 
            A connection to the PLC must be already built up.
            </summary>
            <param name="msg">Structure array with identifiers to be activated</param>
            <param name="handle">Variable to later identify the structure</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ExitARSend(Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32,System.Int32)">
            <summary>
            With this function you can log of from the archive data. The desired IDs must be filled in the array pMsg. A connection to the PLC must be already built up.
            </summary>
            <param name="msg">Structure array with identifiers to be activated</param>
            <param name="handle">Identification of the structure from InitARSend</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.ExitARSend(Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[]@,System.Int32)">
            <summary>
            With this function you can log of from the archive data. The desired IDs must be filled in the array pMsg. A connection to the PLC must be already built up.
            </summary>
            <param name="msg">Structure array with identifiers to be activated</param>
            <param name="handle">Identification of the structure from InitARSend</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetARSend(System.Byte[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can receive archive data. Ideally this function is called asynchronously with a notification 
            on incoming data. You can launch multiple read jobs at the same time. They will be used sequential.
            Pass the allocated length of the buffer on function call in the structure pwsa. 
            At the end of the function there you will get the length of the received data.
            </summary>
            <param name="abBuff">Structure for archive data</param>
            <param name="AR_ID">Variable for archive data</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.GetARSend(System.Byte[]@,System.Int32@)">
            <summary>
            With this function you can receive archive data. Ideally this function is called asynchronously with a notification 
            on incoming data. You can launch multiple read jobs at the same time. They will be used sequential.
            Pass the allocated length of the buffer on function call in the structure pwsa. 
            At the end of the function there you will get the length of the received data.
            </summary>
            <param name="abBuff">Structure for archive data</param>
            <param name="AR_ID">Variable for archive data</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_ReadMixEx(Accon.AGLink.AGL4.NckDataRW[]@,System.Int32)">
            <summary>
            This feature allows you to read various data types and data sizes in one job. A connection to the NCK must be already built up.
            </summary>
            <param name="buff">Pointer to reading structure</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_ReadMixEx(Accon.AGLink.AGL4.NckDataRW[]@)">
            <summary>
            This feature allows you to read various data types and data sizes in one job. A connection to the NCK must be already built up.
            </summary>
            <param name="buff">Pointer to reading structure</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_WriteMixEx(Accon.AGLink.AGL4.NckDataRW[]@,System.Int32)">
            <summary>
            With this function you can write various data types and data sizes in one job. A connection to the NCK must be already built up.
            </summary>
            <param name="buff">Pointer to writing structures</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_WriteMixEx(Accon.AGLink.AGL4.NckDataRW[]@)">
            <summary>
            With this function you can write various data types and data sizes in one job. A connection to the NCK must be already built up.
            </summary>
            <param name="buff">Pointer to writing structures</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_CheckVarSize(Accon.AGLink.AGL4.NckDataRW[]@,System.Int32)">
            <summary>
            With this function you can check the length of the variables on the NCK. This feature has been implemented, as the data type or 
            data length specified in the documentation is not always correct causing errors as e.g. AGL40_PDUSIZE_ERROR. Call this function as well as the 
            functions NCK_ReadMixEx or NCK_WriteMixEx. The NCKDataRW structure has to be initialized as well as for these two functions. The difference 
            is that with this function no arrays are checked but only one array element ie, the RowCount field must be 1.  If RowCount &lt;&gt; 1, the values of BuffLen and 
            RowCount are converted automatically by ACCON-AGLink. In this case BuffLen is divided by RowCount and the value 1 is used for RowCount. After calling the function, 
            the Result field of the structure contains AGL40_SUCCESS if the length is right. It contains AGL40_WRONG_VAR_SIZE and the right length in the BuffLen field when the 
            NCK sends another data length. It contains the appropriate error code if the variable could not be read. The DDEVarType or MDEVarType fields 
            remain always unchanged, because the data type is not sent by the NCK and for this purpose an analysis of the data would be required. A connection to the NCK must be already built up.
            </summary>
            <param name="buff">Pointer to structures to be checked</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_CheckVarSize(Accon.AGLink.AGL4.NckDataRW[]@)">
            <summary>
            With this function you can check the length of the variables on the NCK. This feature has been implemented, as the data type or 
            data length specified in the documentation is not always correct causing errors as e.g. AGL40_PDUSIZE_ERROR. Call this function as well as the 
            functions NCK_ReadMixEx or NCK_WriteMixEx. The NCKDataRW structure has to be initialized as well as for these two functions. The difference 
            is that with this function no arrays are checked but only one array element ie, the RowCount field must be 1.  If RowCount &lt;&gt; 1, the values of BuffLen and 
            RowCount are converted automatically by ACCON-AGLink. In this case BuffLen is divided by RowCount and the value 1 is used for RowCount. After calling the function, 
            the Result field of the structure contains AGL40_SUCCESS if the length is right. It contains AGL40_WRONG_VAR_SIZE and the right length in the BuffLen field when the 
            NCK sends another data length. It contains the appropriate error code if the variable could not be read. The DDEVarType or MDEVarType fields 
            remain always unchanged, because the data type is not sent by the NCK and for this purpose an analysis of the data would be required. A connection to the NCK must be already built up.
            </summary>
            <param name="buff">Pointer to structures to be checked</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_InitCyclicReadEx(System.Int32,System.Boolean,Accon.AGLink.AGL4.NckDataRW[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the 
            NCK sends the value of the variables automatically in a configured frame. You don’t have to poll them explicit. 
            If you call the function with the flag »OnlyChanged«, you only get the variables if the value of at least one of 
            the requested variables has changed. Thus the communication load is once again reduced significantly. When the cyclical 
            reading is started you have to launch NCK_GetCyclicReadEx jobs to receive the values.
            You have to pay attention that the whole query has to fit in one PDU. That applies as well the request as to the response
            telegram with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            The reading structures contain the current state of the variable on on successful return of the function if the flag »OnlyChanged« is set.
            </summary>
            <param name="cycleTime">Cycletime in milliseconds</param>
            <param name="onlyChanged">Flag whether variables are transmitted only when changing</param>
            <param name="buff">DATA_RW array of structures, like ReadMix</param>
            <param name="handle">Variable for the handle</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_InitCyclicReadEx(System.Int32,System.Boolean,Accon.AGLink.AGL4.NckDataRW[]@,System.Int32@)">
            <summary>
            With this function you can initialize the cyclical reading of variables. At this kind of communication the 
            NCK sends the value of the variables automatically in a configured frame. You don’t have to poll them explicit. 
            If you call the function with the flag »OnlyChanged«, you only get the variables if the value of at least one of 
            the requested variables has changed. Thus the communication load is once again reduced significantly. When the cyclical 
            reading is started you have to launch NCK_GetCyclicReadEx jobs to receive the values.
            You have to pay attention that the whole query has to fit in one PDU. That applies as well the request as to the response
            telegram with the values. If this isn’t fullfilled, the error code AGL40_PLC_BLOCKSIZE_ERROR will be returned starting from the element which doesn’t fit.
            Only the following values are valid for the parameter CycleTime: 100, 200, ... 800, 900, 1000, 2000, ... 8000, 9000, 
            10000, 20000, ... 80000, 90000. Other values will be rounded by ACCON-AGLink before use.
            The reading structures contain the current state of the variable on on successful return of the function if the flag »OnlyChanged« is set.
            </summary>
            <param name="cycleTime">Cycletime in milliseconds</param>
            <param name="onlyChanged">Flag whether variables are transmitted only when changing</param>
            <param name="buff">DATA_RW array of structures, like ReadMix</param>
            <param name="handle">Variable for the handle</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_StartCyclicRead(System.Int32,System.Int32)">
            <summary>
            With this function you start the cyclic reading of variables. You need this if you have stopped reading 
            using NCK_StopCyclicRead. A connection to the NCK must be already built up and the cyclical reading must be initialized.
            </summary>
            <param name="handle">The handle out of NCK_InitCyclixReadEx</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_StartCyclicRead(System.Int32)">
            <summary>
            With this function you start the cyclic reading of variables. You need this if you have stopped reading 
            using NCK_StopCyclicRead. A connection to the NCK must be already built up and the cyclical reading must be initialized.
            </summary>
            <param name="handle">The handle out of NCK_InitCyclixReadEx</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_StopCyclicRead(System.Int32,System.Int32)">
            <summary>
            With this function you can stop or interrupt the cyclic reading of variables. A connection to the NCK must
            be already built up and the cyclical reading must be initialized.
            </summary>
            <param name="handle">The handle of NCK_InitCyclixReadEx</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_StopCyclicRead(System.Int32)">
            <summary>
            With this function you can stop or interrupt the cyclic reading of variables. A connection to the NCK must
            be already built up and the cyclical reading must be initialized.
            </summary>
            <param name="handle">The handle of NCK_InitCyclixReadEx</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_ExitCyclicRead(System.Int32,System.Int32)">
            <summary>
            With this function you can stop the reading and release the resources on the NCK. 
            A connection to the NCK must be already built up and the cyclical reading must be initialized.
            </summary>
            <param name="handle">The handle of NCK_InitCyclixReadEx</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_ExitCyclicRead(System.Int32)">
            <summary>
            With this function you can stop the reading and release the resources on the NCK. 
            A connection to the NCK must be already built up and the cyclical reading must be initialized.
            </summary>
            <param name="handle">The handle of NCK_InitCyclixReadEx</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_GetCyclicReadEx(Accon.AGLink.AGL4.NckDataRW[]@,System.Int32,System.Int32)">
            <summary>
            With this function, you receive a package with variables from the NCK. Ideally this function is called 
            asynchronously with a notification on incoming data. You can launch multiple reading jobs at the same time. They will be used sequential.
            The parameters Buff und Num have to match to the parameters used on initializing the reading with 
            NCK_InitCyclicReadEx. The easiest way would be, to send the same variables.
            </summary>
            <param name="buff">Array with NCKDataRW-structures</param>
            <param name="handle">Handle out of NCK_InitCylicReadEx</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_GetCyclicReadEx(Accon.AGLink.AGL4.NckDataRW[]@,System.Int32)">
            <summary>
            With this function, you receive a package with variables from the NCK. Ideally this function is called 
            asynchronously with a notification on incoming data. You can launch multiple reading jobs at the same time. They will be used sequential.
            The parameters Buff und Num have to match to the parameters used on initializing the reading with 
            NCK_InitCyclicReadEx. The easiest way would be, to send the same variables.
            </summary>
            <param name="buff">Array with NCKDataRW-structures</param>
            <param name="handle">Handle out of NCK_InitCylicReadEx</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_StartAll(System.Byte[],System.String,System.Int32)">
            <summary>
            With this function you can run an arbitrary PI service. You must pass the required 
            parameters into the function exactly as expected by the NCK and specify the PI service 
            in the parameter cmd. A connection to the NCK must be already built up.
            </summary>
            <param name="para">Parameter for the PI-service</param>
            <param name="command">Name of the PI service</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_StartAll(System.Byte[],System.String)">
            <summary>
            With this function you can run an arbitrary PI service. You must pass the required 
            parameters into the function exactly as expected by the NCK and specify the PI service 
            in the parameter cmd. A connection to the NCK must be already built up.
            </summary>
            <param name="para">Parameter for the PI-service</param>
            <param name="command">Name of the PI service</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_EXTERN(System.Int32,System.String,System.Int32)">
            <summary>
            This function allows you to select a program for a channel from extern. The program may not 
            reside in the passive file system of the NCK. The program name will be activated with this PI service. 
            It will be deselected on the end of the program or on channel reset. This is a channel-specific service, 
            so the channel number must be specified. Once the program is activated, it must be transferred with the 
            function NCK_CopyFileToNC. A connection to the NCK must be already built up.
            </summary>
            <param name="channel">The number of the channel</param>
            <param name="progName">The name of the programm (max. 32 characters)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_EXTERN(System.Int32,System.String)">
            <summary>
            This function allows you to select a program for a channel from extern. The program may not 
            reside in the passive file system of the NCK. The program name will be activated with this PI service. 
            It will be deselected on the end of the program or on channel reset. This is a channel-specific service, 
            so the channel number must be specified. Once the program is activated, it must be transferred with the 
            function NCK_CopyFileToNC. A connection to the NCK must be already built up.
            </summary>
            <param name="channel">The number of the channel</param>
            <param name="progName">The name of the programm (max. 32 characters)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_EXTMOD(System.Int32,System.String,System.Int32)">
            <summary>
            This function allows you to select a program for a channel from extern. The program may not reside 
            in the passive file system of the NCK. The program name will be activated with this PI service. 
            In contrast to NCK_PI_EXTERN it will stay selected on the end of the program and on channel reset. 
            This is a channel-specific service, so the channel number must be specified. Once the program is activated, 
            it must be transferred with the function NCK_CopyFileToNC. A connection to the NCK must be already built up.
            </summary>
            <param name="channel">The number of the channel</param>
            <param name="progName">The name of the programm (max. 32 characters)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_EXTMOD(System.Int32,System.String)">
            <summary>
            This function allows you to select a program for a channel from extern. The program may not reside 
            in the passive file system of the NCK. The program name will be activated with this PI service. 
            In contrast to NCK_PI_EXTERN it will stay selected on the end of the program and on channel reset. 
            This is a channel-specific service, so the channel number must be specified. Once the program is activated, 
            it must be transferred with the function NCK_CopyFileToNC. A connection to the NCK must be already built up.
            </summary>
            <param name="channel">The number of the channel</param>
            <param name="progName">The name of the programm (max. 32 characters)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_SELECT(System.Int32,System.String,System.Int32)">
            <summary>
            This function allows you to select a program residing in the passive file system of the NCK 
            for a channel to execute. The program name will be activated with this PI service. For this it 
            has to be an executable file. This is a channel-specific service, so the channel number must be 
            specified. A connection to the NCK must be already built up.
            </summary>
            <param name="channel">The number of the channel</param>
            <param name="progName">The name of the programm (max. 32 character)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_SELECT(System.Int32,System.String)">
            <summary>
            This function allows you to select a program residing in the passive file system of the NCK 
            for a channel to execute. The program name will be activated with this PI service. For this it 
            has to be an executable file. This is a channel-specific service, so the channel number must be 
            specified. A connection to the NCK must be already built up.
            </summary>
            <param name="channel">The number of the channel</param>
            <param name="progName">The name of the programm (max. 32 character)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_DELE(System.String,System.Int32)">
            <summary>
            This feature allows you to delete a file or directory in the passive file system of the NCK. 
            This is only possible if is deleting is enabled for the file or folder at the current accesslevel. 
            A directory (_DIR) can only be deleted if it contains no entry. A workpiece directory (_WPD) can be 
            deleted with all containing modules. A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">The name of the file (max. 32 character)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_DELE(System.String)">
            <summary>
            This feature allows you to delete a file or directory in the passive file system of the NCK. 
            This is only possible if is deleting is enabled for the file or folder at the current accesslevel. 
            A directory (_DIR) can only be deleted if it contains no entry. A workpiece directory (_WPD) can be 
            deleted with all containing modules. A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">The name of the file (max. 32 character)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_XFER(System.String,System.Int32)">
            <summary>
            This feature allows you to select a block in the passive file system to upload. 
            The files in the hierarchical part of the passive file system on the NCK can be addressed 
            only through the absolute path name. This PI service can make a file of the passive file system 
            addressable to upload. The directory "_N_XFER_DIR" is always browsed first, when uploading. 
            If the filename is found here, it is transfered by the NCK. This assignment remains active until 
            the completion of the transfer. It is also possible to delete the file name from the directory 
            "_N_XFER_DIR" again without making a transfer. This will only remove the file reference from the 
            directory without deleting the file. Multiple files can be referenced at the same time. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">The name of the file (max. 32 character)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_XFER(System.String)">
            <summary>
            This feature allows you to select a block in the passive file system to upload. 
            The files in the hierarchical part of the passive file system on the NCK can be addressed 
            only through the absolute path name. This PI service can make a file of the passive file system 
            addressable to upload. The directory "_N_XFER_DIR" is always browsed first, when uploading. 
            If the filename is found here, it is transfered by the NCK. This assignment remains active until 
            the completion of the transfer. It is also possible to delete the file name from the directory 
            "_N_XFER_DIR" again without making a transfer. This will only remove the file reference from the 
            directory without deleting the file. Multiple files can be referenced at the same time. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">The name of the file (max. 32 character)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_PROT(System.String,System.String,System.Int32)">
            <summary>
            With this function you can assign security rights to a saved NCK file. The NCK will check whether a 
            change of the rights for the specified file is possible under the topically valid conditions. 
            The security rights apply to the file functions »read«, »write«, »list«, »delete« and use 7 levels. 
            The file function »execute« can have only two protection levels: 0 (file can not be selected for execution) 
            and 7 (file can be selected for execution). Level 0 is the highest protection level, i.e. only a user with 
            knowledge of the system password file, can execute the respective function or change the rights. The lowest 
            security level is 7 giving every user the right to execute the function or to change the rights.
            Protection is a numberstring with 5 numeric characters specifying the access level for read, write, execute, 
            list and delete. Each character represents the access level of a specific file function. 
            The positions correspond (from left to right) to the resp. functions:
            1. Position: Protection level for read 		0 to 7 	(or '-')
            2. Position: Protection level for write 		0 to 7 	(or '-')
            3. Position: Protection level for execute 		0 to 7 	(or '-')
            4. Position: Protection level for list 			0 or 7
            5. Position: Protection level for delete		0 to 7 	(or '-')
            A connection to the NCK must be already built up.
            </summary>
            <param name="filename">The name of the file (max. 32 characters)</param>
            <param name="protection">Protection level to set</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_PROT(System.String,System.String)">
            <summary>
            With this function you can assign security rights to a saved NCK file. The NCK will check whether a 
            change of the rights for the specified file is possible under the topically valid conditions. 
            The security rights apply to the file functions »read«, »write«, »list«, »delete« and use 7 levels. 
            The file function »execute« can have only two protection levels: 0 (file can not be selected for execution) 
            and 7 (file can be selected for execution). Level 0 is the highest protection level, i.e. only a user with 
            knowledge of the system password file, can execute the respective function or change the rights. The lowest 
            security level is 7 giving every user the right to execute the function or to change the rights.
            Protection is a numberstring with 5 numeric characters specifying the access level for read, write, execute, 
            list and delete. Each character represents the access level of a specific file function. 
            The positions correspond (from left to right) to the resp. functions:
            1. Position: Protection level for read 		0 to 7 	(or '-')
            2. Position: Protection level for write 		0 to 7 	(or '-')
            3. Position: Protection level for execute 		0 to 7 	(or '-')
            4. Position: Protection level for list 			0 or 7
            5. Position: Protection level for delete		0 to 7 	(or '-')
            A connection to the NCK must be already built up.
            </summary>
            <param name="filename">The name of the file (max. 32 characters)</param>
            <param name="protection">Protection level to set</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_RENA(System.String,System.String,System.Int32)">
            <summary>
            With this function you can rename a file or directory of the passive filesystem. A connection to the NCK must be already built up.
            </summary>
            <param name="oldFilename">Old name of the file (max. 32 character)</param>
            <param name="newFilename">New name of the file (max. 32 character)</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_RENA(System.String,System.String)">
            <summary>
            With this function you can rename a file or directory of the passive filesystem. A connection to the NCK must be already built up.
            </summary>
            <param name="oldFilename">Old name of the file (max. 32 character)</param>
            <param name="newFilename">New name of the file (max. 32 character)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_LOGIN(System.String,System.Int32)">
            <summary>
            With this function you can send a password to the NCK to set the current access level. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="password">The password with exactly 8 characters, if necessary filled with spaces</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_LOGIN(System.String)">
            <summary>
            With this function you can send a password to the NCK to set the current access level. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="password">The password with exactly 8 characters, if necessary filled with spaces</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_LOGOUT(System.Int32)">
            <summary>
            With this function you can reset the current access level. A connection to the NCK must be already built up.
            </summary>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_LOGOUT">
            <summary>
            With this function you can reset the current access level. A connection to the NCK must be already built up.
            </summary>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_OPEN(System.String,System.String,System.Int32)">
            <summary>
            A file of the passive file system is opened for reading and writing (this does not apply to the blocks of the passive file system: Directory _DIR or _WPD). 
            A temporary edit window with the name 'Window Name' is created in which the open file can be changed (see also NCK_F_OPER). 
            When a file is only needed for reading, the NCK_F_OPER function should be used. This avoids that the file is created if it does not exist. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">Name of the program on the NCK to be processed</param>
            <param name="windowName">Name of the edit window</param>
            <param name="timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_OPEN(System.String,System.String)">
            <summary>
            A file of the passive file system is opened for reading and writing (this does not apply to the blocks of the passive file system: Directory _DIR or _WPD). 
            A temporary edit window with the name 'Window Name' is created in which the open file can be changed (see also NCK_F_OPER). 
            When a file is only needed for reading, the NCK_F_OPER function should be used. This avoids that the file is created if it does not exist. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">Name of the program on the NCK to be processed</param>
            <param name="windowName">Name of the edit window</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error numbe</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_OPER(System.String,System.String,System.Int32)">
            <summary>
            A file of the passive file system is opened for reading (This does not apply to the blocks of the passive file system: Directory _DIR or _WPD). 
            The function corresponds in the configuration and functionality to the NCK_PI _F_OPEN function. The only difference is that NCK_PI _F_OPER 
            opens the file exclusively for reading, whereas NCK_PI _F_OPEN permits write accesses. A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">Name of the program on the NCK to be processed</param>
            <param name="windowName">Name of the edit window</param>
            <param name="timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_OPER(System.String,System.String)">
            <summary>
            A file of the passive file system is opened for reading (This does not apply to the blocks of the passive file system: Directory _DIR or _WPD). 
            The function corresponds in the configuration and functionality to the NCK_PI _F_OPEN function. The only difference is that NCK_PI _F_OPER 
            opens the file exclusively for reading, whereas NCK_PI _F_OPEN permits write accesses. A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">Name of the program on the NCK to be processed</param>
            <param name="windowName">Name of the edit window</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_SEEK(System.String,Accon.AGLink.AGL4.SeekMode,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            The edit cursor in an edit window generated by the function NCK_PI_F_OPEN or NCK_PI_F_OPER is placed to a certain position. The edit cursor is before the position found: 
            - in block-wise accesses at the beginning of the NC block containing the search string, 
            - in char-wise accesses at the beginning of the found search string (possibly in mid-sentence)
            A connection to the NCK must be already built up and either the function NCK_PI_F_OPEN or NCK_PI_F_OPER must been called. The NCK_PI_F_CLOS function may not have been called.
            </summary>
            <param name="windowName">Name of the edit window. Here the name of the window from the function NCK_PI_F_OPEN or NCK_PI_F_OPER must be used</param>
            <param name="seekMode">0 = Block Mode (line by line), 1 = Character Mode (character by character)</param>
            <param name="seekPointer">Position within the file relative to the beginning of the file, 1 &lt;= SeekPointer &lt;= 99999999</param>
            <param name="windowSize">Number of elements (lines or characters depending on SeekMode) that are addressable via the edit window, 1 &lt;= WindowSize &lt;= 99999</param>
            <param name="compareString">By positioning a search process can be linked. If the search string is not found, the PI service is negatively acknowledged and the seek pointer retains its original position.</param>
            <param name="skipCount">The search job can be parameterized so that a certain number of found search string iare skipped, 0 &lt;= Skip Count &lt;= 99999.</param>
            <param name="timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_SEEK(System.String,Accon.AGLink.AGL4.SeekMode,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            The edit cursor in an edit window generated by the function NCK_PI_F_OPEN or NCK_PI_F_OPER is placed to a certain position. The edit cursor is before the position found: 
            - in block-wise accesses at the beginning of the NC block containing the search string, 
            - in char-wise accesses at the beginning of the found search string (possibly in mid-sentence)
            A connection to the NCK must be already built up and either the function NCK_PI_F_OPEN or NCK_PI_F_OPER must been called. The NCK_PI_F_CLOS function may not have been called.
            </summary>
            <param name="windowName">Name of the edit window. Here the name of the window from the function NCK_PI_F_OPEN or NCK_PI_F_OPER must be used</param>
            <param name="seekMode">0 = Block Mode (line by line), 1 = Character Mode (character by character)</param>
            <param name="seekPointer">Position within the file relative to the beginning of the file, 1 &lt;= SeekPointer &lt;= 99999999</param>
            <param name="windowSize">Number of elements (lines or characters depending on SeekMode) that are addressable via the edit window, 1 &lt;= WindowSize &lt;= 99999</param>
            <param name="compareString">By positioning a search process can be linked. If the search string is not found, the PI service is negatively acknowledged and the seek pointer retains its original position.</param>
            <param name="skipCount">The search job can be parameterized so that a certain number of found search string iare skipped, 0 &lt;= Skip Count &lt;= 99999.</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_CLOS(System.String,System.Int32)">
            <summary>
            A file of the passive file system on the NCK is closed. The edit window is implicitly deleted. A connection to the NCK must be already built up and either the function NCK_PI_F_OPEN or NCK_PI_F_OPER must been called.
            </summary>
            <param name="windowName">Name of the edit window</param>
            <param name="timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_CLOS(System.String)">
            <summary>
            A file of the passive file system on the NCK is closed. The edit window is implicitly deleted. A connection to the NCK must be already built up and either the function NCK_PI_F_OPEN or NCK_PI_F_OPER must been called.
            </summary>
            <param name="windowName">Name of the edit window</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_COPY(System.Int32,System.String,System.String)">
            <summary>
            Copy modules and directories on the NCK.
            </summary>
            <param name="Direction">Copy direction</param>
            <param name="SourceFileName">Name of the source file with max 32 characters. 
            i.e. /_N_yyyy_xxx/_N_yyyy_zzz/...
            yyyy = any text  (max. 25 characters) for file or pathname.
            xxx = DIR or WPD (meaning directory)
            zzz = Fileending</param>
            <param name="DestinationFileName">Name of destination file with max 32 characters.
            i.e. /_N_yyyy_xxx/_N_yyyy_zzz/...
            yyyy = any text  (max. 25 characters) for file or pathname.
            xxx = DIR or WPD (meaning directory)
            zzz = Fileending</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_COPY(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Copy modules and directories on the NCK.
            </summary>
            <param name="Direction">Copy direction</param>
            <param name="SourceFileName">Name of the source file with max 32 characters. 
            i.e. /_N_yyyy_xxx/_N_yyyy_zzz/...
            yyyy = any text  (max. 25 characters) for file or pathname.
            xxx = DIR or WPD (meaning directory)
            zzz = Fileending</param>
            <param name="DestinationFileName">Name of destination file with max 32 characters.
            i.e. /_N_yyyy_xxx/_N_yyyy_zzz/...
            yyyy = any text  (max. 25 characters) for file or pathname.
            xxx = DIR or WPD (meaning directory)
            zzz = Fileending</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_PROR(System.String,System.String)">
            <summary>
            Update access security attributes of a file.
            </summary>
            <param name="FileName">Filename with max 32 characters.
            i.e. /_N_yyyy_xxx/_N_yyyy_zzz/...
            yyyy = any text  (max. 25 characters) for file or pathname.
            xxx = DIR or WPD (meaning directory)
            zzz = Fileending</param>
            <param name="Protection">Number with exactly 5 digits. Security attributes are defined as Read, Write, Execute, Display/Open and Delete.
            starting from the left the digits have the following meaning:
            1. Attribute for Read: 0 - 7 (or -)
            2. Attrbute for Write: 0 - 7 (or -)
            3. Attribute for Execute: 0 - 7 (or -)
            4. Attribute for Display/Open: 0 or 7
            5. Attribute for Delete: 0 - 7 (or -)</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_F_PROR(System.String,System.String,System.Int32)">
            <summary>
            Update access security attributes of a file.
            </summary>
            <param name="FileName">Filename with max 32 characters.
            i.e. /_N_yyyy_xxx/_N_yyyy_zzz/...
            yyyy = any text  (max. 25 characters) for file or pathname.
            xxx = DIR or WPD (meaning directory)
            zzz = Fileending</param>
            <param name="Protection">Number with exactly 5 digits. Security attributes are defined as Read, Write, Execute, Display/Open and Delete.
            starting from the left the digits have the following meaning:
            1. Attribute for Read: 0 - 7 (or -)
            2. Attrbute for Write: 0 - 7 (or -)
            3. Attribute for Execute: 0 - 7 (or -)
            4. Attribute for Display/Open: 0 or 7
            5. Attribute for Delete: 0 - 7 (or -)</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_CANCEL">
            <summary>
            All alarms of type "Cancel-Alarm" can be acknowledged using this command. Single alarms cannot be acknowledged with this command.
            </summary>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_CANCEL(System.Int32)">
            <summary>
            All alarms of type "Cancel-Alarm" can be acknowledged using this command. Single alarms cannot be acknowledged with this command.
            </summary>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_CRCEDN(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a cutting edge using the given number. If the tool of the used T-Number exists then the cutting edge will be added to the tool (in this case the value range of the D-Number is 1 to 9).
            If the T-Number is a positive number and the corresponding tool does not exist, then the function will fail.
            If 0 is used as the T-Number then the value range of the D-Number is extends from 1 to 31999. 
            The new cutting edge will be created with the given D-Number. If the cutting edge with the corrsponding number already exists then the function will fail.
            </summary>
            <param name="ToolArea">Number of Tool Area</param>
            <param name="TNumber">T-Number of the tool that gets the cutting edge assigned. The value 0 means that no assignment to a tool will be made.</param>
            <param name="DNumber">Number of the cutting edge:
            T-Number = 0: 1 - 31999
            T-Number &gt; 0: 1 - 9</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_CRCEDN(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a cutting edge using the given number. If the tool of the used T-Number exists then the cutting edge will be added to the tool (in this case the value range of the D-Number is 1 to 9).
            If the T-Number is a positive number and the corresponding tool does not exist, then the function will fail.
            If 0 is used as the T-Number then the value range of the D-Number is extends from 1 to 31999. 
            The new cutting edge will be created with the given D-Number. If the cutting edge with the corrsponding number already exists then the function will fail.
            </summary>
            <param name="ToolArea">Number of Tool Area</param>
            <param name="TNumber">T-Number of the tool that gets the cutting edge assigned. The value 0 means that no assignment to a tool will be made.</param>
            <param name="DNumber">Number of the cutting edge:
            T-Number = 0: 1 - 31999
            T-Number &gt; 0: 1 - 9</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_DELECE(System.Int32,System.Int32,System.Int32)">
            <summary>
            Delete a cutting edge .If the tool of the used T-Number exists then the cutting edge will be removed from this tool (in this case the value range of the D-Number is 1 to 9).
            If the T-Number is a positive number and the corresponding tool does not exist, then the function will fail.
            If 0 is used as the T-Number then the value range of the D-Number is extends from 1 to 31999. 
            If the cutting edge with the corrsponding number does not exists then the function will fail.
            </summary>
            <param name="ToolArea">Number of Tool Area</param>
            <param name="TNumber">T-Number of the tool to delete the cutting edge from. The value 0 means that no assignment to a tool will be made.</param>
            <param name="DNumber">Number of the cutting edge:
            T-Number = 0: 1 - 31999
            T-Number &gt; 0: 1 - 9</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_DELECE(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Delete a cutting edge .If the tool of the used T-Number exists then the cutting edge will be removed from this tool (in this case the value range of the D-Number is 1 to 9).
            If the T-Number is a positive number and the corresponding tool does not exist, then the function will fail.
            If 0 is used as the T-Number then the value range of the D-Number is extends from 1 to 31999. 
            If the cutting edge with the corrsponding number does not exists then the function will fail.
            </summary>
            <param name="ToolArea">Number of Tool Area</param>
            <param name="TNumber">T-Number of the tool to delete the cutting edge from. The value 0 means that no assignment to a tool will be made.</param>
            <param name="DNumber">Number of the cutting edge:
            T-Number = 0: 1 - 31999
            T-Number &gt; 0: 1 - 9</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_DELETO(System.Int32,System.Int32)">
            <summary>
            Deletes a tool an all cutting edges in every data modules. The tool is also deleted in the following data modules if one exists: TO, TU, TUE, TV, TG (Typ 400), TD, TS.
            </summary>
            <param name="ToolArea">Number of Tool Area</param>
            <param name="TNumber">T-Number of the tool. Value range is 1 to 31999</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_DELETO(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes a tool an all cutting edges in every data modules. The tool is also deleted in the following data modules if one exists: TO, TU, TUE, TV, TG (Typ 400), TD, TS.
            </summary>
            <param name="ToolArea">Number of Tool Area</param>
            <param name="TNumber">T-Number of the tool. Value range is 1 to 31999</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_IBN_SS(System.Int32)">
            <summary>
            Switch for operation start. This service is only available for SINUMERIK FM-NC. For SINUMERIK 840D there is an special switch.
            Using this switch you can switch the NC to various operation states.
            </summary>
            <param name="Switch">Position of the switch. Possible values are AGL4.NCK_IBN_SS_XXX</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_IBN_SS(System.Int32,System.Int32)">
            <summary>
            Switch for operation start. This service is only available for SINMERIK FM-NC. For SINUMERIK 840D there is an special switch.
            Using this switch you can switch the NC to various operation states.
            </summary>
            <param name="Switch">Position of the switch. Possible values are AGL4.NCK_IBN_SS_XXX</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_MMCSEM(System.Int32,System.Int32,System.Int32)">
            <summary>
            For every channel there are 10 semaphores to protect the critical function of the MMC.
            Multiple MMC units can synchronize to a semaphore that that is set to a specific function number ( 1 &gt;= function number &gt;= 10) 
            if a function contains a critical section corresponding to the data that have to be retrieved by the NCK.
            The MMC manages the semaphores.
            The semaphore value 1 speficfies a test and set operation regarding the semaphoe and the used function number.
            The return value of the PI service is the result of this operation.
            Return value OK: Semaphore could be set the critical function can be called.
            Return value REJECTED: Semaphore was already set the critical function can be called at the moment.
            The semaphore value 0 specifies to reset the semaphore.
            </summary>
            <param name="ChannelNumber">Area id and identifier. Structured as "2XY" and XY is the channel number.</param>
            <param name="FunctionNumber">Number of service function. Possible values are AGL4.NCK_MMCSEM_XXX</param>
            <param name="SemaValue">0: reset the semaphore or 1: test and set semaphore</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_MMCSEM(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            For every channel there are 10 semaphores to protect the critical function of the MMC.
            Multiple MMC units can synchronize to a semaphore that that is set to a specific function number ( 1 &gt;= function number &gt;= 10) 
            if a function contains a critical section corresponding to the data that have to be retrieved by the NCK.
            The MMC manages the semaphores.
            The semaphore value 1 speficfies a test and set operation regarding the semaphoe and the used function number.
            The return value of the PI service is the result of this operation.
            Return value OK: Semaphore could be set the critical function can be called.
            Return value REJECTED: Semaphore was already set the critical function can be called at the moment.
            The semaphore value 0 specifies to reset the semaphore.
            </summary>
            <param name="ChannelNumber">Area id and identifier. Structured as "2XY" and XY is the channel number.</param>
            <param name="FunctionNumber">Number of service function. Possible values are AGL4.NCK_MMCSEM_XXX</param>
            <param name="SemaValue">0: reset the semaphore or 1: test and set semaphore</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_TMCRTO(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Create a tool using a name, Duplo-Number and optionally a T-Number.
            The following data modules are affacted by this function:
            Tool directory TV: The tool will be added as existing
            Tool corrections TO: The first cutting edge D1 with NULL content will be added
            Monitoring TS: The first cutting edge D1 with NULL content will be added
            User edge data TUE: (if existing) The first cutting edge D1 with NULL content will be added
            User tool data TU: (if existing) an empty data set will be created for the tool
            Common tool data TD: an empty data set will be created for the tool
            Monitoring TSU: (if existing) first edge for OEM Monitoring data
            
            </summary>
            <param name="ToolArea">Number of Tool Area</param>
            <param name="ToolID">Tool name (max 32 characters even number of chracters)</param>
            <param name="ToolNumber">Tool-Number
            1 to 31999: user defined Tool-Number
            -1: NCK set ToolNumber</param>
            <param name="DuploNumber">Duplo-Number
            1 to 31999: user defined Duplo-Number
            0: NCK uses the next higher number</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_TMCRTO(System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a tool using a name, Duplo-Number and optionally a T-Number.
            The following data modules are affacted by this function:
            Tool directory TV: The tool will be added as existing
            Tool corrections TO: The first cutting edge D1 with NULL content will be added
            Monitoring TS: The first cutting edge D1 with NULL content will be added
            User edge data TUE: (if existing) The first cutting edge D1 with NULL content will be added
            User tool data TU: (if existing) an empty data set will be created for the tool
            Common tool data TD: an empty data set will be created for the tool
            Monitoring TSU: (if existing) first edge for OEM Monitoring data
            
            </summary>
            <param name="ToolArea">Number of Tool Area</param>
            <param name="ToolID">Tool name (max 32 characters even number of chracters)</param>
            <param name="ToolNumber">Tool-Number
            1 to 31999: user defined Tool-Number
            -1: NCK set ToolNumber</param>
            <param name="DuploNumber">Duplo-Number
            1 to 31999: user defined Duplo-Number
            0: NCK uses the next higher number</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_TMMVTL(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This service is used for load and unload. The operation that is executed depends on the assignment of the real places of the 'Source' and 'Destination' paramtgers:
            'Source'-Parameter = Load station/place -&gt; means prepare magazine place to load.
            'Destination'-Parametr = Load station/place -&gt; means unload tool
            </summary>
            <param name="ToolArea">Number of Tool Area</param>
            <param name="ToolNumber">Tool-Number 1 to 31999
            -1: no Tool-Number specified (Valid for function 'Unload') </param>
            <param name="SourcePlaceNumber">Place number 1 to 31999
            -1: i.e. for unload if the place is already specified via the T-Number (ToolNumber)</param>
            <param name="SourceMagazineNumber">Magazine number 1 to 31999
            -1: i.e. for unload if the place is already specified via the T-Number (ToolNumber)
            9999: Load station</param>
            <param name="DestinationPlaceNumber">Place number 1 to 31999
            -1: search for an empty place and move magazine
            -2: tool will be loaded to the currently used position</param>
            <param name="DestinationMagazineNumber">Magazine number 1 to 32000
            9999: Load station</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_PI_TMMVTL(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This service is used for load and unload. The operation that is executed depends on the assignment of the real places of the 'Source' and 'Destination' paramtgers:
            'Source'-Parameter = Load station/place -&gt; means prepare magazine place to load.
            'Destination'-Parametr = Load station/place -&gt; means unload tool
            </summary>
            <param name="ToolArea">Number of Tool Area</param>
            <param name="ToolNumber">Tool-Number 1 to 31999
            -1: no Tool-Number specified (Valid for function 'Unload') </param>
            <param name="SourcePlaceNumber">Place number 1 to 31999
            -1: i.e. for unload if the place is already specified via the T-Number (ToolNumber)</param>
            <param name="SourceMagazineNumber">Magazine number 1 to 31999
            -1: i.e. for unload if the place is already specified via the T-Number (ToolNumber)
            9999: Load station</param>
            <param name="DestinationPlaceNumber">Place number 1 to 31999
            -1: search for an empty place and move magazine
            -2: tool will be loaded to the currently used position</param>
            <param name="DestinationMagazineNumber">Magazine number 1 to 32000
            9999: Load station</param>
            <param name="Timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) 
            or AGL40_SUCCESS if it is a synchronous call without ReturnJobNr(true) &lt; 0	
            Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_CopyToNC(System.String,System.Byte[],System.Int32)">
            <summary>
            This function allows you to copy a buffer into a file on the NCK. The contents of 
            the buffer must match exactly to the contents of the file preceded by the specification 
            of the path. A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">Filename at the NCK</param>
            <param name="buff">Buffer with the file content</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_CopyToNC(System.String,System.Byte[])">
            <summary>
            This function allows you to copy a buffer into a file on the NCK. The contents of 
            the buffer must match exactly to the contents of the file preceded by the specification 
            of the path. A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">Filename at the NCK</param>
            <param name="buff">Buffer with the file content</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_CopyFromNC(System.String,System.Byte[],System.Int32@,System.Int32)">
            <summary>
            With this function you can copy a file from the NCK in a buffer on the PC. 
            You have to know the size of the file on the NCK and allocate the appropriate buffer. You get 
            the used length as a result of the function. If this is larger than the allocated length, ACCON-AGLink has 
            cut off the file to prevent a buffer overflow. In this case, call the function again with a larger buffer. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">Filename at the NCK</param>
            <param name="buff">Buffer for file content</param>
            <param name="neededLen">Variable for required length</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_CopyFromNC(System.String,System.Byte[],System.Int32@)">
            <summary>
            With this function you can copy a file from the NCK in a buffer on the PC. 
            You have to know the size of the file on the NCK and allocate the appropriate buffer. You get 
            the used length as a result of the function. If this is larger than the allocated length, ACCON-AGLink has 
            cut off the file to prevent a buffer overflow. In this case, call the function again with a larger buffer. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">Filename at the NCK</param>
            <param name="buff">Buffer for file content</param>
            <param name="neededLen">Variable for required length</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_CopyFromNCAlloc(System.String,System.Byte[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you can copy a file on the NCK in a buffer on the PC. You do not have 
            to know the file size on the NCK, because ACCON AGLink automatically allocates the space. If you no 
            longer need the buffer, you have to call NCK_FreeBuff in any case to release the space. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">Filename on the NCK</param>
            <param name="buff">Buffer for the file content</param>
            <param name="buffLength">Variable for the length of the buffer</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_CopyFromNCAlloc(System.String,System.Byte[]@,System.Int32@)">
            <summary>
            With this function you can copy a file on the NCK in a buffer on the PC. You do not have 
            to know the file size on the NCK, because ACCON AGLink automatically allocates the space. If you no 
            longer need the buffer, you have to call NCK_FreeBuff in any case to release the space. 
            A connection to the NCK must be already built up.
            </summary>
            <param name="fileName">Filename on the NCK</param>
            <param name="buff">Buffer for the file content</param>
            <param name="buffLength">Variable for the length of the buffer</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_CopyFileToNC(System.String,System.String,System.Int32)">
            <summary>
            With this function you can copy a file from the PC to the NCK. A connection to the NCK must be already built up.
            </summary>
            <param name="ncFileName">Name of the file with directory on the NCK</param>
            <param name="pcFileName">Name of the file with directory on the PC</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_CopyFileToNC(System.String,System.String)">
            <summary>
            With this function you can copy a file from the PC to the NCK. A connection to the NCK must be already built up.
            </summary>
            <param name="ncFileName">Name of the file with directory on the NCK</param>
            <param name="pcFileName">Name of the file with directory on the PC</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_CopyFileFromNC(System.String,System.String,System.Int32)">
            <summary>
            With this function you can copy a file from the NCK to the PC. A connection to the NCK must be already built up.
            </summary>
            <param name="ncFileName">Name of the file with directory on the NCK</param>
            <param name="pcFileName">Name of the file with directory on the PC</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.NCK_CopyFileFromNC(System.String,System.String)">
            <summary>
            With this function you can copy a file from the NCK to the PC. A connection to the NCK must be already built up.
            </summary>
            <param name="ncFileName">Name of the file with directory on the NCK</param>
            <param name="pcFileName">Name of the file with directory on the PC</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Drive_ReadMix(Accon.AGLink.AGL4.DATA_RW40_DRIVE[],System.Int32,System.Int32)">
            <summary>
            With this function you can read mixed datatypes and datasizes in one job. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to the reading structurs</param>
            <param name="count">Count of the structures</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Drive_ReadMix(Accon.AGLink.AGL4.DATA_RW40_DRIVE[],System.Int32)">
            <summary>
            With this function you can read mixed datatypes and datasizes in one job. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to the reading structurs</param>
            <param name="count">Count of the structures</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Drive_ReadMixEx(Accon.AGLink.AGL4.DATA_RW40_DRIVE[],System.Int32,System.Int32)">
            <summary>
            With this function you can read mixed datatypes and datasizes in one job. A connection to the PLC must be already built up. 
            Here compared with the function Drive_ReadMix, the data are read in the provided buffer. Use the element Buff of the structur 
            DATA_RW40_DRIVE to specify the target memory.
            </summary>
            <param name="buff">Pointer to the reading structure</param>
            <param name="count">Count of the structures</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Drive_ReadMixEx(Accon.AGLink.AGL4.DATA_RW40_DRIVE[],System.Int32)">
            <summary>
            With this function you can read mixed datatypes and datasizes in one job. A connection to the PLC must be already built up. 
            Here compared with the function Drive_ReadMix, the data are read in the provided buffer. Use the element Buff of the structur 
            DATA_RW40_DRIVE to specify the target memory.
            </summary>
            <param name="buff">Pointer to the reading structure</param>
            <param name="count">Count of the structures</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Drive_WriteMix(Accon.AGLink.AGL4.DATA_RW40_DRIVE[],System.Int32,System.Int32)">
            <summary>
            With this function you can write mixed datatypes and data sizes with one job. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to the writing structures</param>
            <param name="count">Number of used structure elements</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Drive_WriteMix(Accon.AGLink.AGL4.DATA_RW40_DRIVE[],System.Int32)">
            <summary>
            With this function you can write mixed datatypes and data sizes with one job. A connection to the PLC must be already built up.
            </summary>
            <param name="buff">Pointer to the writing structures</param>
            <param name="count">Number of used structure elements</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Drive_WriteMixEx(Accon.AGLink.AGL4.DATA_RW40_DRIVE[],System.Int32,System.Int32)">
            <summary>
            With this function you can write mixed datatypes and datasizes in one job to the PLC. A connection to the 
            PLC must be already built up. Here compared with the function Drive_WriteMix, the data are read from the provided buffer. 
            Use the element Buff of the structure DATA_RW40_DRIVE to specify the data source.
            </summary>
            <param name="buff">Pointer to the writing structures</param>
            <param name="count">Number of used structure elements</param>
            <param name="timeout">Timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.Drive_WriteMixEx(Accon.AGLink.AGL4.DATA_RW40_DRIVE[],System.Int32)">
            <summary>
            With this function you can write mixed datatypes and datasizes in one job to the PLC. A connection to the 
            PLC must be already built up. Here compared with the function Drive_WriteMix, the data are read from the provided buffer. 
            Use the element Buff of the structure DATA_RW40_DRIVE to specify the data source.
            </summary>
            <param name="buff">Pointer to the writing structures</param>
            <param name="count">Number of used structure elements</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLC_Backup(System.IntPtr,System.String)">
            <summary>
            This function saves the available datablocks within the plc to the specified file.
            </summary>
            <param name="handle">Access handle.</param>
            <param name="blocks">List of blocks
            "All"  for "All data blocks" bzw.
            "AllU" for "All User defined data blocks" or
            "OB", "FC", "FB", "DB", "SFC", "SFB", "SDB" for "All all data blocks of type" or
            a range (for example "FC 1 - 10") or
            single data block (for example "OB 1")</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLC_Backup(System.IntPtr,System.String,System.Int32)">
            <summary>
            This function saves the available datablocks within the plc to the specified file.
            </summary>
            <param name="handle">Access handle.</param>
            <param name="blocks">List of blocks
            "All"  for "All data blocks" bzw.
            "AllU" for "All User defined data blocks" or
            "OB", "FC", "FB", "DB", "SFC", "SFB", "SDB" for "All all data blocks of type" or
            a range (for example "FC 1 - 10") or
            single data block (for example "OB 1")</param>
            <param name="timeout">Timeout value to use</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLC_Restore(System.IntPtr,System.String)">
            <summary>
            This function restores the available datablocks from the specified file to the plc.
            </summary>
            <param name="handle">Access handle.</param>
            <param name="blocks">List of blocks
            "All"  for "All data blocks" bzw.
            "AllU" for "All User defined data blocks" or
            "OB", "FC", "FB", "DB", "SFC", "SFB", "SDB" for "All all data blocks of type" or
            a range (for example "FC 1 - 10") or
            single data block (for example "OB 1")</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLC_Restore(System.IntPtr,System.String,System.Int32)">
            <summary>
            This function restores the available datablocks from the specified file to the plc.
            </summary>
            <param name="handle">Access handle.</param>
            <param name="blocks">List of blocks
            "All"  for "All data blocks" bzw.
            "AllU" for "All User defined data blocks" or
            "OB", "FC", "FB", "DB", "SFC", "SFB", "SDB" for "All all data blocks of type" or
            a range (for example "FC 1 - 10") or
            single data block (for example "OB 1")</param>
            <param name="timeout">Timeout value to use</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLC_DeleteBlocks(System.String)">
            <summary>
            This function deletes the specified datablocks in the plc.
            </summary>
            <param name="blocks">List of blocks
            "All"  for "All data blocks" bzw.
            "AllU" for "All User defined data blocks" or
            "OB", "FC", "FB", "DB", "SFC", "SFB", "SDB" for "All all data blocks of type" or
            a range (for example "FC 1 - 10") or
            single data block (for example "OB 1")</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="M:Accon.AGLink.IAGLink4.PLC_DeleteBlocks(System.String,System.Int32)">
            <summary>
            This function deletes the specified datablocks in the plc.
            </summary>
            <param name="blocks">List of blocks
            "All"  for "All data blocks" bzw.
            "AllU" for "All User defined data blocks" or
            "OB", "FC", "FB", "DB", "SFC", "SFB", "SDB" for "All all data blocks of type" or
            a range (for example "FC 1 - 10") or
            single data block (for example "OB 1")</param>
            <param name="timeout">Timeout value to use</param>
            <returns>AGL40_SUCCESS In case of success &lt; 0 error number</returns>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.Name">
            <summary>
            Name of the instance
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.ConnErrorMessage">
            <summary>
            Gets the last received error message
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.ConnErrorCode">
            <summary>
            Gets the last received error code
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.ConnNr">
            <summary>
            Gets the connection handle after establishing Connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.DevNr">
            <summary>
            Gets or sets the number of the device that should be used for establishing connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.PlcNr">
            <summary>
            Gets or sets the number of the plc to which the connection should be established
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.Timeout">
            <summary>
            Gets or sets the timeout that should be used for method calls
            <p/>&lt;= 0 = Asynchron
            <p/>&gt; 0 = Synchron
            <p/>where 1 defines to use the default timeout in synchron mode from the config file
            <p/>0 defines to use the default timeout in asynchronous mode from the config file
            <p/>-1 defines to wait infinite in asynchronous mode for a method call to end 
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.ReconnectRetries">
            <summary>
            Gets or sets the amount of reconnect attempts (-1 = infinite)
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.ReconnectTimeout">
            <summary>
            Gets or sets the time in ms that should be waited between reconnect retries
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.AutoReconnect">
            <summary>
            Gets or sets if the connection should be automatically reestablished after a connection error
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.AutoDisconnect">
            <summary>
            Gets or sets if the connection should be automtically closed after a connection error
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.Connected">
            <summary>
            Gets whether the instance did successfully connect to a plc and still wasn't disconnected by "Disconnect".
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.IsReconnecting">
            <summary>
            Gets if a reconnect loop is trying to reestablish a connection
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.SlotNr">
            <summary>
            Gets or sets the number of the slot where the plc is placed
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.RackNr">
            <summary>
            Gets or sets the number of the rack where the plc is placed
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.Connectionstate">
            <summary>
            Gets the state till that a connection hat been established
            </summary>
        </member>
        <member name="P:Accon.AGLink.IAGLink4.SuccessfullConnectstate">
            <summary>
            Gets or sets the state till that a connection will be established
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnConnected">
            <summary>
            Connection successfully established 
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnDisconnected">
            <summary>
            Disconnected successfully
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnConnectionErrorOccured">
            <summary>
            Connectionerror occurred or the connection could not be established
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnConnectAborted">
            <summary>
            The automatic reconnect loop has been canceled
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetLifeListCompleted">
            <summary>
            Teh asynchronous operation of GetLeifeList has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetDirectPLCCompleted">
            <summary>
            The asynchronous operation of GetDirectPLC has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetRedConnStateMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetRedConnStateMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadOpStateCompleted">
            <summary>
            The asynchronous operatoin of ReadOpState has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadOpStateExCompleted">
            <summary>
            The asynchronous operation of ReadOpStateEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetPLCStartOptionsCompleted">
            <summary>
            The asynchronous operation of GetPlcStartOptions has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnPLCStopCompleted">
            <summary>
            The asynchronous operation of PLCStop has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnPLCStartCompleted">
            <summary>
            The asynchronous operation of PLCStart has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnPLCResumeCompleted">
            <summary>
            The asynchronous operation of PLCResume has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnPLCColdStartCompleted">
            <summary>
            The asynchronous operation of PLCColdStart has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnIsHPLCCompleted">
            <summary>
            The asynchronous operation of IsHPLC has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnHPLCStopCompleted">
            <summary>
            The asynchronous operation of HPLCStop has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnHPLCStartCompleted">
            <summary>
            The asynchronous operation of HPLCStart has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnHPLCColdStartCompleted">
            <summary>
            The asynchronous operation of HPLCColdStart has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetPLCClockCompleted">
            <summary>
            The asynchronous operation of GetPLCClock has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnSetPLCClockCompleted">
            <summary>
            The asynchronous operation of SetPLCClock has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnSyncPLCClockCompleted">
            <summary>
            The asynchronous operation of SyncPLCClock has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadMLFBCompleted">
            <summary>
            The asynchronous operation of ReadMLFB has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadMLFBExCompleted">
            <summary>
            The asynchronous operation of ReadMLFBEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadPLCInfoCompleted">
            <summary>
            The asynchronous operation of GetPLCInfos has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadCycleTimeCompleted">
            <summary>
            The asynchronous operation of ReadCycleTime has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadProtLevelCompleted">
            <summary>
            The asynchronous operation of ReadProtLevel has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadS7IdentCompleted">
            <summary>
            The asynchronous operation of ReadS7Ident has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadS7LEDCompleted">
            <summary>
            The asynchronous operation of ReadS7LED has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetExtModuleInfoCompleted">
            <summary>
            The asynchronous operation of GetExtModuleInfo has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadSzlCompleted">
            <summary>
            The asynchronous operation of ReadSzl has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnIsPasswordReqCompleted">
            <summary>
            The asynchronous operation of IsPasswordReq has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnSetPasswordCompleted">
            <summary>
            The asynchronous operation of SetPassword has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnUnSetPasswordCompleted">
            <summary>
            The asynchronous operation of UnSetPassword has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadDiagBufferEntrysCompleted">
            <summary>
            The asynchronous operation of ReadDiagBufferEntrys has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadDiagBufferCompleted">
            <summary>
            The asynchronous operation of ReadDiagBuffer has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadDBCountCompleted">
            <summary>
            The asynchronous operation of ReadDBCount has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadDBListCompleted">
            <summary>
            The asynchronous operation of ReadDBList has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadDBLenCompleted">
            <summary>
            The asynchronous operation of ReadDBLen has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadAllBlockCountCompleted">
            <summary>
            The asynchronous operation of ReadAllBlockCount has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadBlockCountCompleted">
            <summary>
            The asynchronous operation of ReadBlockCount has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadBlockListCompleted">
            <summary>
            The asynchronous operation of ReadBlockList has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadBlockLenCompleted">
            <summary>
            The asynchronous operation of ReadBlockLen has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadInBytesCompleted">
            <summary>
            The asynchronous operation of ReadInBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadPInBytesCompleted">
            <summary>
            The asynchronous operation of ReadPInBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadOutBytesCompleted">
            <summary>
            The asynchronous operation of ReadOutBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadFlagBytesCompleted">
            <summary>
            The asynchronous operation of ReadFlagBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadSFlagBytesCompleted">
            <summary>
            The asynchronous operation of ReadSFlagBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadVarBytesCompleted">
            <summary>
            The asynchronous operation of ReadVarBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadDataBytesCompleted">
            <summary>
            The asynchronous operation of ReadDataBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadDataWordsCompleted">
            <summary>
            The asynchronous operation of ReadDataWords has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadTimerWordsCompleted">
            <summary>
            The asynchronous operation of ReadTimerWords has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadCounterWordsCompleted">
            <summary>
            The asynchronous operation of ReadCounterWords has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadMixCompleted">
            <summary>
            The asynchronous operation of ReadMix has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadMixExCompleted">
            <summary>
            The asynchronous operation of ReadMixEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnWriteInBytesCompleted">
            <summary>
            The asynchronous operation of WriteInBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnWriteOutBytesCompleted">
            <summary>
            The asynchronous operation of WriteOutBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnWritePOutBytesCompleted">
            <summary>
            The asynchronous operation of WritePOutBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnWriteFlagBytesCompleted">
            <summary>
            The asynchronous operation of WriteFlagBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnWriteSFlagBytesCompleted">
            <summary>
            The asynchronous operation of WriteSFlagBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnWriteVarBytesCompleted">
            <summary>
            The asynchronous operation of WriteVarBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnWriteDataBytesCompleted">
            <summary>
            The asynchronous operation of WriteDataBytes has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnWriteDataWordsCompleted">
            <summary>
            The asynchronous operation of WriteDataWords has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnWriteCounterWordsCompleted">
            <summary>
            The asynchronous operation of WriteCounterWords has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnWriteTimerWordsCompleted">
            <summary>
            The asynchronous operation of WriteTimerWords has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnWriteMixCompleted">
            <summary>
            The asynchronous operation of WriteMix has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnWriteMixExCompleted">
            <summary>
            The asynchronous operation of WriteMixEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnOptReadMixCompleted">
            <summary>
            The asynchronous operation of ReadOptReadMix has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnOptReadMixExCompleted">
            <summary>
            The asynchronous operation of ReadOptReadMixEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnOptWriteMixCompleted">
            <summary>
            The asynchronous operation of WriteOptWriteMix has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnOptWriteMixExCompleted">
            <summary>
            The asynchronous operation of WriteOptWriteMixEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnRKSendCompleted">
            <summary>
            The asynchronous operation of RKSend has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnRKSendExCompleted">
            <summary>
            The asynchronous operation of RKSendEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnRKFetchCompleted">
            <summary>
            The asynchronous operation of RKFetch has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnRKFetchExCompleted">
            <summary>
            The asynchronous operation of RKFetchEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnSendRKFetchCompleted">
            <summary>
            The asynchronous operation of SendRKFetch has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnRecvRKSendCompleted">
            <summary>
            The asynchronous operation of Recv_RKSend has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnRecvRKFetchCompleted">
            <summary>
            The asynchronous operation of RecvRKFetch has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnSend3964ompleted">
            <summary>
            The asynchronous operation of Send_3964 has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnRecv3964Completed">
            <summary>
            The asynchronous operation of Recv_3964 has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnBReceiveCompleted">
            <summary>
            The asynchronous operation of BReceive has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnBReceiveExCompleted">
            <summary>
            The asynchronous operation of BReceiveEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnBSendCompleted">
            <summary>
            The asynchronous operation of BSend has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnBSendExCompleted">
            <summary>
            The asynchronous operation of BSendEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnUsendCompleted">
            <summary>
            The asynchronous operation of USend has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnUReceiveCompleted">
            <summary>
            The asynchronous operation of UReceive has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnInitOpStateMsgCompleted">
            <summary>
            The asynchronous operation of InitOpStateMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnExitOpStateMsgCompleted">
            <summary>
            The asynchronous operation of ExitOpStateMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetOpStateMsgCompleted">
            <summary>
            The asynchronous operation of GetOpStateMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnInitDiagMsgCompleted">
            <summary>
            The asynchronous operation of InitDiagMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnExitDiagMsgCompleted">
            <summary>
            The asynchronous operation of ExitDiagMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetDiagMsgCompleted">
            <summary>
            The asynchronous operation of GetDiagMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnInitCyclicReadCompleted">
            <summary>
            The asynchronous operation of InitCyclicRead has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnInitCyclicReadExCompleted">
            <summary>
            The asynchronous operation of InitCyclicReadEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnStartCyclicReadCompleted">
            <summary>
            The asynchronous operation of StartCyclicRead has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnStopCyclicReadCompleted">
            <summary>
            The asynchronous operation of StopCyclicRead has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnExitCyclicReadCompleted">
            <summary>
            The asynchronous operation of ExitCyclicRead has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetCyclicReadCompleted">
            <summary>
            The asynchronous operation of GetCyclicRead has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetCyclicReadExCompleted">
            <summary>
            The asynchronous operation of GetCyclicReadEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnInitScanMsgCompleted">
            <summary>
            The asynchronous operation of InitScanMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnExitScanMsgCompleted">
            <summary>
            The asynchronous operation of ExitScanMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetScanMsgCompleted">
            <summary>
            The asynchronous operation of GetScanMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnHasAckTriggeredMsgCompleted">
            <summary>
            The asynchronous operation of HasAckTriggerMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnInitAlarmMsgCompleted">
            <summary>
            The asynchronous operation of InitAlarmMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnExitAlarmMsgCompleted">
            <summary>
            The asynchronous operation of ExitAlarmMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetAlarmMsgCompleted">
            <summary>
            The asynchronous operation of GetAlarmMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnReadOpenMsgCompleted">
            <summary>
            The asynchronous operation of ReadOpenMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetMsgStateChangeCompleted">
            <summary>
            The asynchronous operation of GetMsgStateChange has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnAckMsgCompleted">
            <summary>
            The asynchronous operation of AckMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnLockMsgCompleted">
            <summary>
            The asynchronous operation of LockMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnUnlockMsgCompleted">
            <summary>
            The asynchronous operation of UnlockMsg has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnInitARSendCompleted">
            <summary>
            The asynchronous operation of InitARSend has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnExitARSendCompleted">
            <summary>
            The asynchronous operation of ExitARSend has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnGetARSendCompleted">
            <summary>
            The asynchronous operation of GetARSend has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKReadMixExCompleted">
            <summary>
            The asynchronous operation of NCK_ReMixEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKWriteMixExCompleted">
            <summary>
            The asynchronous operation of NCK_WriteMixEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKCheckVarSizeCompleted">
            <summary>
            The asynchronous operation of NCK_CheckVarSize has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKInitCyclicReadExCompleted">
            <summary>
            The asynchronous operation of NCK_InitCyclicReadEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKStartCyclicReadCompleted">
            <summary>
            The asynchronous operation of NCK_StartCyclicRead has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKStopCyclicReadCompleted">
            <summary>
            The asynchronous operation of NCK_StopCyclicRead has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKExitCyclicReadCompleted">
            <summary>
            The asynchronous operation of NCK_ExitCyclicRead has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKGetCyclicReadExCompleted">
            <summary>
            The asynchronous operation of NCK_GetCyclicReadEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKPIStartAllCompleted">
            <summary>
            The asynchronous operation of NCK_PI_StartAll has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKPIExternCompleted">
            <summary>
            The asynchronous operation of NCK_PI_EXTERN has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKPIExtModCompleted">
            <summary>
            The asynchronous operation of NCK_PI_EXTMOD has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKPISelectCompleted">
            <summary>
            The asynchronous operation of NCK_PI_SELECT has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKPIFDeleCompleted">
            <summary>
            The asynchronous operation of NCK_PI_DELE has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKPIFXFerCompleted">
            <summary>
            The asynchronous operation of NCK_PI_XFER has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKPIFProtCompleted">
            <summary>
            The asynchronous operation of NCK_PI_FPROT has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKPIFRenaCompleted">
            <summary>
            The asynchronous operation of NCK_PI_RENA has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKPILoginCompleted">
            <summary>
            The asynchronous operation of NCK_PI_LOGIN has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKPILogoutCompleted">
            <summary>
            The asynchronous operation of NCK_PI_LOGOUT has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKCopyToNCCompleted">
            <summary>
            The asynchronous operation of NCK_CopyToNC has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKCopyFromNCCompleted">
            <summary>
            The asynchronous operation of NCK_CopyFromNC has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKCopyFromNCAllocCompleted">
            <summary>
            The asynchronous operation of NCK_CopyFromNCAlloc has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKCopyFileToNCCompleted">
            <summary>
            The asynchronous operation of NCK_CopyFileToNC has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnNCKCopyFileFromNCCompleted">
            <summary>
            The asynchronous operation of NCK_CopyFileFromNC has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnProgressChanged">
            <summary>
            Progress messages of NCK-Functions
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnDriveReadMixCompleted">
            <summary>
            The asynchronous operation of Drive_ReadMix has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnDriveReadMixExCompleted">
            <summary>
            The asynchronous operation of Drive_ReadMixEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnDriveWriteMixCompleted">
            <summary>
            The asynchronous operation of Drive_WriteMix has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnDriveWriteMixExCompleted">
            <summary>
            The asynchronous operation of Drive_WriteMixEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnPLCBackupCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von PLC_Backup beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnPLCRestoreCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von PLC_Restore beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.IAGLink4.OnPLCDeleteBlocksCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von PLC_DeleteBlocks beendet wurde
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGLink4.CreateDataReceiver">
            <summary>
            Erzeugt einen Empfänger für Daten aus AGLink
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGLink4._Connection_OnJobsInvalidated(System.Object,System.EventArgs)">
            <summary>
            Gibt den Speicher für AGLink-Jobs frei, die nach Verbindungsbeendigung nicht mehr auffindbar sind
            </summary>
            <param name="sender">nicht genutzt</param>
            <param name="e">Nicht genutzt</param>
        </member>
        <member name="M:Accon.AGLink.AGLink4.NCKMessageReceived(Accon.AGLink.AGL4.PROGRESS)">
            <summary>
            Es sind Fortschrittsinformationen einer Methode für die NCK vorhanden und können damit weitergeleitet werden
            </summary>
            <param name="progress">Fortschrittsinformationen</param>
        </member>
        <member name="M:Accon.AGLink.AGLink4.PLCMessageReceived(Accon.AGLink.AGL4.RESULT40,System.Int32)">
            <summary>
            Diese Funktion löst die JobNr und die RESULT40-Struktur auf und löst selbst ein entsprechendes Ereignis aus, welches vom Benutzer abgefangen werden kann um über empfangen Daten informiert zu werden.
            </summary>
            <param name="result">Funktionsergebnis und identifikation einer asynchronen Funktion</param>
            <param name="jobNr">Die vom AGLink vergeben Job-Nr die an den Benutzer weitergeleitet werden soll</param>
        </member>
        <member name="M:Accon.AGLink.AGLink4.InvokeFunctionEvent(Accon.AGLink.AGL4.RESULT40,Accon.AGLink.ErrorDO@,System.Int32)">
            <summary>
            Verarbeitet das Ergebnis eines asynchronen Funktionsaufrufes und gibt den Speicher für diesen im verwalteten Bereich wieder frei
            </summary>
            <param name="result">Funktionsergebnisinformationen</param>
            <param name="errordetails">Fehlerinformationen</param>
            <param name="jobNr">AGLink-JobNr</param>
        </member>
        <member name="M:Accon.AGLink.AGLink4.GetExecutionTime(Accon.AGLink.AGL4.RESULT40)">
            <summary>
            Erstellt die DateTime, des Funktionsaufrufes
            </summary>
            <param name="result">Funktionsergebnis</param>
            <returns>Generierte Aufrufzeit</returns>
        </member>
        <member name="M:Accon.AGLink.AGLink4.CreateCyclicReader">
            <summary>
            Eerstellt ein zyklisches Leseobjekt um Daten von der SPS zu lesen
            </summary>
            <returns>Neues zyklisches Leseobjekt</returns>
        </member>
        <member name="M:Accon.AGLink.AGLink4.CreateCyclicNCKReader">
            <summary>
            Eerstellt ein zyklisches Leseobjekt um Daten von der NCK zu lesen
            </summary>
            <returns>Neues zyklisches Leseobjekt</returns>
        </member>
        <member name="M:Accon.AGLink.AGLink4.Connect">
            <summary>
            Baut eine vollständige Verbindung bis zum parametrierten AG auf
            </summary>
            <returns>Bei synchronem Aufruf Ergebnisflag, sonst Aussagelos</returns>
        </member>
        <member name="M:Accon.AGLink.AGLink4.Disconnect">
            <summary>
            Baut eine Verbindugn komplett ab
            </summary>
            <returns>Bei synchronem Aufruf Ergebnisflag, sonst Aussagelos</returns>
        </member>
        <member name="M:Accon.AGLink.AGLink4.StopReconnecting">
            <summary>
            Stopt die Verbindungsschleife, die bei einem Verbindungsfehler automatisch gestartet wird
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLink4.Connectionstate">
            <summary>
            Gibt den Verbindungsstatus zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLink4.SuccessfullConnectstate">
            <summary>
            Setzt oder gibt den Verbindungsstatus zurück, bis zu dem eine Verbindung aufgebaut werden soll
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnConnected">
            <summary>
            Wird bei erfolgreichem Verbindungsaufbau oder beim Abbruch der Verbindungsversuche ausgelöst
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnConnectAborted">
            <summary>
            Wird nach einem Abbruch des Verbindungsaufbaus aufgerufen
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnDisconnected">
            <summary>
            Wird beim erfolgreichen Verbindungsabbau ausgelöst
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnConnectionErrorOccured">
            <summary>
            Wird bei einem Verbindungsfehler oder einem missglückten Verbindugnsaufbauversuch ausgelöst
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetLifeListCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetLifeList beendet wurde.
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetDirectPLCCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetDirectPLC beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetRedConnStateMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetRedConnStateMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadOpStateCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadOpState beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadOpStateExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadOpStateEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetPLCStartOptionsCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetPLCStartOptions beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnPLCStopCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von PLCstop beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnPLCStartCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von PLCStart beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnPLCResumeCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von PLCResume beende wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnPLCColdStartCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von PLCColdStart beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnIsHPLCCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von IsHPLC beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnHPLCStopCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von HPLCStop beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnHPLCStartCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von HPLCStart beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnHPLCColdStartCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von HPLCColdStart beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetPLCClockCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetPLCclock beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnSetPLCClockCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von SetPLCClock beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnSyncPLCClockCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von SyncPLCClock beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadMLFBCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadMLFB beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadMLFBExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadMLFBEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadPLCInfoCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetPLCInfos beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadCycleTimeCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadCycleTime beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadProtLevelCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadProtLevel beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadS7IdentCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadS7Ident beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadS7LEDCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadS7LED beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetExtModuleInfoCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetExtModuleInfo beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadSzlCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadSzl beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnIsPasswordReqCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von IsPasswordReq beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnSetPasswordCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von SetPassword beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnUnSetPasswordCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von UnSetPassword beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadDiagBufferEntrysCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadDiagBufferEntrys beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadDiagBufferCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadDiagBuffer beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadDBCountCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadDBCount beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadDBListCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadDBList beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadDBLenCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadDBLen beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadAllBlockCountCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadAllBlockCount beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadBlockCountCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadBlockCount beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadBlockListCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadBlockList beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadBlockLenCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadBlockLen beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadInBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadInBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadPInBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadPInBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadOutBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadOutBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadFlagBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadFlagBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadSFlagBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadSFlagBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadVarBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadVarBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadDataBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadDataBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadDataWordsCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadDataWords beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadTimerWordsCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadTimerWords beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadCounterWordsCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadCounterWords beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadMixCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadMix beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadMixExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadMixEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnWriteInBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von WriteInBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnWriteOutBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von WriteOutBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnWritePOutBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von WritePOutBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnWriteFlagBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von WriteFlagBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnWriteSFlagBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von WriteSFlagBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnWriteVarBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von WriteVarBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnWriteDataBytesCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von WriteDataBytes beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnWriteDataWordsCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von WriteDataWords beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnWriteCounterWordsCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von WriteCounterWords beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnWriteTimerWordsCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von WriteTimerWords beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnWriteMixCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von WriteMix beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnWriteMixExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von WriteMixEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnOptReadMixCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von OptReadMix beende wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnOptReadMixExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von OptReadMixEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnOptWriteMixCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von OptWriteMix beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnOptWriteMixExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von OptWriteMixEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnRKSendCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von RKSend beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnRKSendExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von RKSendEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnRKFetchCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von RKFetch beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnRKFetchExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von RKFetchEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnSendRKFetchCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von Send_RKFetch beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnRecvRKSendCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von Recv_RKSend beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnRecvRKFetchCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von Recv_RKFetch beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnSend3964ompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von Send_3964 beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnRecv3964Completed">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von Recv_3964 beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnBReceiveCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von BReceive beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnBReceiveExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von BReceiveEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnBSendCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von BSend beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnBSendExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von BSendEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnUsendCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von USend beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnUReceiveCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von UReceive beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnInitOpStateMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von InitOpStateMsg beendet wurde
            </summary>
            
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnExitOpStateMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ExitOpStateMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetOpStateMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetOpStateMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnInitDiagMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von InitDiagMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnExitDiagMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ExitDiagMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetDiagMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetDiagMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnInitCyclicReadCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von InitCyclicRead beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnInitCyclicReadExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von InitCyclicReadEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnStartCyclicReadCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von StartCyclicRead beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnStopCyclicReadCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von StopCyclicRead beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnExitCyclicReadCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ExitCyclicRead beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetCyclicReadCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetCyclicRead beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetCyclicReadExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetCyclicReadEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnInitScanMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von InitScanMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnExitScanMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ExitScanMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetScanMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetScanMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnHasAckTriggeredMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von HasTriggeredMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnInitAlarmMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von InitAlarmMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnExitAlarmMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ExitAlarmMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetAlarmMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetAlarmMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnReadOpenMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ReadOpenMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetMsgStateChangeCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetMsgStateChange beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnAckMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von AckMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnLockMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von LockMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnUnlockMsgCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von UnlockMsg beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnInitARSendCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von InitARSend beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnExitARSendCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von ExitARSend beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnGetARSendCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von GetARSend beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKReadMixExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_ReadMixEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKWriteMixExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_WriteMixEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKCheckVarSizeCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_CheckVarSize beendet wurde
            </summary> 
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKInitCyclicReadExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_InitCyclicReadEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKStartCyclicReadCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_StartCyclicRead beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKStopCyclicReadCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_StopCyclicRead beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKExitCyclicReadCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_ExitCyclicRead beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKGetCyclicReadExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_GetCyclicReadEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKPIStartAllCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_PI_StartAll beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKPIExternCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_PI_EXTERN beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKPIExtModCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_PI_EXTMOD beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKPISelectCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_PI_SELECT beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKPIFDeleCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_PI_F_DELE beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKPIFXFerCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_PI_F_XFER beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKPIFProtCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_PI_F_PROT beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKPIFRenaCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_PI_F_RENA beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKPILoginCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_PI_LOGIN beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKPILogoutCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_PI_LOGOUt beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKCopyToNCCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_CopyToNC beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKCopyFromNCCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_CopyFromNC beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKCopyFromNCAllocCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_CopyFromNCAlloc beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKCopyFileToNCCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_CopyFiletoNC beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnNCKCopyFileFromNCCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von NCK_CopyFileFromNC beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnProgressChanged">
            <summary>
            Wird ausgelöst, sobald ein asynchroner Vorgang eine Zwischenmeldung mit seinem Status durchgibt
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnDriveReadMixCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von Drive_ReadMix beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnDriveReadMixExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von Drive_ReadMixEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnDriveWriteMixCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von Drive_WriteMix beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnDriveWriteMixExCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von Drive_WriteMixEx beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnPLCBackupCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von PLC_Backup beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnPLCRestoreCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von PLC_Restore beendet wurde
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4.OnPLCDeleteBlocksCompleted">
            <summary>
            Wird ausgelöst, sobald die asynchrone Anfrage von PLC_DeleteBlocks beendet wurde
            </summary>
        </member>
        <member name="T:Accon.AGLink.Connection">
            <summary>
            Bildet eine Verbindung zu einem Gerät bzw einer SPS ab
            </summary>
        </member>
        <member name="T:Accon.AGLink.ManageableConnection">
            <summary>
            Bietet Methoden an, um über Verbindungsänderungen informiert zu werden
            </summary>
        </member>
        <member name="F:Accon.AGLink.ManageableConnection._Connectioninformation">
            <summary>
            Beinhaltet alle Verbindungsbezogenen Informationen
            </summary>
        </member>
        <member name="M:Accon.AGLink.ManageableConnection.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:Accon.AGLink.ManageableConnection.EmergencyDisconnect(Accon.AGLink.ConnectionErrorDO)">
            <summary>
            Beendet die Verbindung
            </summary>
            <param name="connerrordetails">Verbindungsfehlerdetails</param>
            <returns>True = kein Fehler, sonst False</returns>
        </member>
        <member name="M:Accon.AGLink.ManageableConnection.StartReconnect">
            <summary>
            Startet die Verbindungswiederaufbauschleife
            </summary>
            <returns>True = erfolgreich gestartet, sonst False</returns>
        </member>
        <member name="E:Accon.AGLink.ManageableConnection.OnConnected">
            <summary>
            Ereignis zur Benachrichtigung bei erfolgreichem Verbindungsaufbau
            </summary>
        </member>
        <member name="E:Accon.AGLink.ManageableConnection.OnDisconnected">
            <summary>
            Ereignis zur Benachrichtigung bei erfolgreichem Verbindungsabbau
            </summary>
        </member>
        <member name="E:Accon.AGLink.ManageableConnection.OnConnError">
            <summary>
            Ereignis zur Benachrichtigung bei Verbindungsfehlern
            </summary>
        </member>
        <member name="E:Accon.AGLink.ManageableConnection.OnConnAborted">
            <summary>
            Wird nach Abbruch des Verbindungsaufbaus aufgerufen
            </summary>
        </member>
        <member name="P:Accon.AGLink.ManageableConnection.ConnectionInformation">
            <summary>
            Gibt die Verbindungsinformationen zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.ManageableConnection.IsBusy">
            <summary>
            Gibt aoverride n, ob die asynchrone Methode gerade beschäftigt ist
            </summary>
        </member>
        <member name="P:Accon.AGLink.ManageableConnection.ConnNr">
            <summary>
            Gibt das Verbindungshandle zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.ManageableConnection.DevNr">
            <summary>
            Setzt oder gibt die Gerätenummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.ManageableConnection.PlcNr">
            <summary>
            Setzt oder gibt die SPS-Nummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.ManageableConnection.RackNr">
            <summary>
            Setzt oder gibt die Rack-Nummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.ManageableConnection.SlotNr">
            <summary>
            Setzt oder gibt die Slot-Nummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.ManageableConnection.Timeout">
            <summary>
            Setzt oder gibt den Funktions-Timeout zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.ManageableConnection.ReconnectTimeout">
            <summary>
            Setzt oder gibt den Verbindugnstimeout zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.ManageableConnection.ReconnectRetries">
            <summary>
            Gibt oder setzt die Anzahl Versuche, um eine Verbindung widerherzustellen
            </summary>
        </member>
        <member name="P:Accon.AGLink.ManageableConnection.AutoDisconnect">
            <summary>
            Setzt oder gibt an ob bei einem Verbindungsfehler, automatisch die Verbindung abgebaut werden soll
            </summary>
        </member>
        <member name="P:Accon.AGLink.ManageableConnection.AutoReconnect">
            <summary>
            Setzt oder gibt an, ob bei einem Verbindungsfehler, automatisch versucht werden soll, die Verbindung wieder aufzubauen
            </summary>
        </member>
        <member name="F:Accon.AGLink.Connection._AsyncConnectionErrorHandler">
            <summary>
            Über diesen Delegate ruft die Arbeitsmethode (Reconnect) das 
            AsyncConnectionFailed-Ereignis auf. Diese Methode nutzt dazu die
            Post-Methode des verwendeten AsyncOperation-Objekts, die dafür sorgt,
            dass das Ereignis im richtigen Thread aufgerufen wird. Die Zuweisung 
            dieses Delegates erfolgt im Konstruktor der Klasse.
            </summary>
        </member>
        <member name="F:Accon.AGLink.Connection._AsyncConnectedHandler">
            <summary>
            Über diesen Delegate ruft die Arbeitsmethode (Reconnect) das
            AsyncConnected-Ereignis auf. Diese Methode nutzt dazu die 
            Post-Methode des verwendeten AsyncOperation-Objekts, die dafür sorgt,
            dass das Ereignis im richtigen Thread aufgerufen wird. Die Zuweisung
            dieses Delegates erfolgt im Konstruktor der Klasse.
            </summary>
        </member>
        <member name="F:Accon.AGLink.Connection._AsyncDisconnectedHandler">
            <summary>
            Über diesen Delegate ruft die Arbeitsmethode (Reconnect) das
            AsyncConnected-Ereignis auf. Diese Methode nutzt dazu die 
            Post-Methode des verwendeten AsyncOperation-Objekts, die dafür sorgt,
            dass das Ereignis im richtigen Thread aufgerufen wird. Die Zuweisung
            dieses Delegates erfolgt im Konstruktor der Klasse.
            </summary>
        </member>
        <member name="F:Accon.AGLink.Connection._AsyncConnectAbortedHandler">
            <summary>
            Über diesen Delegate ruft die Arbeitsmethode (Reconnect) das
            AsyncConnected-Ereignis auf. Diese Methode nutzt dazu die 
            Post-Methode des verwendeten AsyncOperation-Objekts, die dafür sorgt,
            dass das Ereignis im richtigen Thread aufgerufen wird. Die Zuweisung
            dieses Delegates erfolgt im Konstruktor der Klasse.
            </summary>
        </member>
        <member name="M:Accon.AGLink.Connection.Connect">
            <summary>
            Baut eine Verbindung bis zum AG auf.
            </summary>
            <returns>Bei synchroner Verwendung Ergebnisflag, sonst Aussagelos</returns>
        </member>
        <member name="M:Accon.AGLink.Connection.Disconnect">
            <summary>
            Baut eine bestehende Verbindung ab.
            </summary>
            <returns>true, falls Verbindungsabbau geklappt hat, sonst false</returns>
        </member>
        <member name="M:Accon.AGLink.Connection.StopReconnection">
            <summary>
            Setzt das Abbruch-Flag der asynchronen Verbindungsaufbaumethode und wartet, bis diese beendet wurde. (Blockiert das Programm)
            </summary>
        </member>
        <member name="M:Accon.AGLink.Connection.EmergencyDisconnect(Accon.AGLink.ConnectionErrorDO)">
            <summary>
            Baut eine bestehende Verbindung ab, und informiert alle anderen Verbindungen über einen Fehler.
            </summary>
            <param name="connerrordetails">Fehlerinformationen</param>
            <returns>true, falls Verbindungsabbau geklappt hat, sonst false</returns>
        </member>
        <member name="M:Accon.AGLink.Connection.StartReconnect">
            <summary>
            Startet eine asynchrone Schleife, die versucht die Verbindung wiederherzustellen.
            </summary>
            <returns>true, falls Erfolgreich gestartet, sonst false</returns>
        </member>
        <member name="M:Accon.AGLink.Connection.ConnectSynchron">
            <summary>
            Baut eine Verbindung bis zur SPS auf.
            
            Die einzige Funktion die den tatsächlichen Aufbau durchführt!
            </summary>
            <returns>true, falls Verbindungsaufbau geklappt hat, sonst false</returns>
        </member>
        <member name="M:Accon.AGLink.Connection.ConnectAsynchron">
            <summary>
            Startet einene asynchronen Verbindungsaufbau zur parametrierten Steuerung
            </summary>
            <returns>Immer true</returns>
        </member>
        <member name="M:Accon.AGLink.Connection.DisconnectSynchron(System.Boolean)">
            <summary>
            Baut eine bestehende Verbindung ab.
            
            Einzige Funktion die tatsächlich die Verbindung abbaut!
            </summary>
            <param name="fireEvent">true = Verbindungsabbauevent auslösen, false = kein Event auslösen</param>
            <returns>true, falls Verbindungsabbau geklappt hat, sonst false</returns>
        </member>
        <member name="M:Accon.AGLink.Connection.DisconnectAsynchron">
            <summary>
            Startet einene asynchronen Verbindungsabbau an.
            </summary>
            <returns>Imemr true</returns>
        </member>
        <member name="M:Accon.AGLink.Connection.CheckConnectState">
            <summary>
            Prüft ob der Aktuelle Ist-Verbindungsstatus dem Soll-Verbindungsstatus beim Verbindungsaufbau entspricht
            </summary>
        </member>
        <member name="M:Accon.AGLink.Connection.CheckDisconnectState">
            <summary>
            Prüft ob der Aktuelle Ist-Verbindungsstatus dem Soll-Verbindungsstatus beim Verbindungsabbau entspricht
            </summary>
        </member>
        <member name="M:Accon.AGLink.Connection.Connect(System.ComponentModel.AsyncOperation)">
            <summary>
            Baut eine Verbindung zur Parametrierten Steuerung asynchron auf.
            </summary>
            <param name="async">Object zur Benachrichtung des Haupthreads über den Funktionsstatus</param>
        </member>
        <member name="M:Accon.AGLink.Connection.Disconnect(System.ComponentModel.AsyncOperation)">
            <summary>
            Baut eine bestehende Verbindung wieder ab.
            </summary>
            <param name="async">Objeckt zur Benachrichtung des Hauptzhreas über den Funktionsstatus</param>
        </member>
        <member name="M:Accon.AGLink.Connection.Reconnect(System.ComponentModel.AsyncOperation)">
            <summary>
            Versucht die Verbindung eine Verbindung neu aufzubauene.
            </summary>
            <param name="async">Objeckt zur Benachrichtung des Hauptthreads über den Funktionsstatus</param>
        </member>
        <member name="M:Accon.AGLink.Connection.AsyncConnectionFailedCaller(System.Object)">
            <summary>
            Diese Methode wird über die Delegate-Referenz _AsyncConnectionErrorHandler aufgerufen
            </summary>
            <param name="state">Ein Objekt, mit den Daten, die an diese Methode übergeben werden sollen</param>
        </member>
        <member name="M:Accon.AGLink.Connection.AsyncConnectedCaller(System.Object)">
            <summary>
            Diese Methode wird über die Delegate-Referenz _AsyncConnectedHandler aufgerufen
            </summary>
            <param name="state">Ein Objekt, mit den Daten, die an diese Methode übergeben werden sollen</param>
        </member>
        <member name="M:Accon.AGLink.Connection.AsyncDisconnectedCaller(System.Object)">
            <summary>
            Diese Methode wird über die Delegate-Referenz _AsyncDisconnectedHandler aufgerufen
            </summary>
            <param name="state">Ein Objekt, mit den Daten, die an diese Methode übergeben werden sollen</param>
        </member>
        <member name="M:Accon.AGLink.Connection.AsyncConnectAbortedCaller(System.Object)">
            <summary>
            Diese Methode wird über die Delegate-Referenz _AsyncConnectAbortedErrorHandler aufgerufen
            </summary>
            <param name="state">Ein Objekt, mit den Daten, die an diese Methode übergeben werden sollen</param>
        </member>
        <member name="P:Accon.AGLink.Connection.Connectionstate">
            <summary>
            Gibt oder setzt den Aktuellen Verbindungsstatus
            </summary>
        </member>
        <member name="P:Accon.AGLink.Connection.IsBusy">
            <summary>
            Gibt aoverride n, ob die asynchrone Methode gerade beschäftigt ist
            </summary>
        </member>
        <member name="P:Accon.AGLink.Connection.ConnNr">
            <summary>
            Gibt das Verbindungshandle zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Connection.DevNr">
            <summary>
            Setzt oder gibt die Gerätenummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Connection.PlcNr">
            <summary>
            Setzt oder gibt die SPS-Nummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Connection.RackNr">
            <summary>
            Setzt oder gibt die Rack-Nummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Connection.SlotNr">
            <summary>
            Setzt oder gibt die Slot-Nummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Connection.Timeout">
            <summary>
            Setzt oder gibt den Funktions-Timeout zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Connection.ReconnectTimeout">
            <summary>
            Setzt oder gibt den Verbindugnstimeout zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Connection.ReconnectRetries">
            <summary>
            Gibt oder setzt die Anzahl Versuche, um eine Verbindung widerherzustellen
            </summary>
        </member>
        <member name="P:Accon.AGLink.Connection.AutoDisconnect">
            <summary>
            Setzt oder gibt an ob bei einem Verbindungsfehler, automatisch die Verbindung abgebaut werden soll
            </summary>
        </member>
        <member name="P:Accon.AGLink.Connection.AutoReconnect">
            <summary>
            Setzt oder gibt an, ob bei einem Verbindungsfehler, automatisch versucht werden soll, die Verbindung wieder aufzubauen
            </summary>
        </member>
        <member name="T:Accon.AGLink.Connection.InternalCallHandler">
            <summary>
            Delegate für den asynchronen Aufruf der Reconnect-Methode
            </summary>
        </member>
        <member name="T:Accon.AGLink.Converter">
            <summary>
            Konvertiert die unterschiedlichen Unmanaged Strukturen ins Managed und andersherum
            </summary>
        </member>
        <member name="T:Accon.AGLink.AsyncEventHandler">
            <summary>
            Eventhandler for dataless asynchronous functions
            </summary>
            <param name="e">Common event information</param>
        </member>
        <member name="T:Accon.AGLink.AsyncTiaEventHandler">
            <summary>
            Eventhandler for dataless asynchronous functions
            </summary>
            <param name="e">Common event information</param>
        </member>
        <member name="T:Accon.AGLink.AsyncRfcEventHandler">
            <summary>
            Eventhandler for dataless asynchronous functions with RFC1006
            </summary>
            <param name="e">Common event information</param>
        </member>
        <member name="T:Accon.AGLink.Rfc1006AsyncByteEventHandler">
            <summary>
            Eventhandler for Byte functions
            </summary>
            <param name="e">Eventdata with a byte</param>
        </member>
        <member name="T:Accon.AGLink.Rfc1006AsyncByteFieldEventHandler">
            <summary>
            Eventhandler for Byte field functions
            </summary>
            <param name="e">Eventdata with a byte field</param>
        </member>
        <member name="T:Accon.AGLink.AsyncByteEventHandler">
            <summary>
            Eventhandler for Byte functions
            </summary>
            <param name="e">Eventdata with a byte</param>
        </member>
        <member name="T:Accon.AGLink.AsyncByteFieldEventHandler">
            <summary>
            Eventhandler for Byte field functions
            </summary>
            <param name="e">Eventdata with a byte field</param>
        </member>
        <member name="T:Accon.AGLink.AsyncStringEventHandler">
            <summary>
            Eventhandler for String functions
            </summary>
            <param name="e">Eventdata with a String</param>
        </member>
        <member name="T:Accon.AGLink.AsyncStringFieldEventHandler">
            <summary>
            Eventhandler for String field functions
            </summary>
            <param name="e">Eventdata with a String field</param>
        </member>
        <member name="T:Accon.AGLink.AsyncInt32EventHandler">
            <summary>
            Eventhandler for Int32 functions
            </summary>
            <param name="e">Eventdata with a Int32</param>
        </member>
        <member name="T:Accon.AGLink.AsyncUInt16FieldEventHandler">
            <summary>
            Eventhandler for UInt16 field functions
            </summary>
            <param name="e">Eventdata with a UInt16 field</param>
        </member>
        <member name="T:Accon.AGLink.AsyncPLCInfoEventHandler">
            <summary>
            Eventhandler for AGL4.PLCINFO functions
            </summary>
            <param name="e">Eventdata with AGL4.PLCINFO</param>
        </member>
        <member name="T:Accon.AGLink.AsyncCycleTimeEventHandler">
            <summary>
            Eventhandler for AGL4.CYCLETIME functions
            </summary>
            <param name="e">Eventdata with AGL4.CYCLETIME</param>
        </member>
        <member name="T:Accon.AGLink.AsyncProtLevelEventHandler">
            <summary>
            Eventhandler for AGL4.PROTLEVEL functions
            </summary>
            <param name="e">Eventdata with AGL4.PROTLEVEL</param>
        </member>
        <member name="T:Accon.AGLink.AsyncTODEventHandler">
            <summary>
            Eventhandler for AGL4.TOD functions
            </summary>
            <param name="e">Eventdata with AGL4.TOD</param>
        </member>
        <member name="T:Accon.AGLink.AsyncDataRWEventHandler">
            <summary>
            Eventhandler for AGL4.DATA_RW40 field functions
            </summary>
            <param name="e">Eventdata with AGL4.DATA_RW40 field</param>
        </member>
        <member name="T:Accon.AGLink.AsyncDataRWDriveEventHandler">
            <summary>
            Eventhandler for AGL4.DATA_RW40 field functions
            </summary>
            <param name="e">Eventdata with AGL4.DATA_RW40_DRIVE field</param>
        </member>
        <member name="T:Accon.AGLink.AsyncUSendReceiveEventHandler">
            <summary>
            Eventhandler for AGL4.S7_USEND_URCV functions
            </summary>
            <param name="e">Eventdata with AGL4.S7_USEND_URCV</param>
        </member>
        <member name="T:Accon.AGLink.AsyncS7LEDEventHandler">
            <summary>
            Eventhandler for AGL4.S7_LED functions
            </summary>
            <param name="e">Eventdata with AGL4.S7_LED</param>
        </member>
        <member name="T:Accon.AGLink.AsyncExtModuleInfoEventHandler">
            <summary>
            Eventhandler for AGL4.EXT_MODULE_INFO functions
            </summary>
            <param name="e">Eventdata with AGL4.EXT_MODULE_INFO</param>
        </member>
        <member name="T:Accon.AGLink.AsyncRedConnStateMsgEventHandler">
            <summary>
            Eventhandler for AGL4.RED_CONN_STATE functions
            </summary>
            <param name="e">Eventdata with AGL4.RED_CONN_STATE</param>
        </member>
        <member name="T:Accon.AGLink.AsyncAllBlockCountEventHandler">
            <summary>
            Eventhandler for AGL4.ALL_BLOCK_COUNT functions
            </summary>
            <param name="e">Eventdata with AGL4.ALL_BLOCK_COUNT</param>
        </member>
        <member name="T:Accon.AGLink.AsyncDiagMsgEventHandler">
            <summary>
            Eventhandler for AGL4.S7_DIAG_MSG functions
            </summary>
            <param name="e">Eventdata with AGL4.S7_DIAG_MSG</param>
        </member>
        <member name="T:Accon.AGLink.AsyncScanEventHandler">
            <summary>
            Eventhandler for AGL4.S7_SCAN functions
            </summary>
            <param name="e">Eventdata with AGL4.S7_SCAN</param>
        </member>
        <member name="T:Accon.AGLink.AsyncRcvMsgStateEventHandler">
            <summary>
            Eventhandler for AGL4.S7_RCV_MSG_STATE functions
            </summary>
            <param name="e">Eventdata with AGL4.S7_RCV_MSG_STATE</param>
        </member>
        <member name="T:Accon.AGLink.AsyncAlarmEventHandler">
            <summary>
            Eventhandler for AGL4.S7_ALARM functions
            </summary>
            <param name="e">Eventdata with AGL4.S7_ALARM</param>
        </member>
        <member name="T:Accon.AGLink.AsyncChangeMsgStateFieldEventHandler">
            <summary>
            Eventhandler for AGL4.S7_CHANGE_MSG_STATE field functions
            </summary>
            <param name="e">Eventdata with AGL4.S7_CHANGE_MSG_STATE field</param>
        </member>
        <member name="T:Accon.AGLink.AsyncDataRwRKEventHandler">
            <summary>
            Eventhandler for AGL4.DATA_RW40_RK field functions
            </summary>
            <param name="e">Eventdata with AGL4.DATA_RW40_RK field</param>
        </member>
        <member name="T:Accon.AGLink.AsyncNckDataRwEventHandler">
            <summary>
            Eventhandler for AGL4.NckDataRW field functions
            </summary>
            <param name="e">Eventdata with AGL4.NckDataRW field</param>
        </member>
        <member name="T:Accon.AGLink.AsyncDataBytesEventHandler">
            <summary>
            Eventhandler for DataBytes functions
            </summary>
            <param name="e">Eventdata with DataBytes</param>
        </member>
        <member name="T:Accon.AGLink.AsyncDataWordsEventHandler">
            <summary>
            Eventhandler for DataWords functions
            </summary>
            <param name="e">Eventdata with DataWords</param>
        </member>
        <member name="T:Accon.AGLink.AsyncDiagBufferEventHandler">
            <summary>
            Eventhandler for DiagBuffer functions
            </summary>
            <param name="e">Eventdata with DiagBuffer</param>
        </member>
        <member name="T:Accon.AGLink.AsyncOpStateEventHandler">
            <summary>
            Eventhandler for OpState functions
            </summary>
            <param name="e">Eventdata with OpState</param>
        </member>
        <member name="T:Accon.AGLink.AsyncOpStateExEventHandler">
            <summary>
            Eventhandler for OpStateEx functions
            </summary>
            <param name="e">Eventdata with OpStateEx</param>
        </member>
        <member name="T:Accon.AGLink.AsyncSzlDataEventHandler">
            <summary>
            Eventhandler for SzlData functions
            </summary>
            <param name="e">Eventdata with SzlData</param>
        </member>
        <member name="T:Accon.AGLink.AsyncDBListEventHandler">
            <summary>
            Eventhandler for DBList functions
            </summary>
            <param name="e">Eventdata with DBList</param>
        </member>
        <member name="T:Accon.AGLink.AsyncDBInfoEventHandler">
            <summary>
            Eventhandler for DBInfo functions
            </summary>
            <param name="e">Eventdata with DBInfo</param>
        </member>
        <member name="T:Accon.AGLink.AsyncOptMixEventHandler">
            <summary>
            Eventhandler for OptMix functions
            </summary>
            <param name="e">Eventdata with OptMix</param>
        </member>
        <member name="T:Accon.AGLink.AsyncBReceiveExEventHandler">
            <summary>
            Eventhandler for BReceiveEx functions
            </summary>
            <param name="e">Eventdata with BReceiveEx</param>
        </member>
        <member name="T:Accon.AGLink.AsyncMLFBExDataEventHandler">
            <summary>
            Eventhandler for MLFBExData functions
            </summary>
            <param name="e">Eventdata with MLFBExData</param>
        </member>
        <member name="T:Accon.AGLink.AsyncBlockListEventHandler">
            <summary>
            Eventhandler for BlockList functions
            </summary>
            <param name="e">Eventdata with BlockList</param>
        </member>
        <member name="T:Accon.AGLink.AsyncCyclicReadEventHandler">
            <summary>
            Eventhandler for CyclicRead functions
            </summary>
            <param name="e">Eventdata with CyclicRead</param>
        </member>
        <member name="T:Accon.AGLink.AsyncOpenMsgEventHandler">
            <summary>
            Eventhandler for OpenMsg functions
            </summary>
            <param name="e">Eventdata with OpenMsg</param>
        </member>
        <member name="T:Accon.AGLink.AsyncARInitEventHandler">
            <summary>
            Eventhandler for ARInit functions
            </summary>
            <param name="e">Eventdata with ARInit</param>
        </member>
        <member name="T:Accon.AGLink.AsyncARSendEventHandler">
            <summary>
            Eventhandler for ARData functions
            </summary>
            <param name="e">Eventdata with ARData</param>
        </member>
        <member name="T:Accon.AGLink.AsyncNCKCyclicReadEventHandler">
            <summary>
            Eventhandler for NCKCyclicRead functions
            </summary>
            <param name="e">Eventdata with NCKCyclicRead</param>
        </member>
        <member name="T:Accon.AGLink.AsyncNCKFileDataEventHandler">
            <summary>
            Eventhandler for NCKFileData functions
            </summary>
            <param name="e">Eventdata with NCKFileData</param>
        </member>
        <member name="T:Accon.AGLink.AsyncProgressDataEventHandler">
            <summary>
            Eventhandler for AsyncProgress functions
            </summary>
            <param name="e">Eventdata with AsyncProgress</param>
        </member>
        <member name="T:Accon.AGLink.ConnectionEventHandler">
            <summary>
            Eventhandler for information about connection states
            </summary>
            <param name="sender">Instance of AGLink</param>
        </member>
        <member name="T:Accon.AGLink.TiaConnectionEventHandler">
            <summary>
            Eventhandler for information about connection states
            </summary>
            <param name="sender">Instance of AGLink</param>
        </member>
        <member name="T:Accon.AGLink.SimotionConnectionEventHandler">
            <summary>
            Eventhandler for information about connection states
            </summary>
            <param name="sender">Instance of AGLink</param>
        </member>
        <member name="T:Accon.AGLink.ConnectionErrorEventHandler">
            <summary>
            Eventhandler for information about connection errors
            </summary>
            <param name="sender">Instance of AGLink</param>
            <param name="e">Connection error information</param>
        </member>
        <member name="T:Accon.AGLink.TiaConnectionErrorEventHandler">
            <summary>
            Eventhandler for information about connection errors
            </summary>
            <param name="sender">Instance of AGLink</param>
            <param name="e">Connection error information</param>
        </member>
        <member name="T:Accon.AGLink.SimotionConnectionErrorEventHandler">
            <summary>
            Eventhandler for information about connection errors
            </summary>
            <param name="sender">Instance of AGLink</param>
            <param name="e">Connection error information</param>
        </member>
        <member name="T:Accon.AGLink.RfcConnectionEventHandler">
            <summary>
            Eventhandler for information about connection states
            </summary>
            <param name="sender">Instance of AGLink</param>
        </member>
        <member name="T:Accon.AGLink.RfcConnectionErrorEventHandler">
            <summary>
            Eventhandler for information about connection errors
            </summary>
            <param name="sender">Instance of AGLink</param>
            <param name="e">Connection error information</param>
        </member>
        <member name="T:Accon.AGLink.AsyncSimotionStringEventHandler">
            <summary>
            Eventhandler for String functions
            </summary>
            <param name="e">Eventdata with a String</param>
        </member>
        <member name="T:Accon.AGLink.AsyncSimotionMLFBExDataEventHandler">
            <summary>
            Eventhandler for MLFBExData functions
            </summary>
            <param name="e">Eventdata with MLFBExData</param>
        </member>
        <member name="T:Accon.AGLink.AsyncSimotionSymbolicRWEventHandler">
            <summary>
            Eventhandler for AGL4.SymbolicRW field functions
            </summary>
            <param name="e">Eventdata with AGL4.SymbolicRW field</param>
        </member>
        <member name="T:Accon.AGLink.AsyncTiaStringEventHandler">
            <summary>
            Eventhandler for String functions
            </summary>
            <param name="e">Eventdata with a String</param>
        </member>
        <member name="T:Accon.AGLink.AsyncTiaMLFBExDataEventHandler">
            <summary>
            Eventhandler for MLFBExData functions
            </summary>
            <param name="e">Eventdata with MLFBExData</param>
        </member>
        <member name="T:Accon.AGLink.AsyncSymbolicRWEventHandler">
            <summary>
            Eventhandler for AGL4.SymbolicRW field functions
            </summary>
            <param name="e">Eventdata with AGL4.SymbolicRW field</param>
        </member>
        <member name="T:Accon.AGLink.AGLink4Simotion">
            <summary>
            Führt asynchrone Kommunikation mit den konfigurierten AGs durch
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGLink4Simotion.CreateDataReceiver">
            <summary>
            Erzeugt einen Empfänger für Daten aus AGLink
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGLink4Simotion._Connection_OnJobsInvalidated(System.Object,System.EventArgs)">
            <summary>
            Gibt den Speicher für AGLink-Jobs frei, die nach Verbindungsbeendigung nicht mehr auffindbar sind
            </summary>
            <param name="sender">nicht genutzt</param>
            <param name="e">Nicht genutzt</param>
        </member>
        <member name="M:Accon.AGLink.AGLink4Simotion.NCKMessageReceived(Accon.AGLink.AGL4.PROGRESS)">
            <summary>
            Es sind Fortschrittsinformationen einer Methode für die NCK vorhanden und können damit weitergeleitet werden
            </summary>
            <param name="progress">Fortschrittsinformationen</param>
        </member>
        <member name="M:Accon.AGLink.AGLink4Simotion.PLCMessageReceived(Accon.AGLink.AGL4.RESULT40,System.Int32)">
            <summary>
            Diese Funktion löst die JobNr und die RESULT40-Struktur auf und löst selbst ein entsprechendes Ereignis aus, welches vom Benutzer abgefangen werden kann um über empfangen Daten informiert zu werden.
            </summary>
            <param name="result">Funktionsergebnis und identifikation einer asynchronen Funktion</param>
            <param name="jobNr">Die vom AGLink vergeben Job-Nr die an den Benutzer weitergeleitet werden soll</param>
        </member>
        <member name="M:Accon.AGLink.AGLink4Simotion.InvokeFunctionEvent(Accon.AGLink.AGL4.RESULT40,Accon.AGLink.ErrorDO@,System.Int32)">
            <summary>
            Verarbeitet das Ergebnis eines asynchronen Funktionsaufrufes und gibt den Speicher für diesen im verwalteten Bereich wieder frei
            </summary>
            <param name="result">Funktionsergebnisinformationen</param>
            <param name="errordetails">Fehlerinformationen</param>
            <param name="jobNr">AGLink-JobNr</param>
        </member>
        <member name="M:Accon.AGLink.AGLink4Simotion.GetExecutionTime(Accon.AGLink.AGL4.RESULT40)">
            <summary>
            Erstellt die DateTime, des Funktionsaufrufes
            </summary>
            <param name="result">Funktionsergebnis</param>
            <returns>Generierte Aufrufzeit</returns>
        </member>
        <member name="M:Accon.AGLink.AGLink4Simotion.Connect">
            <summary>
            Baut eine vollständige Verbindung bis zum parametrierten AG auf
            </summary>
            <returns>Bei synchronem Aufruf Ergebnisflag, sonst Aussagelos</returns>
        </member>
        <member name="M:Accon.AGLink.AGLink4Simotion.Disconnect">
            <summary>
            Baut eine Verbindugn komplett ab
            </summary>
            <returns>Bei synchronem Aufruf Ergebnisflag, sonst Aussagelos</returns>
        </member>
        <member name="M:Accon.AGLink.AGLink4Simotion.StopReconnecting">
            <summary>
            Stopt die Verbindungsschleife, die bei einem Verbindungsfehler automatisch gestartet wird
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Simotion.OnConnected">
            <summary>
            Wird bei erfolgreichem Verbindungsaufbau oder beim Abbruch der Verbindungsversuche ausgelöst
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Simotion.OnConnectAborted">
            <summary>
            Wird nach einem Abbruch des Verbindungsaufbaus aufgerufen
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Simotion.OnDisconnected">
            <summary>
            Wird beim erfolgreichen Verbindungsabbau ausgelöst
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Simotion.OnConnectionErrorOccured">
            <summary>
            Wird bei einem Verbindungsfehler oder einem missglückten Verbindugnsaufbauversuch ausgelöst
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Simotion.OnReadMLFBCompleted">
            <summary>
            The asynchronous operation of ReadMLFB has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Simotion.OnReadMLFBExCompleted">
            <summary>
            The asynchronous operation of ReadMLFBEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Simotion.OnSimotionReadMixExCompleted">
            <summary>
            The asynchronous operation of Symbolic_ReadMixEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Simotion.OnSimotionWriteMixExCompleted">
            <summary>
            The asynchronous operation of Symbolic_WriteMixEx has been accomplished
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGLink4Tia">
            <summary>
            Führt asynchrone Kommunikation mit den konfigurierten AGs durch
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGLink4Tia.CreateDataReceiver">
            <summary>
            Erzeugt einen Empfänger für Daten aus AGLink
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGLink4Tia._Connection_OnJobsInvalidated(System.Object,System.EventArgs)">
            <summary>
            Gibt den Speicher für AGLink-Jobs frei, die nach Verbindungsbeendigung nicht mehr auffindbar sind
            </summary>
            <param name="sender">nicht genutzt</param>
            <param name="e">Nicht genutzt</param>
        </member>
        <member name="M:Accon.AGLink.AGLink4Tia.NCKMessageReceived(Accon.AGLink.AGL4.PROGRESS)">
            <summary>
            Es sind Fortschrittsinformationen einer Methode für die NCK vorhanden und können damit weitergeleitet werden
            </summary>
            <param name="progress">Fortschrittsinformationen</param>
        </member>
        <member name="M:Accon.AGLink.AGLink4Tia.PLCMessageReceived(Accon.AGLink.AGL4.RESULT40,System.Int32)">
            <summary>
            Diese Funktion löst die JobNr und die RESULT40-Struktur auf und löst selbst ein entsprechendes Ereignis aus, welches vom Benutzer abgefangen werden kann um über empfangen Daten informiert zu werden.
            </summary>
            <param name="result">Funktionsergebnis und identifikation einer asynchronen Funktion</param>
            <param name="jobNr">Die vom AGLink vergeben Job-Nr die an den Benutzer weitergeleitet werden soll</param>
        </member>
        <member name="M:Accon.AGLink.AGLink4Tia.InvokeFunctionEvent(Accon.AGLink.AGL4.RESULT40,Accon.AGLink.ErrorDO@,System.Int32)">
            <summary>
            Verarbeitet das Ergebnis eines asynchronen Funktionsaufrufes und gibt den Speicher für diesen im verwalteten Bereich wieder frei
            </summary>
            <param name="result">Funktionsergebnisinformationen</param>
            <param name="errordetails">Fehlerinformationen</param>
            <param name="jobNr">AGLink-JobNr</param>
        </member>
        <member name="M:Accon.AGLink.AGLink4Tia.GetExecutionTime(Accon.AGLink.AGL4.RESULT40)">
            <summary>
            Erstellt die DateTime, des Funktionsaufrufes
            </summary>
            <param name="result">Funktionsergebnis</param>
            <returns>Generierte Aufrufzeit</returns>
        </member>
        <member name="M:Accon.AGLink.AGLink4Tia.Connect">
            <summary>
            Baut eine vollständige Verbindung bis zum parametrierten AG auf
            </summary>
            <returns>Bei synchronem Aufruf Ergebnisflag, sonst Aussagelos</returns>
        </member>
        <member name="M:Accon.AGLink.AGLink4Tia.Disconnect">
            <summary>
            Baut eine Verbindugn komplett ab
            </summary>
            <returns>Bei synchronem Aufruf Ergebnisflag, sonst Aussagelos</returns>
        </member>
        <member name="M:Accon.AGLink.AGLink4Tia.StopReconnecting">
            <summary>
            Stopt die Verbindungsschleife, die bei einem Verbindungsfehler automatisch gestartet wird
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Tia.OnConnected">
            <summary>
            Wird bei erfolgreichem Verbindungsaufbau oder beim Abbruch der Verbindungsversuche ausgelöst
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Tia.OnConnectAborted">
            <summary>
            Wird nach einem Abbruch des Verbindungsaufbaus aufgerufen
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Tia.OnDisconnected">
            <summary>
            Wird beim erfolgreichen Verbindungsabbau ausgelöst
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Tia.OnConnectionErrorOccured">
            <summary>
            Wird bei einem Verbindungsfehler oder einem missglückten Verbindugnsaufbauversuch ausgelöst
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Tia.OnReadMLFBCompleted">
            <summary>
            The asynchronous operation of ReadMLFB has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Tia.OnReadMLFBExCompleted">
            <summary>
            The asynchronous operation of ReadMLFBEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Tia.OnSymbolicReadMixExCompleted">
            <summary>
            The asynchronous operation of Symbolic_ReadMixEx has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.AGLink4Tia.OnSymbolicWriteMixExCompleted">
            <summary>
            The asynchronous operation of Symbolic_WriteMixEx has been accomplished
            </summary>
        </member>
        <member name="T:Accon.AGLink.Factory">
            <summary>
            Generiert Betriebssystemspezifische AGLink4-Instanzen
            </summary>
        </member>
        <member name="M:Accon.AGLink.Factory.CreateIAGLink(Accon.AGLink.AsyncReportType)">
            <summary>
            Erstellt eine AGLink4-Instanz für NT-Systeme
            </summary>
            <returns>AGLink4 - Instanze</returns>
        </member>
        <member name="M:Accon.AGLink.Factory.CreateIRfc1006(Accon.AGLink.AsyncReportType)">
            <summary>
            Erstellt eine Rfc1006-Instanz für NT-Systeme
            </summary>
            <returns>AGLink4 - Instanze</returns>
        </member>
        <member name="M:Accon.AGLink.Factory.CreateIAGLinkTia(Accon.AGLink.AsyncReportType)">
            <summary>
            Erstellt eine AGLink4Tia-Instanz für NT-Systeme
            </summary>
            <returns>AGLink4 - Instanze</returns>
        </member>
        <member name="M:Accon.AGLink.Factory.CreateIAGLinkSimotion(Accon.AGLink.AsyncReportType)">
            <summary>
            Erstellt eine AGLink4Simotion-Instanz für NT-Systeme
            </summary>
            <returns>AGLink4 - Instanze</returns>
        </member>
        <member name="T:Accon.AGLink.FunctionType">
            <summary>
            Definiert alle Kommunikationsfunktionen, die asynchron verwendet werden können
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.None">
            <summary>
            Unbekannte Funktion
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetLifeList">
            <summary>
            Funktion GetLifeList
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetDirectPLC">
            <summary>
            Funktion GetDirectPLC
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadPLCInfo">
            <summary>
            Funktion ReadPLCInfo
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadDiagBufferEntrys">
            <summary>
            Funktion ReadDiagBufferEntrys
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadDiagBuffer">
            <summary>
            Funktion ReadDiagBuffer
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetDiagBuffer">
            <summary>
            Funktion GetDiagBuffer
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadOpState">
            <summary>
            Funktion ReadOpState
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.PLCStop">
            <summary>
            Funktion PLCStop
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.PLCStart">
            <summary>
            Funktion PLCStart
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.PLCResume">
            <summary>
            Funktion PLCResume
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadCycleTime">
            <summary>
            Funktion ReadCycleTime
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadProtLevel">
            <summary>
            Funktion ReadProtLevel
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetPLCClock">
            <summary>
            Funktion GetPLCClock
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.SetPLCClock">
            <summary>
            Funktion SetPLCClock
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadSzl">
            <summary>
            Funktion ReadSzl
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadDBCount">
            <summary>
            Funktion ReadDBCount
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadDBList">
            <summary>
            Funktion ReadDBList
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadDBLen">
            <summary>
            Funktion ReadDBLen
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadInBytes">
            <summary>
            Funktion ReadInBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadPInBytes">
            <summary>
            Funktion ReadPInBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadOutBytes">
            <summary>
            Funktion ReadOutBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadFlagBytes">
            <summary>
            Funktion ReadFlagBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadSFlagBytes">
            <summary>
            Funktion ReadSFlagBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadVarBytes">
            <summary>
            Funktion ReadVarBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadDataBytes">
            <summary>
            Funktion ReadDataBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadDataWords">
            <summary>
            Funktion ReadDataWords
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadTimerWords">
            <summary>
            Funktion ReadTimerWords
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadCounterWords">
            <summary>
            Funktion ReadCounterWords
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadMix">
            <summary>
            Funktion ReadMix
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadMixEx">
            <summary>
            Funktion ReadMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteInBytes">
            <summary>
            Funktion WriteInBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteOutBytes">
            <summary>
            Funktion WriteOutBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WritePOutBytes">
            <summary>
            Funktion WritePOutBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteFlagBytes">
            <summary>
            Funktion WriteFlagBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteSFlagBytes">
            <summary>
            Funktion WriteSFlagBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteVarBytes">
            <summary>
            Funktion WriteVarBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteDataBytes">
            <summary>
            Funktion WriteDataBytes
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteDataWords">
            <summary>
            Funktion WriteDataWords
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteTimerWords">
            <summary>
            Funktion WriteTimerWords
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteCounterWords">
            <summary>
            Funktion WriteCounterWords
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteMix">
            <summary>
            Funktion WriteMix
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteMixEx">
            <summary>
            Funktion WriteMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadOptReadMix">
            <summary>
            Funktion ReadOptReadMix
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadOptReadMixEx">
            <summary>
            Funktion ReadOptReadMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteOptWriteMix">
            <summary>
            Funktion WriteOptWriteMix
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteOptWriteMixEx">
            <summary>
            Funktion WriteOptWriteMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.BReceive">
            <summary>
            Funktion BReceive
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.BReceiveEx">
            <summary>
            Funktion BReceiveEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.BSend">
            <summary>
            Funktion BSend
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.BSendEx">
            <summary>
            Funktion BSendEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadMLFB">
            <summary>
            Funktion ReadMLFB
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadMLFBEx">
            <summary>
            Funktion ReadMLFBEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.DialUp">
            <summary>
            Funktion DialUp
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.HangUp">
            <summary>
            Funktion HangUp
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.InitAdapter">
            <summary>
            Funktion InitAdapter
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ExitAdapter">
            <summary>
            Funktion ExitAdapter
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.PLCConnect">
            <summary>
            Funktion PLCConnect
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.PLCConnectEx">
            <summary>
            Funktion PLCConnectEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.PLCDisconnect">
            <summary>
            Funktion PLCDisconnect
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetTapiModemNames">
            <summary>
            Funktion GetTapiModemNames
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.USend">
            <summary>
            Funktion USend
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.UReceive">
            <summary>
            Funktion UReceive
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadOpStateEx">
            <summary>
            Funktion ReadOpStateEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetPLCStartOptions">
            <summary>
            Funktion GetPLCStartOptions
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.PLCColdStart">
            <summary>
            Funktion PLCColdStart
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.IsHPLC">
            <summary>
            Funktion IsHPLC
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.HPLCStop">
            <summary>
            Funktion HPLCStop
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.HPLCStart">
            <summary>
            Funktion HPLCStart
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.HPLCColdStart">
            <summary>
            Funktion HPLCColdStart
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.SyncPLCClock">
            <summary>
            Funktion SyncPLCClock
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadS7Ident">
            <summary>
            Funktion ReadS7Ident
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadS7LED">
            <summary>
            Funktion ReadS7LED
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetExtModuleInfo">
            <summary>
            Funktion GetExtModuleInfo
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.IsPasswordReq">
            <summary>
            Funktion IsPasswordReq
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.SetPassword">
            <summary>
            Funktion SetPassword
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.UnSetPassword">
            <summary>
            Funktion UnSetPassword
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadAllBlockCount">
            <summary>
            Funktion ReadAllBlockCount
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadBlockCount">
            <summary>
            Funktion ReadBlockCount
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadBlockList">
            <summary>
            Funktion ReadBlockList
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadBlockLen">
            <summary>
            Funktion ReadBlockLen
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetRedConnStateMsg">
            <summary>
            Funktion GetRedConnStateMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.InitOpStateMsg">
            <summary>
            Funktion InitOpStateMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ExitOpStateMsg">
            <summary>
            Funktion ExitOpStateMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetOpStateMsg">
            <summary>
            Funktion GetOpStateMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.InitDiagMsg">
            <summary>
            Funktion InitDiagMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ExitDiagMsg">
            <summary>
            Funktion ExitDiagMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetDiagMsg">
            <summary>
            Funktion GetDiagMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.InitCyclicRead">
            <summary>
            Funktion InitCyclicRead
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.InitCyclicReadEx">
            <summary>
            Funktion InitCyclicReadEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.StartCyclicRead">
            <summary>
            Funktion StartCyclicRead
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.StopCyclicRead">
            <summary>
            Funktion StopCyclicRead
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ExitCyclicRead">
            <summary>
            Funktion ExitCyclicRead
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetCyclicRead">
            <summary>
            Funktion GetCyclicRead
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetCyclicReadEx">
            <summary>
            Funktion GetCyclicReadEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.InitScanMsg">
            <summary>
            Funktion InitScanMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ExitScanMsg">
            <summary>
            Funktion ExitScanMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetScanMsg">
            <summary>
            Funktion GetScanMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.HasAckTriggeredMsg">
            <summary>
            Funktion HasAckTriggeredMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.InitAlarmMsg">
            <summary>
            Funktion InitAlarmMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ExitAlarmMsg">
            <summary>
            Funktion ExitAlarmMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetAlarmMsg">
            <summary>
            Funktion GetAlarmMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadOpenMsg">
            <summary>
            Funktion ReadOpenMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetMsgStateChange">
            <summary>
            Funktion GetMsgStateChange
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.AckMsg">
            <summary>
            Funktion AckMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.LockMsg">
            <summary>
            Funktion LockMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.UnlockMsg">
            <summary>
            Funktion UnlockMsg
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.InitARSend">
            <summary>
            Funktion InitARSend
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ExitARSend">
            <summary>
            Funktion ExitARSend
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetARSend">
            <summary>
            Funktion GetARSend
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.OpenDevice">
            <summary>
            Funktion OpenDevice
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.CloseDevice">
            <summary>
            Funktion CloseDevice
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.SetDevType">
            <summary>
            Funktion SetDevType
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.GetDevType">
            <summary>
            Funktion GetDevType
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.ReadParasFromFile">
            <summary>
            Funktion ReadParasFromFile
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.WriteParasToFile">
            <summary>
            Funktion WriteParasToFile
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.InitOptReadMix">
            <summary>
            Funktion InitOptReadMix
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.InitOptReadMixEx">
            <summary>
            Funktion InitOptReadMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.EndOptReadMix">
            <summary>
            Funktion EndOptReadMix
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.EndOptReadMixEx">
            <summary>
            Funktion EndOptReadMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.InitOptWriteMix">
            <summary>
            Funktion InitOptWriteMix
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.InitOptWriteMixEx">
            <summary>
            Funktion InitOptWriteMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.EndOptWriteMix">
            <summary>
            Funktion EndOptWriteMix
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.EndOptWriteMixEx">
            <summary>
            Funktion EndOptWriteMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.RKSend">
            <summary>
            Funktion RKSend
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.RKSendEx">
            <summary>
            Funktion RKSendEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.RKFetch">
            <summary>
            Funktion RKFetch
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.RKFetchEx">
            <summary>
            Funktion RKFetchEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.Send_RKFetch">
            <summary>
            Funktion Send_RKFetch
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.Recv_RKSend">
            <summary>
            Funktion Recv_RKSend
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.Recv_RKFetch">
            <summary>
            Funktion Recv_RKFetch
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.Send_3964">
            <summary>
            Funktion Send_3964
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.Recv_3964">
            <summary>
            Funktion Recv_3964
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_CopyToNC">
            <summary>
            Funktion NCK_CopyToNC
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_CopyFromNC">
            <summary>
            Funktion NCK_CopyFromNC
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_CopyFromNCAlloc">
            <summary>
            Funktion NCK_CopyFromNCAlloc
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_FreeBuff">
            <summary>
            Funktion NCK_FreeBuff
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_CopyFileToNC">
            <summary>
            Funktion NCK_CopyFileToNC
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_CopyFileFromNC">
            <summary>
            Funktion NCK_CopyFileFromNC
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_CheckNSKVarLine">
            <summary>
            Funktion NCK_CheckNSKVarLine
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_ReadNSKVarFile">
            <summary>
            Funktion NCK_ReadNSKVarFile
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_CheckCSVVarLine">
            <summary>
            Funktion NCK_CheckCSVVarLine
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_ReadCSVVarFile">
            <summary>
            Funktion NCK_ReadCSVVarFile
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_ReadGUDVarFile">
            <summary>
            Funktion NCK_ReadGUDVarFile
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_ReadGUDVarFileEx">
            <summary>
            Funktion NCK_ReadGUDVarFileEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_ReadMixEx">
            <summary>
            Funktion NCK_ReadMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_WriteMixEx">
            <summary>
            Funktion NCK_WriteMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_InitCyclicReadEx">
            <summary>
            Funktion NCK_InitCyclicReadEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_StartCyclicRead">
            <summary>
            Funktion NCK_StartCyclicRead
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_StopCyclicRead">
            <summary>
            Funktion NCK_StopCyclicRead
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_ExitCyclicRead">
            <summary>
            Funktion NCK_ExitCyclicRead
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_GetCyclicReadEx">
            <summary>
            Funktion NCK_GetCyclicReadEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_StartAll">
            <summary>
            Funktion NCK_PI_StartAll
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_EXTERN">
            <summary>
            Funktion NCK_PI_EXTERN
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_EXTMOD">
            <summary>
            Funktion NCK_PI_EXTMOD
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_SELECT">
            <summary>
            Funktion NCK_PI_SELECT
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_F_DELE">
            <summary>
            Funktion NCK_PI_F_DELE
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_F_XFER">
            <summary>
            Funktion NCK_PI_F_XFER
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_F_PROT">
            <summary>
            Funktion NCK_PI_F_PROT
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_LOGIN">
            <summary>
            Funktion NCK_PI_LOGIN
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_LOGOUT">
            <summary>
            Funktion NCK_PI_LOGOUT
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_F_RENA">
            <summary>
            Funktion NCK_PI_F_RENA
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.Drive_ReadMix">
            <summary>
            Funktion Drive_ReadMix
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.Drive_ReadMixEx">
            <summary>
            Funktion Drive_ReadMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.Drive_WriteMix">
            <summary>
            Funktion Drive_WriteMix
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.Drive_WriteMixEx">
            <summary>
            Funktion Drive_WriteMixEx
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_F_OPEN">
            <summary>
            Funktion NCK_PI_F_OPEN
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_F_OPER">
            <summary>
            Funktion NCK_PI_F_OPER
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_F_SEEK">
            <summary>
            Funktion NCK_PI_F_SEEK
            </summary>
        </member>
        <member name="F:Accon.AGLink.FunctionType.NCK_PI_F_CLOS">
            <summary>
            Funktion NCK_PI_F_CLOS
            </summary>
        </member>
        <member name="T:Accon.AGLink.ConnectionManager">
            <summary>
            An dieser Klasse melden sich alle Verbidungsobjekte an, um über Fehler ihrer Kollegen informiert zu werden.
            Diese Klasse startet die Verbindungswiederaufbauversuche.
            
            Diese Klasse ist eine Singleton-Klasse
            </summary>
        </member>
        <member name="F:Accon.AGLink.ConnectionManager._Instance">
            <summary>
            Private und einzige Instanz dieser Klasse, da diese Klasse ALLE Verbindungen beherbergen soll.
            </summary>
        </member>
        <member name="M:Accon.AGLink.ConnectionManager.Instance">
            <summary>
            Zugriffsfunktion auf die einzige Instanz dieser Klasse.
            </summary>
            <returns>Verbindungsmanager</returns>
        </member>
        <member name="M:Accon.AGLink.ConnectionManager.Notify(Accon.AGLink.ManageableConnection,Accon.AGLink.ConnectionErrorDO)">
            <summary>
            Oberser-Muster Imlpementierung. 
            
            Benachrichtigt alle Verbindungen über einen Fehler. Zwingt einen Verbindungabbau und startet den asynchronen Verbindungsaufbau an
            </summary>
            <param name="connerrordetails">Verbindungsinformationen</param>
        </member>
        <member name="M:Accon.AGLink.ConnectionManager.Attach(Accon.AGLink.ManageableConnection)">
            <summary>
            Oberserver-Muster Implementierung
            
            Über diese Funktion melden sich Verbindungsobjekte beim Manager an, um über Verbindungsfehler informiert zu werden.
            </summary>
            <param name="connection">Verbindungsobjekt</param>
        </member>
        <member name="M:Accon.AGLink.ConnectionManager.Detach(Accon.AGLink.ManageableConnection)">
            <summary>
            Observer-Muster Implementierung
            
            Über diese Funktion kann sich ein Verbindugnsobjekt vom Manager wieder abmelden und bekommt somit keine Infos über Fehler.
            </summary>
            <param name="connection">Verbindungsobjekt</param>
        </member>
        <member name="T:Accon.AGLink.Rfc1006EventArgs">
            <summary>
            Common information of a event from AGLink with RFC1006
            </summary>
        </member>
        <member name="M:Accon.AGLink.Rfc1006EventArgs.#ctor(Accon.AGLink.IRfc1006,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Initializes the data
            </summary>
            <param name="sender">Instance of AGLink triggered this event</param>
            <param name="result">Function call result</param>
            <param name="jobNr">Job number giben at function call</param>
            <param name="errormsg">Message of the error as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006EventArgs.#ctor(System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Initializes the data
            </summary>
            <param name="result">Function call result</param>
            <param name="jobNr">Job number giben at function call</param>
            <param name="errormsg">Message of the error as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006EventArgs.#ctor(Accon.AGLink.IRfc1006,System.Int32,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Initializes the data
            </summary>
            <param name="sender">Instance of AGLink triggered this event</param>
            <param name="result">Function call result</param>
            <param name="jobNr">Job number giben at function call</param>
            <param name="serror">Error nummber from plc</param>
            <param name="errormsg">Message of the error as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="P:Accon.AGLink.Rfc1006EventArgs.Sender">
            <summary>
            Gets the AGLink instance that triggerd the event
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006EventArgs.SError">
            <summary>
            Gets the error number from the plc
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006EventArgs.Result">
            <summary>
            Gets the method call result
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006EventArgs.JobNr">
            <summary>
            Gets the job number given at the call of the function
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006EventArgs.ErrorMsg">
            <summary>
            Gets the error as a string message
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006EventArgs.Time">
            <summary>
            Gets the system time of the plc as function call
            </summary>
        </member>
        <member name="T:Accon.AGLink.Rfc1006DynamicEventArgs`1">
            <summary>
            Common information of a event from AGLink with RFC1006
            </summary>
        </member>
        <member name="M:Accon.AGLink.Rfc1006DynamicEventArgs`1.#ctor(`0,Accon.AGLink.IRfc1006,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Inizializes the data
            </summary>
            <param name="eventdata">Function specific event data</param>
            <param name="sender">Instance of RFC that triggered the event</param>
            <param name="funcresult">Function call result</param>
            <param name="jobNr">Job number from AGLink given at function call</param>
            <param name="errormsg">Message of the errir as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006DynamicEventArgs`1.#ctor(`0,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Inizializes the data
            </summary>
            <param name="eventdata">Function specific event data</param>
            <param name="funcresult">Function call result</param>
            <param name="jobNr">Job number from AGLink given at function call</param>
            <param name="errormsg">Message of the errir as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006DynamicEventArgs`1.#ctor(`0,Accon.AGLink.IRfc1006,System.Int32,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Inizializes the data
            </summary>
            <param name="eventdata">Function specific event data</param>
            <param name="sender">Instance of RFC that triggered the event</param>
            <param name="funcresult">Function call result</param>
            <param name="jobNr">Job number from AGLink given at function call</param>
            <param name="serror">Error nummber from plc</param>
            <param name="errormsg">Message of the errir as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="P:Accon.AGLink.Rfc1006DynamicEventArgs`1.EventData">
            <summary>
            Gets the function specific Result data
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGLinkEventArgs">
            <summary>
            Common information of a event from AGLink
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGLinkEventArgs.#ctor(Accon.AGLink.IAGLink4,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Initializes the data
            </summary>
            <param name="sender">Instance of AGLink triggered this event</param>
            <param name="result">Function call result</param>
            <param name="jobNr">Job number giben at function call</param>
            <param name="errormsg">Message of the error as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.AGLinkEventArgs.#ctor(System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Initializes the data
            </summary>
            <param name="result">Function call result</param>
            <param name="jobNr">Job number giben at function call</param>
            <param name="errormsg">Message of the error as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.AGLinkEventArgs.#ctor(Accon.AGLink.IAGLink4,System.Int32,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Initializes the data
            </summary>
            <param name="sender">Instance of AGLink triggered this event</param>
            <param name="result">Function call result</param>
            <param name="jobNr">Job number giben at function call</param>
            <param name="serror">Error nummber from plc</param>
            <param name="errormsg">Message of the error as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="P:Accon.AGLink.AGLinkEventArgs.Sender">
            <summary>
            Gets the AGLink instance that triggerd the event
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkEventArgs.SError">
            <summary>
            Gets the error number from the plc
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkEventArgs.Result">
            <summary>
            Gets the method call result
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkEventArgs.JobNr">
            <summary>
            Gets the job number given at the call of the function
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkEventArgs.ErrorMsg">
            <summary>
            Gets the error as a string message
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkEventArgs.Time">
            <summary>
            Gets the system time of the plc as function call
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGLinkDynamicEventArgs`1">
            <summary>
            Genereische Ereignisinformationen
            </summary>
            <typeparam name="T">Funktionsbezogene Daten</typeparam>
        </member>
        <member name="M:Accon.AGLink.AGLinkDynamicEventArgs`1.#ctor(`0,Accon.AGLink.IAGLink4,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Inizializes the data
            </summary>
            <param name="eventdata">Function specific event data</param>
            <param name="sender">Instance of AGLink that triggered the event</param>
            <param name="funcresult">Function call result</param>
            <param name="jobNr">Job number from AGLink given at function call</param>
            <param name="errormsg">Message of the errir as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.AGLinkDynamicEventArgs`1.#ctor(`0,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Inizializes the data
            </summary>
            <param name="eventdata">Function specific event data</param>
            <param name="funcresult">Function call result</param>
            <param name="jobNr">Job number from AGLink given at function call</param>
            <param name="errormsg">Message of the errir as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.AGLinkDynamicEventArgs`1.#ctor(`0,Accon.AGLink.IAGLink4,System.Int32,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Inizializes the data
            </summary>
            <param name="eventdata">Function specific event data</param>
            <param name="sender">Instance of AGLink that triggered the event</param>
            <param name="funcresult">Function call result</param>
            <param name="jobNr">Job number from AGLink given at function call</param>
            <param name="serror">Error nummber from plc</param>
            <param name="errormsg">Message of the errir as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="P:Accon.AGLink.AGLinkDynamicEventArgs`1.EventData">
            <summary>
            Gets the function specific Result data
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGLinkTiaEventArgs">
            <summary>
            Common information of a event from AGLink
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGLinkTiaEventArgs.#ctor(Accon.AGLink.IAGLink4Tia,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Initializes the data
            </summary>
            <param name="sender">Instance of AGLink triggered this event</param>
            <param name="result">Function call result</param>
            <param name="jobNr">Job number giben at function call</param>
            <param name="errormsg">Message of the error as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.AGLinkTiaEventArgs.#ctor(System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Initializes the data
            </summary>
            <param name="result">Function call result</param>
            <param name="jobNr">Job number giben at function call</param>
            <param name="errormsg">Message of the error as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.AGLinkTiaEventArgs.#ctor(Accon.AGLink.IAGLink4Tia,System.Int32,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Initializes the data
            </summary>
            <param name="sender">Instance of AGLink triggered this event</param>
            <param name="result">Function call result</param>
            <param name="jobNr">Job number giben at function call</param>
            <param name="serror">Error nummber from plc</param>
            <param name="errormsg">Message of the error as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="P:Accon.AGLink.AGLinkTiaEventArgs.Sender">
            <summary>
            Gets the AGLink instance that triggerd the event
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkTiaEventArgs.SError">
            <summary>
            Gets the error number from the plc
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkTiaEventArgs.Result">
            <summary>
            Gets the method call result
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkTiaEventArgs.JobNr">
            <summary>
            Gets the job number given at the call of the function
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkTiaEventArgs.ErrorMsg">
            <summary>
            Gets the error as a string message
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkTiaEventArgs.Time">
            <summary>
            Gets the system time of the plc as function call
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGLinkTiaDynamicEventArgs`1">
            <summary>
            Genereische Ereignisinformationen
            </summary>
            <typeparam name="T">Funktionsbezogene Daten</typeparam>
        </member>
        <member name="M:Accon.AGLink.AGLinkTiaDynamicEventArgs`1.#ctor(`0,Accon.AGLink.IAGLink4Tia,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Inizializes the data
            </summary>
            <param name="eventdata">Function specific event data</param>
            <param name="sender">Instance of AGLink that triggered the event</param>
            <param name="funcresult">Function call result</param>
            <param name="jobNr">Job number from AGLink given at function call</param>
            <param name="errormsg">Message of the errir as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.AGLinkTiaDynamicEventArgs`1.#ctor(`0,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Inizializes the data
            </summary>
            <param name="eventdata">Function specific event data</param>
            <param name="funcresult">Function call result</param>
            <param name="jobNr">Job number from AGLink given at function call</param>
            <param name="errormsg">Message of the errir as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.AGLinkTiaDynamicEventArgs`1.#ctor(`0,Accon.AGLink.IAGLink4Tia,System.Int32,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Inizializes the data
            </summary>
            <param name="eventdata">Function specific event data</param>
            <param name="sender">Instance of AGLink that triggered the event</param>
            <param name="funcresult">Function call result</param>
            <param name="jobNr">Job number from AGLink given at function call</param>
            <param name="serror">Error nummber from plc</param>
            <param name="errormsg">Message of the errir as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="P:Accon.AGLink.AGLinkTiaDynamicEventArgs`1.EventData">
            <summary>
            Gets the function specific Result data
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGLinkSimotionEventArgs">
            <summary>
            Common information of a event from AGLink
            </summary>
        </member>
        <member name="M:Accon.AGLink.AGLinkSimotionEventArgs.#ctor(Accon.AGLink.IAGLink4Simotion,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Initializes the data
            </summary>
            <param name="sender">Instance of AGLink triggered this event</param>
            <param name="result">Function call result</param>
            <param name="jobNr">Job number giben at function call</param>
            <param name="errormsg">Message of the error as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.AGLinkSimotionEventArgs.#ctor(System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Initializes the data
            </summary>
            <param name="result">Function call result</param>
            <param name="jobNr">Job number giben at function call</param>
            <param name="errormsg">Message of the error as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.AGLinkSimotionEventArgs.#ctor(Accon.AGLink.IAGLink4Simotion,System.Int32,System.Int32,System.UInt32,System.String,System.DateTime)">
            <summary>
            Initializes the data
            </summary>
            <param name="sender">Instance of AGLink triggered this event</param>
            <param name="result">Function call result</param>
            <param name="jobNr">Job number giben at function call</param>
            <param name="serror">Error nummber from plc</param>
            <param name="errormsg">Message of the error as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="P:Accon.AGLink.AGLinkSimotionEventArgs.Sender">
            <summary>
            Gets the AGLink instance that triggerd the event
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkSimotionEventArgs.SError">
            <summary>
            Gets the error number from the plc
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkSimotionEventArgs.Result">
            <summary>
            Gets the method call result
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkSimotionEventArgs.JobNr">
            <summary>
            Gets the job number given at the call of the function
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkSimotionEventArgs.ErrorMsg">
            <summary>
            Gets the error as a string message
            </summary>
        </member>
        <member name="P:Accon.AGLink.AGLinkSimotionEventArgs.Time">
            <summary>
            Gets the system time of the plc as function call
            </summary>
        </member>
        <member name="T:Accon.AGLink.AGLinkSimotionDynamicEventArgs`1">
            <summary>
            Genereische Ereignisinformationen
            </summary>
            <typeparam name="T">Funktionsbezogene Daten</typeparam>
        </member>
        <member name="M:Accon.AGLink.AGLinkSimotionDynamicEventArgs`1.#ctor(`0,Accon.AGLink.IAGLink4Simotion,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Inizializes the data
            </summary>
            <param name="eventdata">Function specific event data</param>
            <param name="sender">Instance of AGLink that triggered the event</param>
            <param name="funcresult">Function call result</param>
            <param name="jobNr">Job number from AGLink given at function call</param>
            <param name="errormsg">Message of the errir as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.AGLinkSimotionDynamicEventArgs`1.#ctor(`0,System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
            Inizializes the data
            </summary>
            <param name="eventdata">Function specific event data</param>
            <param name="funcresult">Function call result</param>
            <param name="jobNr">Job number from AGLink given at function call</param>
            <param name="errormsg">Message of the errir as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="M:Accon.AGLink.AGLinkSimotionDynamicEventArgs`1.#ctor(`0,Accon.AGLink.IAGLink4Simotion,System.Int32,System.Int32,System.UInt32,System.String,System.DateTime)">
            <summary>
            Inizializes the data
            </summary>
            <param name="eventdata">Function specific event data</param>
            <param name="sender">Instance of AGLink that triggered the event</param>
            <param name="funcresult">Function call result</param>
            <param name="jobNr">Job number from AGLink given at function call</param>
            <param name="serror">Error nummber from plc</param>
            <param name="errormsg">Message of the errir as string</param>
            <param name="time">System time of plc at function call</param>
        </member>
        <member name="P:Accon.AGLink.AGLinkSimotionDynamicEventArgs`1.EventData">
            <summary>
            Gets the function specific Result data
            </summary>
        </member>
        <member name="T:Accon.AGLink.ConnectionEventArgs">
            <summary>
            Connection information
            </summary>
        </member>
        <member name="M:Accon.AGLink.ConnectionEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Initializes the data
            </summary>
            <param name="errMsg">Error message</param>
            <param name="errnr">Error code</param>
        </member>
        <member name="M:Accon.AGLink.ConnectionEventArgs.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes the data
            </summary>
            <param name="errMsg">Error message</param>
            <param name="errnr">Error code</param>
            <param name="serror">Error nummber from plc</param>
        </member>
        <member name="P:Accon.AGLink.ConnectionEventArgs.ErrMsg">
            <summary>
            Gets the error message
            </summary>
        </member>
        <member name="P:Accon.AGLink.ConnectionEventArgs.Result">
            <summary>
            Gets the error code
            </summary>
        </member>
        <member name="P:Accon.AGLink.ConnectionEventArgs.SError">
            <summary>
            Gets the error number from the plc
            </summary>
        </member>
        <member name="M:Accon.AGLink.ConnectionEventArguments.#ctor(Accon.AGLink.ErrorDO)">
            <summary>
            Konstruktor
            </summary>
            <param name="errordetails">Fehlerdetails</param>
        </member>
        <member name="P:Accon.AGLink.ConnectionEventArguments.Errordetails">
            <summary>
            Fehlerdetails
            </summary>
        </member>
        <member name="T:Accon.AGLink.NativeMessageReceiver">
            <summary>
            Empfägt Window-Messages, die von der AGLink40.dll gesendet werden.
            Diese Klasse reagiert auf asynchrone Funktionsbenachrichtigungen
            </summary>
        </member>
        <member name="F:Accon.AGLink.NativeMessageReceiver.MESSAGE">
            <summary>
            Identifikation, die vom AGLink40.dll für die Benachrichtigung verwendet wird.
            </summary>
        </member>
        <member name="M:Accon.AGLink.NativeMessageReceiver.WndProc(System.Windows.Forms.Message@)">
            <summary>
            AGLink sendet eine Windowmessage, die wir hier abfangen und weiterleiten.
            </summary>
            <param name="m">Message</param>
        </member>
        <member name="P:Accon.AGLink.NativeMessageReceiver.Connected">
            <summary>
            Gibt oder setzt ein Flag, welches die Weiterleitung der ankommenden Nachrichten ein und ausschaltet
            </summary>
        </member>
        <member name="T:Accon.AGLink.MemoryObject">
            <summary>
            Wird bei asynchronen Funktiosnaufrufen zur Speicherung der Funktionsdaten genutzt und dient dazu, die Daten nach Beendigung wieder beschaffen zu können
            </summary>
        </member>
        <member name="M:Accon.AGLink.MemoryObject.#ctor(Accon.AGLink.FunctionType,System.Int32,System.Object,System.Int32)">
            <summary>
            Konsturktor
            </summary>
            <param name="func">Funktionsidentifikation</param>
            <param name="job">JobNr der ausgeführtne Funktion</param>
            <param name="data">Daten der ausgeführten Funktion</param>
            <param name="connNr">Der Verbindungshandle, mit dem der AGLink-Job später einer Verbindung zugeordnet werden kann</param>
        </member>
        <member name="P:Accon.AGLink.MemoryObject.Func">
            <summary>
            Gibt die Funktion, die zu diesem Speicherobjekt gehört zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.MemoryObject.JobNr">
            <summary>
            Gibt die Jobnr der ausgeführten Funktion zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.MemoryObject.Data">
            <summary>
            Gibt die Daten, die die Funktion benötigt zurück
            </summary>
        </member>
        <member name="M:Accon.AGLink.IRfc1006.Connect">
            <summary>
            Use this function to establish a connection to the remote site or wait for an incoming connection.
            In the device configuration, you specify whether you want to build up the the connection active, so as a client, 
            or passive, ie as a server. You make this setting via the external configuration program AGLink40_Config.EXE. 
            In programmatic configuration (using function SetParas) please indicate this in the parameter element flags in the RFC_1006 parameters. 
            Use constant CONNECT_PASSIVE to establish the connection as a server and CONNECT_ACTIVE as a client. Use RFC1006_ONLY_ONE, if only one 
            connection should be allowed for a remote site, identified by the IP address. Use RFC1006_REJECT_NEW to maintain an existing connection in a further 
            attempt to establish a remote connection.
            </summary>
        </member>
        <member name="M:Accon.AGLink.IRfc1006.Disconnect">
            <summary>
            This function dismounts the connection to the remote site.
            </summary>
        </member>
        <member name="M:Accon.AGLink.IRfc1006.Receive(System.Byte[]@,System.Int32@)">
            <summary>
            With this function you to receive data via RFC 1006 connection. An existing connection to remote site must be established.
            </summary>
            <param name="buff">Pointer to the receive buffer</param>
            <param name="receivedLen">Number of received characters</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IRfc1006.Receive(System.Byte[]@,System.Int32@,System.Int32)">
            <summary>
            With this function you to receive data via RFC 1006 connection. An existing connection to remote site must be established.
            </summary>
            <param name="buff">Pointer to the receive buffer</param>
            <param name="receivedLen">Number of received characters</param>
            <param name="timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IRfc1006.Send(System.Byte[])">
            <summary>
            With this function you to send data via RFC 1006 connection. An existing connection to remote site must be established.
            </summary>
            <param name="buff">Pointer to the send buffer</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.AGLink.IRfc1006.Send(System.Byte[],System.Int32)">
            <summary>
            With this function you to send data via RFC 1006 connection. An existing connection to remote site must be established.
            </summary>
            <param name="buff">Pointer to the send buffer</param>
            <param name="timeout">The timeout value to use</param>
            <returns>&gt;= 0	JobNo. at asynchronous call and synchronous call with ReturnJobNr(true) or AGL40_SUCCESS 
            if it is a synchronous call &lt; 0	Error number</returns>
        </member>
        <member name="E:Accon.AGLink.IRfc1006.OnConnected">
            <summary>
            Connection successfully established 
            </summary>
        </member>
        <member name="E:Accon.AGLink.IRfc1006.OnDisconnected">
            <summary>
            Disconnected successfully
            </summary>
        </member>
        <member name="E:Accon.AGLink.IRfc1006.OnConnectionErrorOccured">
            <summary>
            Connectionerror occurred or the connection could not be established
            </summary>
        </member>
        <member name="E:Accon.AGLink.IRfc1006.OnConnectAborted">
            <summary>
            The automatic reconnect loop has been canceled
            </summary>
        </member>
        <member name="E:Accon.AGLink.IRfc1006.OnReceiveCompleted">
            <summary>
            The asynchronous operation of Receive has been accomplished
            </summary>
        </member>
        <member name="E:Accon.AGLink.IRfc1006.OnSendCompleted">
            <summary>
            The asynchronous operation of Send has been accomplished
            </summary>
        </member>
        <member name="P:Accon.AGLink.IRfc1006.Serverinfo">
            <summary>
            Gets information about the connected partner
            </summary>
        </member>
        <member name="M:Accon.AGLink.Rfc1006.CreateDataReceiver">
            <summary>
            Erzeugt einen Empfänger für Daten aus AGLink
            </summary>
        </member>
        <member name="M:Accon.AGLink.Rfc1006._Connection_OnJobsInvalidated(System.Object,System.EventArgs)">
            <summary>
            Gibt den Speicher für AGLink-Jobs frei, die nach Verbindungsbeendigung nicht mehr auffindbar sind
            </summary>
            <param name="sender">nicht genutzt</param>
            <param name="e">Nicht genutzt</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006.PLCMessageReceived(Accon.AGLink.AGL4.RESULT40,System.Int32)">
            <summary>
            Diese Funktion löst die JobNr und die RESULT40-Struktur auf und löst selbst ein entsprechendes Ereignis aus, welches vom Benutzer abgefangen werden kann um über empfangen Daten informiert zu werden.
            </summary>
            <param name="result">Funktionsergebnis und identifikation einer asynchronen Funktion</param>
            <param name="jobNr">Die vom AGLink vergeben Job-Nr die an den Benutzer weitergeleitet werden soll</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006.InvokeFunctionEvent(Accon.AGLink.AGL4.RESULT40,Accon.AGLink.ErrorDO@,System.Int32)">
            <summary>
            Verarbeitet das Ergebnis eines asynchronen Funktionsaufrufes und gibt den Speicher für diesen im verwalteten Bereich wieder frei
            </summary>
            <param name="result">Funktionsergebnisinformationen</param>
            <param name="errordetails">Fehlerinformationen</param>
            <param name="jobNr">AGLink-JobNr</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006.GetExecutionTime(Accon.AGLink.AGL4.RESULT40)">
            <summary>
            Erstellt die DateTime, des Funktionsaufrufes
            </summary>
            <param name="result">Funktionsergebnis</param>
            <returns>Generierte Aufrufzeit</returns>
        </member>
        <member name="M:Accon.AGLink.Rfc1006.Connect">
            <summary>
            Baut eine vollständige Verbindung bis zum parametrierten AG auf
            </summary>
            <returns>Bei synchronem Aufruf Ergebnisflag, sonst Aussagelos</returns>
        </member>
        <member name="M:Accon.AGLink.Rfc1006.Disconnect">
            <summary>
            Baut eine Verbindugn komplett ab
            </summary>
            <returns>Bei synchronem Aufruf Ergebnisflag, sonst Aussagelos</returns>
        </member>
        <member name="M:Accon.AGLink.Rfc1006.StopReconnecting">
            <summary>
            Stopt die Verbindungsschleife, die bei einem Verbindungsfehler automatisch gestartet wird
            </summary>
        </member>
        <member name="T:Accon.AGLink.Rfc1006Connection">
            <summary>
            Bildet eine Verbindung zu einem Gerät bzw einer SPS ab
            </summary>
        </member>
        <member name="F:Accon.AGLink.Rfc1006Connection._AsyncConnectionErrorHandler">
            <summary>
            Über diesen Delegate ruft die Arbeitsmethode (Reconnect) das 
            AsyncConnectionFailed-Ereignis auf. Diese Methode nutzt dazu die
            Post-Methode des verwendeten AsyncOperation-Objekts, die dafür sorgt,
            dass das Ereignis im richtigen Thread aufgerufen wird. Die Zuweisung 
            dieses Delegates erfolgt im Konstruktor der Klasse.
            </summary>
        </member>
        <member name="F:Accon.AGLink.Rfc1006Connection._AsyncConnectedHandler">
            <summary>
            Über diesen Delegate ruft die Arbeitsmethode (Reconnect) das
            AsyncConnected-Ereignis auf. Diese Methode nutzt dazu die 
            Post-Methode des verwendeten AsyncOperation-Objekts, die dafür sorgt,
            dass das Ereignis im richtigen Thread aufgerufen wird. Die Zuweisung
            dieses Delegates erfolgt im Konstruktor der Klasse.
            </summary>
        </member>
        <member name="F:Accon.AGLink.Rfc1006Connection._AsyncDisconnectedHandler">
            <summary>
            Über diesen Delegate ruft die Arbeitsmethode (Reconnect) das
            AsyncConnected-Ereignis auf. Diese Methode nutzt dazu die 
            Post-Methode des verwendeten AsyncOperation-Objekts, die dafür sorgt,
            dass das Ereignis im richtigen Thread aufgerufen wird. Die Zuweisung
            dieses Delegates erfolgt im Konstruktor der Klasse.
            </summary>
        </member>
        <member name="F:Accon.AGLink.Rfc1006Connection._AsyncConnectAbortedHandler">
            <summary>
            Über diesen Delegate ruft die Arbeitsmethode (Reconnect) das
            AsyncConnected-Ereignis auf. Diese Methode nutzt dazu die 
            Post-Methode des verwendeten AsyncOperation-Objekts, die dafür sorgt,
            dass das Ereignis im richtigen Thread aufgerufen wird. Die Zuweisung
            dieses Delegates erfolgt im Konstruktor der Klasse.
            </summary>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.Connect">
            <summary>
            Baut eine Verbindung bis zum AG auf.
            </summary>
            <returns>Bei synchroner Verwendung Ergebnisflag, sonst Aussagelos</returns>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.Disconnect">
            <summary>
            Baut eine bestehende Verbindung ab.
            </summary>
            <returns>true, falls Verbindungsabbau geklappt hat, sonst false</returns>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.StopReconnection">
            <summary>
            Setzt das Abbruch-Flag der asynchronen Verbindungsaufbaumethode und wartet, bis diese beendet wurde. (Blockiert das Programm)
            </summary>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.EmergencyDisconnect(Accon.AGLink.ConnectionErrorDO)">
            <summary>
            Baut eine bestehende Verbindung ab, und informiert alle anderen Verbindungen über einen Fehler.
            </summary>
            <param name="connerrordetails">Fehlerinformationen</param>
            <returns>true, falls Verbindungsabbau geklappt hat, sonst false</returns>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.StartReconnect">
            <summary>
            Startet eine asynchrone Schleife, die versucht die Verbindung wiederherzustellen.
            </summary>
            <returns>true, falls Erfolgreich gestartet, sonst false</returns>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.ConnectSynchron">
            <summary>
            Baut eine Verbindung bis zur SPS auf.
            
            Die einzige Funktion die den tatsächlichen Aufbau durchführt!
            </summary>
            <returns>true, falls Verbindungsaufbau geklappt hat, sonst false</returns>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.ConnectAsynchron">
            <summary>
            Startet einene asynchronen Verbindungsaufbau zur parametrierten Steuerung
            </summary>
            <returns>Immer true</returns>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.DisconnectSynchron(System.Boolean)">
            <summary>
            Baut eine bestehende Verbindung ab.
            
            Einzige Funktion die tatsächlich die Verbindung abbaut!
            </summary>
            <param name="fireEvent">true = Verbindungsabbauevent auslösen, false = kein Event auslösen</param>
            <returns>true, falls Verbindungsabbau geklappt hat, sonst false</returns>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.DisconnectAsynchron">
            <summary>
            Startet einene asynchronen Verbindungsabbau an.
            </summary>
            <returns>Imemr true</returns>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.Connect(System.ComponentModel.AsyncOperation)">
            <summary>
            Baut eine Verbindung zur Parametrierten Steuerung asynchron auf.
            </summary>
            <param name="async">Object zur Benachrichtung des Haupthreads über den Funktionsstatus</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.Disconnect(System.ComponentModel.AsyncOperation)">
            <summary>
            Baut eine bestehende Verbindung wieder ab.
            </summary>
            <param name="async">Objeckt zur Benachrichtung des Hauptzhreas über den Funktionsstatus</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.Reconnect(System.ComponentModel.AsyncOperation)">
            <summary>
            Versucht die Verbindung eine Verbindung neu aufzubauene.
            </summary>
            <param name="async">Objeckt zur Benachrichtung des Hauptthreads über den Funktionsstatus</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.AsyncConnectionFailedCaller(System.Object)">
            <summary>
            Diese Methode wird über die Delegate-Referenz _AsyncConnectionErrorHandler aufgerufen
            </summary>
            <param name="state">Ein Objekt, mit den Daten, die an diese Methode übergeben werden sollen</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.AsyncConnectedCaller(System.Object)">
            <summary>
            Diese Methode wird über die Delegate-Referenz _AsyncConnectedHandler aufgerufen
            </summary>
            <param name="state">Ein Objekt, mit den Daten, die an diese Methode übergeben werden sollen</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.AsyncDisconnectedCaller(System.Object)">
            <summary>
            Diese Methode wird über die Delegate-Referenz _AsyncDisconnectedHandler aufgerufen
            </summary>
            <param name="state">Ein Objekt, mit den Daten, die an diese Methode übergeben werden sollen</param>
        </member>
        <member name="M:Accon.AGLink.Rfc1006Connection.AsyncConnectAbortedCaller(System.Object)">
            <summary>
            Diese Methode wird über die Delegate-Referenz _AsyncConnectAbortedErrorHandler aufgerufen
            </summary>
            <param name="state">Ein Objekt, mit den Daten, die an diese Methode übergeben werden sollen</param>
        </member>
        <member name="P:Accon.AGLink.Rfc1006Connection.Connectionstate">
            <summary>
            Gibt oder setzt den Aktuellen Verbindungsstatus
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006Connection.IsBusy">
            <summary>
            Gibt aoverride n, ob die asynchrone Methode gerade beschäftigt ist
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006Connection.ConnNr">
            <summary>
            Gibt das Verbindungshandle zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006Connection.DevNr">
            <summary>
            Setzt oder gibt die Gerätenummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006Connection.PlcNr">
            <summary>
            Setzt oder gibt die SPS-Nummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006Connection.RackNr">
            <summary>
            Setzt oder gibt die Rack-Nummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006Connection.SlotNr">
            <summary>
            Setzt oder gibt die Slot-Nummer zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006Connection.Timeout">
            <summary>
            Setzt oder gibt den Funktions-Timeout zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006Connection.ReconnectTimeout">
            <summary>
            Setzt oder gibt den Verbindugnstimeout zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006Connection.ReconnectRetries">
            <summary>
            Gibt oder setzt die Anzahl Versuche, um eine Verbindung widerherzustellen
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006Connection.AutoDisconnect">
            <summary>
            Setzt oder gibt an ob bei einem Verbindungsfehler, automatisch die Verbindung abgebaut werden soll
            </summary>
        </member>
        <member name="P:Accon.AGLink.Rfc1006Connection.AutoReconnect">
            <summary>
            Setzt oder gibt an, ob bei einem Verbindungsfehler, automatisch versucht werden soll, die Verbindung wieder aufzubauen
            </summary>
        </member>
        <member name="T:Accon.AGLink.Rfc1006Connection.InternalCallHandler">
            <summary>
            Delegate für den asynchronen Aufruf der Reconnect-Methode
            </summary>
        </member>
        <member name="F:Accon.AGLink.Rfc1006Flags.ConnectActive">
            <summary>
            Aktiver Verbindungsaufbau (Client)
            </summary>
        </member>
        <member name="F:Accon.AGLink.Rfc1006Flags.ConnectPassive">
            <summary>
            Passiver Verbindungsaufbau (Server)
            </summary>
        </member>
        <member name="F:Accon.AGLink.Rfc1006Flags.PortSpecial">
            <summary>
            Spezielle Portnummer verwenden
            </summary>
        </member>
        <member name="F:Accon.AGLink.Rfc1006Flags.OwnAddrSpecial">
            <summary>
            Eigene IP-Adresse angeben (z. B. bei mehreren Netzwerkkarten im PC)
            </summary>
        </member>
        <member name="F:Accon.AGLink.Rfc1006Flags.OwnPortSpecial">
            <summary>
            Eigene Portnummer angeben
            </summary>
        </member>
        <member name="F:Accon.AGLink.Rfc1006Flags.RFC1006OnlyOne">
            <summary>
            Nur eine Verbindung mit gleicher IP-Adresse, LTSAP und RTSAP zulässig
            </summary>
        </member>
        <member name="F:Accon.AGLink.Rfc1006Flags.RFC1006RejectNew">
            <summary>
            Bei Gleichheit die neue Verbindung abweisen, ansonsten die alte Verbindung löschen
            </summary>
        </member>
        <member name="T:Accon.AGLink.State">
            <summary>
            Possible state of the connection
            </summary>
        </member>
        <member name="F:Accon.AGLink.State.eNotInit">
            <summary>
            Not connected
            </summary>
        </member>
        <member name="F:Accon.AGLink.State.eDevOpened">
            <summary>
            Device openend
            </summary>
        </member>
        <member name="F:Accon.AGLink.State.eDialedUp">
            <summary>
            Connected to modem
            </summary>
        </member>
        <member name="F:Accon.AGLink.State.eInitAdapter">
            <summary>
            Connected to a adapter
            </summary>
        </member>
        <member name="F:Accon.AGLink.State.eConnected">
            <summary>
            Connected to the plc
            </summary>
        </member>
        <member name="T:Accon.Symbolik.AGL4Sym">
            <summary>
            Diese Klasse stellt die notwendigen Funktionen, Strukturen und Konstanten
            der AGLink40.dll zur Verfügung.
            Alle notwendigen Elemente sind statisch deklariert und sind ohne eine Instanz
            zu verwenden. Eine weitere Ableitung ist ebenfalls nicht erlaubt (Schlüsselwort sealed).
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLDBSYM_FORMAT_DATEANDTIME">
            <summary>
            Datentyp DATE_AND_TIME in einem DB, Groesse 8 Bytes
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLDBSYM_FORMAT_STRING">
            <summary>
            Datentyp STRING in einem DB, die Groesse ist variabel
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLDBSYM_FORMAT_POINTER">
            <summary>
            Datentyp POINTER in einem DB, Groesse 6 Bytes
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLDBSYM_FORMAT_ANY">
            <summary>
            Datentyp ANY in einem DB, Groesse 10 Bytes
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGL_VALUEFMT_DEC">
            <summary>
            Dezimalwert mit Vorzeichen (bei BOOL/BYTE/WORD/DWORD)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGL_VALUEFMT_BIN">
            <summary>
            Binärwert in der Form "2#..." (bei BOOL/BYTE/WORD/DWORD)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGL_VALUEFMT_HEX">
            <summary>
            Hexadezimalwert in der Form "B#16#...", "W#16#...", "DW#16#..." (bei BYTE/WORD/DWORD)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGL_VALUEFMT_CHAR">
            <summary>
            1, 2 oder 4 Zeichen (bei BYTE/WORD/DWORD)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGL_VALUEFMT_BOOL">
            <summary>
            Wahrheitswert TRUE bzw. FALSE (bei BOOL)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGL_VALUEFMT_S5TIME">
            <summary>
            Wert als SIMATIC-ZEIT in der Form "S5T#..." (bei WORD)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGL_VALUEFMT_COUNTER">
            <summary>
            Wert als SIMATIC-ZÄHLWERT in der Form "C#...", 3-stellig, BCD-kodiert (bei WORD)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGL_VALUEFMT_DATE">
            <summary>
            Wert als Datum in der Form "D#..." in Tage seit 1.1.1990 (bei WORD)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGL_VALUEFMT_REAL">
            <summary>
            Gleitkommawert (bei DWORD)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGL_VALUEFMT_TIME">
            <summary>
            Wert als IEC-ZEIT in der Form "T#...", vorzeichenbehaftet in Millisekunden (bei DWORD)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGL_VALUEFMT_TIMEOFDAY">
            <summary>
            Wert als TAGESZEIT in der Form "TOD#...", in Millisekunden seit Mitternacht (bei DWORD)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGL_VALUEFMT_POINTER">
            <summary>
            Wert als ZEIGER in der Form "P#..." (bei DWORD)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.ERROR_CLASS_SYMBOLIK">
            <summary>
            Fehlerklasse für Symbolikfehler
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_SUCCESS">
            <summary>
            Funktion erfolgreich abgeschlossen, kein Fehler aufgetreten
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_FUNC_NOT_ALLOWED">
            <summary>
            Funktion wird nicht erlaubt
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_INVALID_HANDLE">
            <summary>
            Ungueltiger Projekt-Handle
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_OPEN_FAILURE_PRJ">
            <summary>
            Fehler beim Oeffnen eines Projekts
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_OPEN_FAILURE_PRG">
            <summary>
            Fehler beim Erzeugen der Programminstanz eines Projekts
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_CLOSE_FAILURE">
            <summary>
            Fehler beim Schliessen eines Projekts
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_NO_PROGRAM">
            <summary>
            Kein bzw. kein weiteres Programm gefunden
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_PROGRAM_NOTFOUND">
            <summary>
            Angegebenes Programm nicht gefunden
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_PARA_ERR">
            <summary>
            Einer der Parameter nicht im gueltigen Bereich
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_EXPIRED">
            <summary>
            Funktionsumfang bzw. Laufzeit ist abgelaufen (Demo-Version)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_INVALID_DATA">
            <summary>
            Keine bzw. ungueltige Daten angegeben 
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_NO_SYMBOLTABLE">
            <summary>
            Das ausgewaehlte Programm enthaelt keine Symboltabelle
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_SYMBOLTABLE_OPEN">
            <summary>
            Symboltabelle bereits geoeffnet
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_NO_SYMBOL">
            <summary>
            Keinen bzw. keinen weiteren Symbolikeintrag gefunden
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_SYMBOL_READ_ERROR">
            <summary>
            Fehler beim Lesen eines Symbolikdatensatzes
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_SYMBOL_NOT_FOUND">
            <summary>
            Symbol nicht gefunden
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_OPERAND_NOT_FOUND">
            <summary>
            Absolutoperand nicht gefunden
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_SYMBOL_INVALID">
            <summary>
            Symbol ungueltig
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_OPERAND_INVALID">
            <summary>
            Absolutoperand ungueltig
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_INVALID_FILTER">
            <summary>
            Filterstring ungueltig
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_NO_DB">
            <summary>
            Der angegebene DB ist nicht vorhanden
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_READ_DB_FAILURE">
            <summary>
            Fehler beim Lesen der Bausteindaten des DBs
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_PARSE_DB_FAILURE">
            <summary>
            Fehler beim Umsetzen der Bausteindaten des DBs
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_SYMBOLDB_OPEN">
            <summary>
            Es ist bereits ein DB zur Komponentensuche geoeffnet
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_NO_SYMBOLDB">
            <summary>
            Es ist noch kein DB zur Komponentensuche geoeffnet
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_NO_DBSYMBOL">
            <summary>
            Keine bzw. keine weitere Komponente vorhanden
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_DBSYMBOL_NOT_FOUND">
            <summary>
            DB-Komponente nicht gefunden
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_DBSYMBOL_INVALID">
            <summary>
            DB-Komponente ungueltig
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_DBSYMBOL_NOT_MATCH">
            <summary>
            DB-Komponente passt nicht
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_CONSTANT_INVALID">
            <summary>
            Konstantenangabe ungueltig
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_CONSTANT_FMT_INVALID">
            <summary>
            Konstantengroesse bzw. -formatierung ungueltig
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_INTERNAL_INIT_FAILED">
            <summary>
            Initialisierung der Objekttypen fehlgeschlagen
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_LANGUAGE_SIMATIC">
            <summary>
            SIMATIC / deutsch (Voreinstellung)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_LANGUAGE_IEC">
            <summary>
            IEC / englisch
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_ALARM_TEXT_LEN">
            <summary>
            Maximale Länge des Alarmtextes
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_ALARM_ADDTEXT_NUM">
            <summary>
            Max. Anzahl an Zusatztexten
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_ALARM_NAME_LEN">
            <summary>
            Max. Länge des Namens
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_ALARM_SIGNAL_NUM">
            <summary>
            Max. Anzahl Signale 
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.AGLSYM_ALARM_ADDVALUE_NUM">
            <summary>
            Max. Anzahl Begleitwerte für SCAN-Meldungen
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.m_AGLink40_Sym_dll_Found">
            <summary>
            Flag ob die Datei AGLink40_Sym.dll gefunden wurde.
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym._Native">
            <summary>
            Schnittstelle zu den Nativen Funktionen, um x86 und x64 gleichermaßen unterstützen zu können
            </summary>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.#cctor">
            <summary>
            Der Konstruktor prüft, ob die Datei AGLink40_Sym.dll gefunden werden kann und setzt den Member m_AGLink40_Sym_dll_Found entsprechend dem Ergebnis.
            </summary>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetHandle(System.Int32)">
            <summary>
            Ermittelt 64 Bit Handles aus 32 Bit Wert
            </summary>
            <param name="PrjHandle">Projekthandle</param>
            <returns></returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.ClearHandle(System.Int32)">
            <summary>
            Tabelleneintrag löschen 
            </summary>
            <param name="PrjHandle">Projekthandle</param>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.AddHandle(System.IntPtr)">
            <summary>
            Tabelleneintrag hinzufügen
            </summary>
            <param name="PrjHandle">Projekthandle</param>
            <returns></returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.OpenProject(System.String,System.Int32@)">
            <summary>
            This function opens the specified STEP®7 project. Several STEP®7 projects can be opened. 
            A parallel access to several projects is possible. 
            </summary>
            <param name="Project">Complete path name of the STEP® 7 project file (e.g. C:\Programme\Siemens\Step7\S7Proj\S7Projekt1\S7Proj1.s7p)</param>
            <param name="PrjHandle">Variable for project handle </param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.CloseProject(System.Int32)">
            <summary>
            This function closes the specified STEP®7 project.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.WriteCpuListToFile(System.String)">
            <summary>
            This function writes the list of supported plc types to file.
            </summary>
            <param name="fileName">Full path to text file</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetProgramCount(System.Int32,System.Int32@)">
            <summary>
            Diese Funktion ermittelt die Anzahl der S7-Programme im angegebenen STEP®7-Projekt.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="ProgCount">Variable for the number of S7 programs</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindFirstProgram(System.Int32,System.String@)">
            <summary>
            This function is the starting function to list the S7 programs in the specified STEP®7 project. You will 
            get the complete path name of the first S7 program within the project. To continue the list you have to call 
            the appropriate continuation function AGLSym_FindNextProgram. The list ends if this starting function or the 
            appropriate continuation function return an error number (&lt;0). In both cases the appropriate finalization 
            function FindCloseProgram has to be called. A new list can only be started within the STEP®7 project after the finalization function has been called.
            </summary>
            <param name="PrjHandle">Projekthandle</param>
            <param name="Program">Variable für den vollständigen Namenspfad des S7-Programms; muss Platz für mindestens AGLSYM_PROG_LEN (128) Zeichen enthalten</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindNextProgram(System.Int32,System.String@)">
            <summary>
            This function is the continuation function of FindFirstProgram. You will get the complete path name of the 
            next S7 program within the project. The list ends when the function returns an error number (&lt;0). In this case you have to call 
            the appropriate finalization function FindCloseProgram. A new list can only be started within the STEP®7 project after 
            the finalization function has been called.
            </summary>
            <param name="PrjHandle">Projekthandle</param>
            <param name="Program">Variable für den vollständigen Namenspfad des S7-Programms; muss Platz für mindestens AGLSYM_PROG_LEN (128) Zeichen enthalten</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindCloseProgram(System.Int32)">
            <summary>
            This function is the finalization function of FindFirstProgram or 
            FindNextProgram. After calling this function, you can start a new listing by calling FindFirstProgram.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.SelectProgram(System.Int32,System.String)">
            <summary>
            This function selects the S7 program to be used by all subsequent accessfunctions to symbols of the symbol table or DB symbols. 
            All list functions for symbols of the symbol table and for DB symbols will be finalized.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="Program">Complete path name of the S7 program</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.SetLanguage(System.Int32)">
            <summary>
            This function sets the operand language for the subsequent callings.
            The parameter »language« can have the values AGLSYM_LANGUAGE_SIMATIC or AGLSYM_LANGUAGE_IEC. 
            With AGLSYM_LANGUAGE_SIMATIC you will get german mnemonics (e.g. E1.1, A4.0) for the absolute operands of 
            symbols or DB symbols. With AGLSYM_LANGUAGE_IEC you will get english mnemonics (e.g. I1.1, Q4.0) for the absolute operands. 
            The default operand language is AGLSYM_LANGUAGE_SIMATIC.
            </summary>
            <param name="Language">Operand language</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetSymbolCount(System.Int32,System.Int32@)">
            <summary>
            This function determines the number of symbols in the symbol table.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="SymCount">Variable für die Anzahl der Symbole in der Symboltabelle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindFirstSymbol(System.Int32,System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            This function is the start function to list symbols of the symbol table, providing data for the first symbol in the symbol table.
            To continue the list you have to call the continuation function FindNextSymbol. 
            The list ends when the start function or the continuation function returns an error number 
            (&lt;0). In both cases you have to call the respective finalization function FindCloseSymbol. A new list can 
            only be started after the respective finalization function has been called.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AbsOpd">Variable for the absolute operand to symbol, must have space for at least AGLSYM_ABSOP_LEN (40) characters</param>
            <param name="Symbol">Variable for symbol, must have space for at least AGLSYM_SYMB_LEN (256) characters</param>
            <param name="Comment">Variable for the comment to symbol, must have space for at least AGLSYM_COMMENT_LEN (84) characters</param>
            <param name="Format">Variable for encoding the format, see AGLSYM_...</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindNextSymbol(System.Int32,System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            This function is the continuation function of FindFirstSymbol, providing the data for the next symbol in the symbol table. 
            The list ends when this function returns an error number (&lt;0). In this case you have to call the respective 
            finalization function FindCloseSymbol. A new list can only be started after the respective finalization function has been called.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AbsOpd">Variable for the absolute operand to symbol, must have space for at least AGLSYM_ABSOP_LEN (40) characters</param>
            <param name="Symbol">Variable for symbol, must have space for at least AGLSYM_SYMB_LEN (256) characters</param>
            <param name="Comment">Variable for the comment to symbol, must have space for at least AGLSYM_COMMENT_LEN (84) characters</param>
            <param name="Format">Variable for encoding the format, see constants AGLSYM_...</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindCloseSymbol(System.Int32)">
            <summary>
            This function is the finalization function to FindFirstSymbol or FindNextSymbol. 
            After calling this function, the function FindFirstSymbol can be used again.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetSymbolCountFilter(System.Int32,System.Int32@,System.String)">
            <summary>
            This function determines the number of symbols in the symbol table considering the specified filter condition.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="SymCount">Variable for the number of symbols in the symbol table considering the specified filter condition</param>
            <param name="Filter">Filter condition in text form</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Accon.Symbolik.AGL4Sym.FindFirstSymbolFilter(System.Int32,System.String@,System.String@,System.String@,System.Int32@,System.String)" -->
        <member name="M:Accon.Symbolik.AGL4Sym.ReadPrjDBCount(System.Int32,System.Int32@)">
            <summary>
            This function determines the number of data blocks in the S7 program.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="DBCount">Variable for the number of data blocks in the S7 program</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.ReadPrjDBList(System.Int32,System.UInt16[]@,System.Int32)">
            <summary>
            This function gets the list of data blocks of the S7 program
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="DBList">Memory for the list of data blocks </param>
            <param name="DBCount">Memory size of the above specified list (amount of data blocks)</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Accon.Symbolik.AGL4Sym.ReadPrjDBCountFilter(System.Int32,System.Int32@,System.String)" -->
        <member name="M:Accon.Symbolik.AGL4Sym.ReadPrjDBListFilter(System.Int32,System.UInt16[]@,System.Int32,System.String)">
            <summary>
            This function gets the list of data blocks in the S7 program considering the specified filter condition.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="DBList">Memory for the list of data blocks</param>
            <param name="DBCount">Memory size of the above specified list (amount of data blocks)</param>
            <param name="Filter">Filter condition in text form</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetDbSymbolCount(System.Int32,System.Int32,System.Int32@)">
            <summary>
            This function determines the number of DB symbols in the specified data block of the S7 program.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="DBNr">DB number</param>
            <param name="DBSymCount">Variable for the number of DB symbols in the data block</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindFirstDbSymbol(System.Int32,System.Int32,System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            This function is the start function to list DB symbols, providing data for the first DB symbol in the block. 
            To continue the list you have to call the respective continuation function FindNextDbSymbol. The list ends if the start function or 
            the respective continuation function return an error number (&lt;0). In both cases you have to call the respective 
            finalization function FindCloseDbSymbol.  A new list can only be started after the respective finalization function has been called.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="DBNr">DB number</param>
            <param name="AbsOpd">Variable for the absolute operand to symbol, must have space for at least AGLSYM_ABSOP_LEN (40) characters</param>
            <param name="Symbol">Variable for symbol, must have space for at least AGLSYM_SYMB_LEN (256) characters</param>
            <param name="Comment">Variable for the comment to symbol, must have space for at least AGLSYM_COMMENT_LEN (84) characters</param>
            <param name="Format">Variable for encoding the format, see constants AGLSYM_...</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindNextDbSymbol(System.Int32,System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            This function is the continuation function of FindFirstDbSymbol, providing data for the next DB symbol in the DB. 
            The list ends if this function returns an error number. In this case you have to call the respective finalization function 
            FindCloseDbSymbol. A new list can only be started after the respective finalization function has been called.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AbsOpd">Variable für den Absolutoperanden zum Symbol; muss Platz für mindestens AGLSYM_ABSOP_LEN (40) Zeichen enthalten</param>
            <param name="Symbol">Variable for symbol, must have space for at least AGLSYM_SYMB_LEN (256) characters</param>
            <param name="Comment">Variable for the comment to symbol, must have space for at least AGLSYM_COMMENT_LEN (84) characters </param>
            <param name="Format">Variable for encoding the format, see constants AGLSYM_...</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindCloseDbSymbol(System.Int32)">
            <summary>
            This function is the finalization function of FindFirstDbSymbol or FindNextDbSymbol. 
            After calling this function you can use the function FindFirstDbSymbol again
            </summary>
            <param name="PrjHandle">Project handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetDbSymbolCountFilter(System.Int32,System.Int32,System.Int32@,System.String)">
            <summary>
            This function determines the number of DB symbols in the specified data block of the S7 program considering the specified filter condition.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="DBNr">DB number</param>
            <param name="DBSymCount">Variable for the number of DB symbols in the data block</param>
            <param name="Filter">Filter condition in text form</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindFirstDbSymbolFilter(System.Int32,System.Int32,System.String@,System.String@,System.String@,System.Int32@,System.String)">
            <summary>
            This function is the start function to list DB symbols providing data for the first DB symbol in the block considering the 
            specified filter condition. To continue the listing you have to call the respective continuation function FindNextDbSymbol. 
            The list ends if this start function or the respective continuation function return an error number (&lt;0). In both cases you have to call 
            the respective finalization function FindCloseDbSymbol. A new list can only be started after the respective finalization function has been called.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="DBNr">DB number</param>
            <param name="AbsOpd">Variable for the absolute operand to symbol, must have space for at least AGLSYM_ABSOP_LEN (40) characters </param>
            <param name="Symbol">Variable for symbol, must have space for at least AGLSYM_SYMB_LEN (256) characters</param>
            <param name="Comment">Variable for the comment to symbol, must have space for at least AGLSYM_COMMENT_LEN (84) characters </param>
            <param name="Format">Variable for encoding the format, look for constant AGLSYM_...</param>
            <param name="Filter">Filter condition in text form</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindFirstDbSymbolEx(System.Int32,System.Int32,Accon.Symbolik.AGL4Sym.DATA_DBSYM40@,System.String)">
            <summary>
            This function is the start function to list DB symbols. It provides data for the first DB symbol in the DB considering the 
            specified filtering conditions. To continue the list you have to call the respective continuation function FindNextDbSymbolEx. 
            The list ends if this starting function or the respective continuation function return an error number (&lt;0). In both cases you have to call 
            the respective finalization function FindCloseDbSymbol.  A new list can only be started after the respective finalization function has been called.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="DBNr">DB number</param>
            <param name="Buff">Structure for the data of the DB symbol</param>
            <param name="Filter">Filter condition in text form</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindNextDbSymbolEx(System.Int32,Accon.Symbolik.AGL4Sym.DATA_DBSYM40@)">
            <summary>
            This function is the continuation function of FindFirstDbSymbolEx. It provides data for the next DB symbol in the DB. 
            The list ends if this function returns an error number (&lt;0). In this case you have to call the respective finalization 
            function FindCloseDbSymbol. A new list can only be started after the respective finalization function has been called.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="Buff">Structure for the data of the DB symbol</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetDbSymbolExComment(System.Int32,System.String@)">
            <summary>
            This function provides the compound comment for the DB symbol listed recently.
            This function is intended to be called after successfully calling one of the following functions :
            AGLSym_FindFirstDbSymbol, AGLSym_FindNextDbSymbol, AGLSym_FindFirstDbSymbolFilter, AGLSym_FindFirstDbSymbolEx und AGLSym_FindNextDbSymbolEx.
            The combined comment consists of the comment for each structure level of the respective DB symbol, separated by a tab character.
            The separation by a tab character allows to isolate comments of single structure levels if necessary.
            The combined comment strictly follows the structure hierarchy of the DB in question, i.e. if one or more structure levels don't have a comment, the combined comment accordingly contains subsequent tabulator characters.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="ExComment">Variable for the compound comment to DB symbol</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetSymbolFromText(System.Int32,System.String,System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            This function determines the corresponding symbolic operands from an operand specified as text. 
            The text can have an operand in absolute form (e.g. DB10.DBW20 or MB6) or in symbolic form (e. g. "working data".FacilityOn or "Door Contact"). 
            This function is also suitable for processing user input as e.  g. case sensitivity is not of importance. 
            You have to quote names from the symbol table. The text will be checked if there is even a valid operand.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="Text">Operand in absolute or symbolic form</param>
            <param name="AbsOpd">Variable for absolute operands to symbol, must have space for at least AGLSYM_ABSOP_LEN (40) characters</param>
            <param name="Symbol">Variable for the symbol, must have space for at least AGLSYM_SYMB_LEN (256) characters</param>
            <param name="Comment">Variable for the symbol comment, must have space for at least AGLSYM_COMMENT_LEN (84) characters</param>
            <param name="Format">Variable for format encoding, look for constants AGLSYM_...</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetReadMixFromText(System.Int32,System.String,Accon.AGLink.AGL4.DATA_RW40@,System.Int32@)">
            <summary>
            This function gets the corresponding operand data from an operand specified as text. The text can 
            have an operand in absolute form (e.g. DB10.DBW20 or MB6) or in symbolic form (e.g. "working data".FacilityOn or "Door Contact"). 
            This function is also suitable for processing user input as e.g. case sensitivity is not of importance. You have to quote names from 
            the symbol table. The text will be checked if there is even a valid operand.
            The determined operand data will be put into a structure of type DATA_RW40, as it is used by the functions ReadMix and WriteMix.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="Text">Operand in absolute or symbolic form</param>
            <param name="Buff">DATA_RW40 structure containing data for operand description</param>
            <param name="Format">Variable for format encoding, look for constants AGLSYM_...</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Accon.Symbolik.AGL4Sym.GetReadMixFromTextEx(System.Int32,System.String,System.String@,Accon.AGLink.AGL4.DATA_RW40@,System.Int32@)" -->
        <member name="M:Accon.Symbolik.AGL4Sym.GetSymbolFromTextEx(System.Int32,System.String,Accon.Symbolik.AGL4Sym.DATA_DBSYM40@)">
            <summary>
            This function gets the corresponding symbol or DB symbol data from an operand specified as text. 
            The text can have an operand in absolute form (e.g. DB10.DBW20 or MB6) or in symbolic form (e.g. "working data".FacilityOn or "Door Contact"). 
            This function is also suitable for processing user input, as e.g. case sensitivity is not of importance. You have to quote names from the symbol table. 
            The text will be checked if there is even a valid operand.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="Text">Operand in absolute or symbolic form</param>
            <param name="Buff">DATA_RW40 structure containing data for operand description</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetSymbol(System.Int32,Accon.AGLink.AGL4.DATA_RW40,System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            This function gets the corresponding operand data in text form (absolute operand, symbol respectively 
            DB symbol, symbol comment or DB symbol comment) from an operand description in a DATA_RW40 structure.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="Buff">DATA_RW40 structure containing the operand description</param>
            <param name="AbsOpd">Variable for the formatted representation of the absolute operand, must have space for at least AGLSYM_ABSOP_LEN (40) characters</param>
            <param name="Symbol">Variable for the symbol, must have space for at least AGLSYM_SYMB_LEN (256) characters</param>
            <param name="Comment">Variable for the symbol comment, must have space for at least AGLSYM_COMMENT_LEN (84) characters</param>
            <param name="Format">Variable for format encoding, see constants AGLSYM_...</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetSymbolEx(System.Int32,Accon.AGLink.AGL4.DATA_RW40,Accon.Symbolik.AGL4Sym.DATA_DBSYM40@)">
            <summary>
            This function gets the related operand data from an operand description in a DATA_RW40 structure. 
            The function is similar to the function GetSymbol, but writes the operand data into a DATA_DBSYM40 structure.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="Buff">DATA_RW40 structure containing operand description</param>
            <param name="Symbol">Structure for the resulting data</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetTextFromValue(System.Object,System.Int32,System.Int32,System.String@)">
            <summary>
            This function converts the handed over value into text in the desired data format.
            </summary>
            <param name="Value">Pointer to the value</param>
            <param name="Format">Encoding of the format; see constants AGLSYM_...</param>
            <param name="ValueFmt">Desired output format; see constants AGL_VALUEFMT_...</param>
            <param name="Text">Pointer to text-buffer</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetTextFromReal(System.Single,System.String@)">
            <summary>
            This function converts a given value into text using the floating point format.
            </summary>
            <param name="Value">Pointer to value</param>
            <param name="Text">Pointer to text buffer</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetValueFromText(System.String,System.Object@,System.Int32,System.Int32)">
            <summary>
            This function converts the given text in order to determine its value and the operand size and format.
            </summary>
            <param name="Text">Pointer to text buffer</param>
            <param name="Value">Pointer to value</param>
            <param name="Format">Encoding format; see constants AGLSYM_...</param>
            <param name="ValueFmt">Desired output format; see constants AGL_VALUEFMT_...</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetRealFromText(System.String,System.Single@)">
            <summary>
            This function converts the given text into a floating point value.
            </summary>
            <param name="Text">Pointer to text buffer</param>
            <param name="Value">Pointer to value</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.OpenAlarms(System.Int32)">
            <summary>
            Tis function opens the message configuration. 
            It can be opened with multiple STEP ® 7 projects at the same time.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.CloseAlarms(System.Int32)">
            <summary>
            This function closes the message configuration. It will also close, when the project 
            is closed by CloseProject or an S7 program is selected using SelectProgram.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindFirstAlarmData(System.Int32,System.Int32@)">
            <summary>
            This function is the start function to list the messages in the selected S7 program in the specified STEP ® 7 project 
            providing the message number for the first configured message. To continue the list you have to call the respective 
            continuation function FindNextAlarmData. The list ends, if the start function or the respective continua-tion 
            function return an error number (&lt;0). In both cases you have to call the respective finalization function 
            FindCloseAlarmData. A new list can only be started after the respective finalization function has been called.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Variable for the message number of the message</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindNextAlarmData(System.Int32,System.Int32@)">
            <summary>
            This function is the continuation function to the function AGLSym_FindFirstAlarmData providing the message 
            number for the next configured message. The list ends, if this function returns an error number (&lt;0). In this case you have 
            to call the respective finalization function FindCloseAlarmData. A new list can only be started after the respective finalization function has been called.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Variable for the mesage number of the mesage</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindCloseAlarmData(System.Int32)">
            <summary>
            This function is the finalization function to FindFirstAlarmData or FindNextAlarmData. 
            A new list can only be started after this finalization function has been called.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmName(System.Int32,System.Int32,System.String@)">
            <summary>
            This function returns the text of the message identifier for the specified message number. 
            This message identifier is assigned while configurating with STEP ® 7 and is independent of 
            the setting of the message language. In case of symbol-related messages, it will match to the corresponding symbol. 
            Elsewise for block-related messagess it will match to the name of the actual operand in the based block which is marked 
            with the necessary system attributes.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Message number</param>
            <param name="Name">Pointer for the text</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmType(System.Int32,System.Int32,System.String@)">
            <summary>
            This function returns the text of the message type for the specified message number. 
            This message type is assigned while configurating with STEP ® 7 and is independent of the 
            setting of the message language. In case of symbol-related messages the message type is «SCAN». 
            For block-related messages the message type will give the name of the underlying message block, e.g. alarm, alarm_8, alarm_8p, 
            alarm_s, ar_send, notify, notify_8p.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Message number</param>
            <param name="Type">Variable for text</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmBaseName(System.Int32,System.Int32,System.String@)">
            <summary>
            
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Message number</param>
            <param name="Name"></param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmTypeName(System.Int32,System.Int32,System.String@)">
            <summary>
            
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Message number</param>
            <param name="Name"></param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmSignalCount(System.Int32,System.Int32,System.Int32@)">
            <summary>
            This function counts the number of known signals (sub-sections) for the specified message number. 
            This function always returns the value 1 for symbol-related messages. For block-related messages, 
            this function returns the number of processed digital signals in the underlying message block. Possible values are in the range 1 .. 8. 
            All the following functions, receiving a signal number as parameter, will accept a value from 1 up to the number of signals.
            </summary>
            <param name="PrjHandle">Projekthandle</param>
            <param name="AlmNr">Message number</param>
            <param name="SignalCount">Variable for the signal number. Contains the signal number between 1..8 after the call.</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmMsgClass(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            This function determines the attribute message class of the message for the given alarm- and signal-number.
            </summary>
            <param name="PrjHandle">Projekthandle</param>
            <param name="AlmNr">Message number</param>
            <param name="Signal">Signal number</param>
            <param name="MsgClass">Variable for the message attribute message-class. Contains values in the range 0..16 after the call</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmPriority(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            This function determines the attribute priority of the message for the given alarm- and signal-number.
            </summary>
            <param name="PrjHandle">Projekthandle</param>
            <param name="AlmNr">Message number</param>
            <param name="Signal">Signal number</param>
            <param name="Priority">Variable message attribute priority. Contains the attribute value in the range of 0..16 after the call</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmAckGroup(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            This function determines the message attribute acknowledge group of the message for the specified alarm- and signal-number.
            </summary>
            <param name="PrjHandle">Projekthandle</param>
            <param name="AlmNr">Message number</param>
            <param name="Signal">Signal number</param>
            <param name="AckGroup">Variable for attribute acknowledge group. Contains the attribute value in the range of 0 ..16</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmAcknowledge(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            This function determines the attribute acknowledge required of the message for the specified alarm- and signal-number.
            </summary>
            <param name="PrjHandle">Projekthandle</param>
            <param name="AlmNr">Message number</param>
            <param name="Signal">Signal number</param>
            <param name="Acknowledge">Variable for attribute acknowledge required. Contains the value 1 after the call, if the message should be acknowledged, otherwise the value 0.</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmProtocol(System.Int32,System.Int32,System.Int32@)">
            <summary>
            This function determines the message logging attribute for the specified message number. The message logging attribute determines whether a message should be logged.
            </summary>
            <param name="PrjHandle">Projekthandle</param>
            <param name="AlmNr">Message number</param>
            <param name="Protocol">Variable for the message logging attribute. Contains the value 1 after the call if the message should be logged, otherwise the value 0.</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmDispGroup(System.Int32,System.Int32,System.Int32@)">
            <summary>
            This function gets the message attribute display-class for the specified message number. This  attribute can be used to group messages.
            </summary>
            <param name="PrjHandle">Projekthandle</param>
            <param name="AlmNr">Message number</param>
            <param name="DispGroup">Variable for the message attribute display-class. Contains the attribute value in the range 0..16 after the call.</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindFirstAlarmTextLanguage(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            This function is the start function to enumerate the message languages in the specified STEP ® 7 project, 
            providing the Windows country code for the first configured message language. The function further determines 
            whether this is the current default language in the project. To continue the list you have to call the respective 
            continuation function FindNextAlarmTextLanguage. The list ends, if this start function or the respective continuation 
            function return an error number (&lt;0). In both cases, you have to call the respective finalization function FindCloseAlarmTextLanguage. 
            A new list can only be started after the finalization function has been called.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="Language">Variable for the Windows country code (type LCID) of the reporting Language</param>
            <param name="IsDefault">Variable for the identification of the current default language in the project. After the call contains the 
            value 1 if it is the current default language is in the project, otherwise the value 0</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindNextAlarmTextLanguage(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            This function is the continuation function to the function FindFirstAlarmTextLanguage, providing the Windows 
            country code for the next configured message language. The function further determines whether this is the 
            current default language in the project. The list ends, if this function returns an error code (&lt;0). 
            In this case, you have to call the respective finalization function 
            FindCloseAlarmTextLanguage. A new list can only be started after the finalization function has been called.
            </summary>
            <param name="PrjHandle">Projekthandle</param>
            <param name="Language">Variable for the Windows country code (type LCID) of the message language</param>
            <param name="IsDefault">Variable for the identification of the current default language in the project. After the call 
            contains the value 1 if it is the current default language is in the project, otherwise the value 0</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindCloseAlarmTextLanguage(System.Int32)">
            <summary>
            This function is the finalization function to FindFirstAlarmTextLanguage or FindNextAlarmTextLanguage. A new list can 
            only be started after this finalization function has been called.
            </summary>
            <param name="PrjHandle">Project handle </param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.SetAlarmTextDefaultLanguage(System.Int32,System.Int32)">
            <summary>
            This function sets the default language for the specified STEP ® 7 project, to be used by the functions to read the message texts. 
            The language is set with a Windows-country code. Specifying -1 will reset the setting to the Windows default system language.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="Language">Windows-Countrycode (Type LCID) of the message language</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmText(System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
            <summary>
            This function returns the text of the message for the specified alarm and signal number. Valid signal numbers range from 1 up to 
            the the number of signals determined with GetAlarmSignalCount. This applies to all of the following functions, expecting 
            a signal number as parameter. Specify the value -1 for the language to use the default message language, preset with the function 
            SetAlarmTextDefaultLanguage. An incomplete project can lead to the fact that no message text is defined for the language 
            even though zou can get this language with the function FindFirstAlarmTextLanguage resp. FindNextAlarmTextLanguage. 
            This can occur e.g. after adding another language without configuring the corresponding the message texts.
            If no message text is defined for a specified language, so the first the text is retrieved, regardless of its language.
            This applies to all functions described below, expecting a country code as parameter.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Message number</param>
            <param name="Signal">Signal number</param>
            <param name="Language">Windows-country code (Type LCID) of the message lan</param>
            <param name="Text">Variable for the text</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmInfo(System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
            <summary>
            This function determines the info text of the message for the given alarm- and signal-number.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Message number</param>
            <param name="Signal">Signal number</param>
            <param name="Language">Windows country code (Type LCID) of the message language</param>
            <param name="Info">Variable for the text</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmAddText(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
            <summary>
            This function determines the additional text of the message for the given alarm- and signal- number. 
            Up to 9 additional texts can be configured for one message. So the number of the additional text must be in the range 1..9.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Message number</param>
            <param name="Signal">Signal number</param>
            <param name="Index">Number of the additonal text</param>
            <param name="Language">Windows country code (Type LCID) of the message language</param>
            <param name="Text">Variable for the text</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FormatMessage(System.Int32,System.String,Accon.AGLink.AGL4.S7_ALARM,System.String@)">
            <summary>
            
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlarmText"></param>
            <param name="AlarmData"></param>
            <param name="Text"></param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmSCANOperand(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            For the symbol-related messages (SCAN message type - see STEP ® 7-Help), you can configure the SCAN operand, 
            the SCAN-interval and up to 10 operands for SCAN-associated values. As SCAN operand you can use bit addresses 
            of the memory areas I, Q and M. The operating system of the PLC checks the SCAN operand on a state change in the 
            configured time frame. When a change of state is detected, the PLC sends a message with the configured message number 
            and the associated values (i.e. the values of the associated value operand).
            This functionality is implemented only on PLCs of the S7-400 family. This function determines the definition of 
            the SCAN operand for the specified message number. If no SCAN operand is defined, e.g. in case of block-related messages 
            you will get the value -1 for the memory area and the operand type.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Alarm number</param>
            <param name="OpArea">Variable for the memory area</param>
            <param name="OpType">Variable for the operand type</param>
            <param name="Offset">Variable for the address</param>
            <param name="BitNr">Variable for the bitnumber</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmSCANInterval(System.Int32,System.Int32,System.Int32@)">
            <summary>
            This function determines the SCAN time-period for the specified alarm number. 
            This function alse returns a value in case of block-related messages. Therefore you may not use 
            it as a criterion for the distinction between symbol-related or block-related messages.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Alarm number</param>
            <param name="Interval">Variable for the SCAN-time slot</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmSCANAddValue(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            For a symbol related message you can configure up to 10 operands as associated values. This can be the value of bit-, 
            byte-, word- and double-word-operands of the memory areas I, Q and M as well as timer or counter operands. This function 
            gets the definition of the associated value operand for the specified message number and associated value number. The number 
            of the associated value must lie in the range 1 to 10.
            If no operand is defined for the specified number, for example, if the associated value number is greater than the number 
            of configured associated values the value -1 will be returned for the memory area and the operand type.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Alarm number</param>
            <param name="Index">Number of associated value</param>
            <param name="OpArea">Variable for the memory area</param>
            <param name="OpType">Variable for the operand type</param>
            <param name="Offset">Variable for the address</param>
            <param name="BitNr">Variable for the bit number</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmSCANOperandEx(System.Int32,System.Int32,Accon.AGLink.AGL4.DATA_RW40@)">
            <summary>
            This function determines the definition of the SCAN-operand with the given message number. 
            This function is equal to the function GetAlarmSCANOperand, but returns the definition of the SCAN-operand 
            in the given DATA_RW40 structure. If no SCAN operand is defined, e.g. in case of block-related messages you 
            will get the value -1 for the memory area and the operand type in the structure.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Message number</param>
            <param name="Buff">Variable for the operand data structure</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetAlarmSCANAddValueEx(System.Int32,System.Int32,System.Int32,Accon.AGLink.AGL4.DATA_RW40@)">
            <summary>
            This function gets the definition of the associated value operand for the specified message 
            number and associated value number. This function is equal to the function GetAlarmSCANAddValue, 
            but returns the definition of the associated value operand in the given DATA_RW40 structure. If no operand 
            is defined for the specified number, for example, if the associated value number is greater than the number of 
            configured associated values the value -1 will be returned for the memory area and the operand type in the structure.
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="AlmNr">Message number</param>
            <param name="Index">Additional value number</param>
            <param name="Buff">Variable for the operand data structure</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindFirstTextlib(System.Int32,System.String@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="TextLib"></param>
            <param name="System"></param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindNextTextlib(System.Int32,System.String@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="TextLib"></param>
            <param name="System"></param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns>
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindCloseTextlib(System.Int32)">
            <summary>
            
            </summary>
            <param name="PrjHandle">Project handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.SelectTextlib(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="TextLib"></param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindFirstTextlibText(System.Int32,System.Int32@,System.String@)">
            <summary>
            
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="TextId"></param>
            <param name="TextLib"></param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindNextTextlibText(System.Int32,System.Int32@,System.String@)">
            <summary>
            
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="TextId"></param>
            <param name="TextLib"></param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.FindCloseTextlibText(System.Int32)">
            <summary>
            
            </summary>
            <param name="PrjHandle">Project handle</param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="M:Accon.Symbolik.AGL4Sym.GetTextlibText(System.Int32,System.Int32,System.String@)">
            <summary>
            
            </summary>
            <param name="PrjHandle">Project handle</param>
            <param name="TextId"></param>
            <param name="Text"></param>
            <returns>AGL40_SUCCESS	In case of success &lt; 0	Error number</returns> 
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.IsAGLink40_Sym_dll_Found">
            <summary>
            Abfrage der Eigenschaft, ob die Datei AGLink40_Sym.dll gefunden wurde. Diese Datei enthält die eigentlichen Funktionen.
            </summary>
        </member>
        <member name="T:Accon.Symbolik.AGL4Sym.BlockType">
            <summary>
            Bausteintypen bei Deklarationsauflistung
            </summary>
        </member>
        <member name="T:Accon.Symbolik.AGL4Sym.MemClass">
            <summary>
            Speicherart bei Deklarationsauflistung
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.MemClass.NONE">
            <summary>
            Unbekannt/ungueltig
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.MemClass.RET_VAL">
            <summary>
            Nur bei FC/SFC
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.MemClass.STAT_IN">
            <summary>
            STAT:IN (nur bei FB-Multiinstanzen)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.MemClass.STAT_OUT">
            <summary>
            STAT:OUT (nur bei FB-Multiinstanzen)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.MemClass.STAT_IN_OUT">
            <summary>
            STAT:IN_OUT (nur bei FB-Multiinstanzen)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.MemClass.STAT_STAT">
            <summary>
            STAT:STAT (nur bei FB-Multiinstanzen)
            </summary>
        </member>
        <member name="T:Accon.Symbolik.AGL4Sym.DeclarationDataType">
            <summary>
            Datentyp bei Deklarationsauflistung
            </summary>
        </member>
        <member name="T:Accon.Symbolik.AGL4Sym.DATA_DBSYM40">
            <summary>
            Structure DATA_DBSYM40
            </summary> 
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DBSYM40.AbsOpd">
            <summary>
            DB-component in absolute form (DB?.DBX/DBB/DBW/DBD?)
            </summary> 
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DBSYM40.Symbol">
            <summary>
            DB-component in symbolic form ("Symbol".Component)
            </summary> 
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DBSYM40.Comment">
            <summary>
            Comment for DB-component
            </summary> 
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DBSYM40.DataType">
            <summary>
            Datatype as text ("BOOL", "STRING(100)")
            </summary> 
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DBSYM40.Format">
            <summary>
            Datatype as binary (AGLSYM_FORMAT_?)
            </summary> 
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DBSYM40.DBNr">
            <summary>
            DB number
            </summary> 
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DBSYM40.Offset">
            <summary>
            Address of byte
            </summary> 
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DBSYM40.BitNr">
            <summary>
            Bit number
            </summary> 
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DBSYM40.Size">
            <summary>
            Size of datatype in bits
            </summary> 
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.DataDeclaration.AddressTxt">
            <summary>
            Adressierungsangabe in Textform z.B. "0.0", "+2.0", "=4.0", "*16.0", "+65534.0"
            </summary>
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.DataDeclaration.MemoryClassTxt">
            <summary>
            Speicherart in Textform z.B. "IN", "OUT", "IN_OUT", "STAT", "TEMP", "STAT:IN", "STAT:OUT"
            </summary>
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.DataDeclaration.DepthTxt">
            <summary>
            Strukturtiefe in Textform (Leerzeichen)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.DataDeclaration.NameTxt">
            <summary>
            Name der Deklaration (max. 24 Zchn lt. Siemens)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.DataDeclaration.TypeTxt">
            <summary>
            Datentypangabe in Textform z.B. "BOOL", "STRING[100]", "UDT 17", "ARRAY[1..10]"
            </summary>
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.DataDeclaration.InitialValueTxt">
            <summary>
            Anfangswert in Textform (ggf. weiterer Funktionsaufruf erforderlich)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.DataDeclaration.Comment">
            <summary>
            Kommentar zur Deklaration (max. 80 Zchn lt. Siemens)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.DataDeclaration.MemoryClass">
            <summary>
            Speicherart (siehe Konstanten AGLSYM_MEMCLASS_...)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.DataDeclaration.Depth">
            <summary>
            Strukturtiefe (0 = oberste Strukturtiefe)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.DataDeclaration.Type">
            <summary>
            Datentyp (siehe Konstanten AGLSYM_TYPE_...)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.DataDeclaration.AdditionalInfo">
            <summary>
            Zusatzdaten entspr. Datentyp
            Arraygröße muss genau AGL4Sym.AGLSYM_ADDITIONAL_INFO_LEN sein
            </summary>
        </member>
        <member name="P:Accon.Symbolik.AGL4Sym.DataDeclaration.InitialValueLength">
            <summary>
            Länge des Anfangswerts in Textform 
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DECLARATION.Size">
            <summary>
            Strukturgroesse in Bytes
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DECLARATION.AddressTxt">
            <summary>
            Adressierungsangabe in Textform z.B. "0.0", "+2.0", "=4.0", "*16.0", "+65534.0"
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DECLARATION.MemoryClassTxt">
            <summary>
            Speicherart in Textform z.B. "IN", "OUT", "IN_OUT", "STAT", "TEMP", "STAT:IN", "STAT:OUT"
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DECLARATION.DepthTxt">
            <summary>
            Strukturtiefe in Textform (Leerzeichen)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DECLARATION.NameTxt">
            <summary>
            Name der Deklaration (max. 24 Zchn lt. Siemens)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DECLARATION.TypeTxt">
            <summary>
            Datentypangabe in Textform z.B. "BOOL", "STRING[100]", "UDT 17", "ARRAY[1..10]"
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DECLARATION.InitialValueTxt">
            <summary>
            Anfangswert in Textform (ggf. weiterer Funktionsaufruf erforderlich)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DECLARATION.Comment">
            <summary>
            Kommentar zur Deklaration (max. 80 Zchn lt. Siemens)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DECLARATION.MemoryClass">
            <summary>
            Speicherart (siehe Konstanten AGLSYM_MEMCLASS_...)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DECLARATION.Depth">
            <summary>
            Strukturtiefe (0 = oberste Strukturtiefe)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DECLARATION.Type">
            <summary>
            Datentyp (siehe Konstanten AGLSYM_TYPE_...)
            </summary>
        </member>
        <member name="F:Accon.Symbolik.AGL4Sym.DATA_DECLARATION.AdditionalInfo">
            <summary>
            Zusatzdaten entspr. Datentyp
            </summary>
        </member>
        <member name="T:Accon.Symbolik.DBSymbol">
            <summary>
            Represents a symbol of a data block
            </summary>
        </member>
        <member name="M:Accon.Symbolik.DBSymbol.#ctor(System.String,System.String,System.String,System.Int32,System.UInt16,System.String,System.UInt16,System.UInt16,System.UInt16,System.Int32)">
            <summary>
            Initializes this object
            </summary>
            <param name="absOpd">DB-component in absolute form (DB?.DBX/DBB/DBW/DBD?)</param>
            <param name="symbol">DB-component in symbolic form ("Symbol".Component)</param>
            <param name="comment">Comment for DB-component</param>
            <param name="format">Datatype as binary (AGLSYM_FORMAT_?)</param>
            <param name="bitNr">Bit number</param>
            <param name="dataType">Datatype as text ("BOOL", "STRING(100)")</param>
            <param name="dbnr">DB number</param>
            <param name="offset">Address of byte</param>
            <param name="size">Size of datatype in bits</param>
            <param name="prjHandle">Project handle</param>
        </member>
        <member name="M:Accon.Symbolik.DBSymbol.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.UInt16,System.String,System.UInt16,System.UInt16,System.UInt16,System.Int32)">
            <summary>
            Initializes this object
            </summary>
            <param name="absOpd">DB-component in absolute form (DB?.DBX/DBB/DBW/DBD?)</param>
            <param name="symbol">DB-component in symbolic form ("Symbol".Component)</param>
            <param name="comment">Comment for DB-component</param>
            <param name="exComment">compound Comment for DB-component</param>
            <param name="format">Datatype as binary (AGLSYM_FORMAT_?)</param>
            <param name="bitNr">Bit number</param>
            <param name="dataType">Datatype as text ("BOOL", "STRING(100)")</param>
            <param name="dbnr">DB number</param>
            <param name="offset">Address of byte</param>
            <param name="size">Size of datatype in bits</param>
            <param name="prjHandle">Project handle</param>
        </member>
        <member name="M:Accon.Symbolik.DBSymbol.#ctor(Accon.Symbolik.AGL4Sym.DATA_DBSYM40,System.Int32)">
            <summary>
            Initializes this object with the data of a AGL4Sym.DATA_DBSYM40
            </summary>
            <param name="data">Initialization data</param>
            <param name="prjHandle">Project handle</param>
        </member>
        <member name="M:Accon.Symbolik.DBSymbol.#ctor(Accon.Symbolik.AGL4Sym.DATA_DBSYM40,System.String,System.Int32)">
            <summary>
            Initializes this object with the data of a AGL4Sym.DATA_DBSYM40
            </summary>
            <param name="data">Initialization data</param>
            <param name="exComment">Zusammengesetzter Kommentar zum Symbol</param>
            <param name="prjHandle">Project handle</param>
        </member>
        <member name="M:Accon.Symbolik.DBSymbol.CompareTo(System.Object)">
            <summary>
            Compares two objects of type DBSymbol
            </summary>
            <param name="obj">Instance of an object of type DBSymbol</param>
            <returns></returns>
        </member>
        <member name="P:Accon.Symbolik.DBSymbol.Symbolname">
            <summary>
            Gets the DB-component in symbolic form ("Symbol".Component)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.DBSymbol.AbsOpd">
            <summary>
            Gets the DB-component in absolute form (DB?.DBX/DBB/DBW/DBD?)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.DBSymbol.Comment">
            <summary>
            Gets the symbol comment
            </summary>
        </member>
        <member name="P:Accon.Symbolik.DBSymbol.ExComment">
            <summary>
            Gets the symbol comment
            </summary>
        </member>
        <member name="P:Accon.Symbolik.DBSymbol.Format">
            <summary>
            Gets the datatype as binary (AGLSYM_FORMAT_?)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.DBSymbol.BitNr">
            <summary>
            Gets the bit number
            </summary>
        </member>
        <member name="P:Accon.Symbolik.DBSymbol.DataType">
            <summary>
            Gets the datatype as text ("BOOL", "STRING(100)")
            </summary>
        </member>
        <member name="P:Accon.Symbolik.DBSymbol.DBNr">
            <summary>
            Gets the data block number
            </summary>
        </member>
        <member name="P:Accon.Symbolik.DBSymbol.Offset">
            <summary>
            Gets the address of byte
            </summary>
        </member>
        <member name="P:Accon.Symbolik.DBSymbol.Size">
            <summary>
            Gets the size of datatype in bits
            </summary>
        </member>
        <member name="P:Accon.Symbolik.DBSymbol.DataRW">
            <summary>
            Creates a AGl4.DATA_RW40 object for read request
            </summary>
        </member>
        <member name="T:Accon.Symbolik.DeclarationView">
            <summary>
            
            </summary>
        </member>
        <member name="M:Accon.Symbolik.DeclarationViewItem.LoadInitialValue(Accon.Symbolik.AGL4Sym.DataDeclaration,System.Int32)">
            <summary>
            Lädt den Anfangswert für die aktuelle Deklaration
            </summary>
            <param name="currentDecleration"></param>
            <param name="findHandle">Handle der aktuellen Aufzählung</param>
            <returns></returns>
        </member>
        <member name="T:Accon.Symbolik.S7Program">
            <summary>
            Represents a S7-Program
            </summary>
        </member>
        <member name="M:Accon.Symbolik.S7Program.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new program
            </summary>
            <param name="name">Name of program</param>
            <param name="prjHandle">Project handle</param>
        </member>
        <member name="M:Accon.Symbolik.S7Program.loadDBList">
            <summary>
            Loads the data blocks of the program
            </summary>
            <returns>AGL40_SUCCESS if successfull, otherwise a error number &lt; 0</returns>
        </member>
        <member name="M:Accon.Symbolik.S7Program.loadFilteredDBList(System.String)">
            <summary>
            Loads the data blocks of the program using the given filter
            </summary>
            <param name="filter">DB filter</param>
            <returns>AGL40_SUCCESS if successfull, otherwise a error number &lt; 0</returns>
        </member>
        <member name="M:Accon.Symbolik.S7Program.setActive">
            <summary>
            Sets to use this program as reference for following access to the symbol table or the db symbols
            </summary>
            <returns>AGL40_SUCCESS if successfull, otherwise a error number &lt; 0</returns>
        </member>
        <member name="M:Accon.Symbolik.S7Program.getDB(System.Int32)">
            <summary>
            Get the data block with the specified number
            </summary>
            <param name="dbnr">Number of data block</param>
            <returns>Data block if found, otherwise null</returns>
        </member>
        <member name="M:Accon.Symbolik.S7Program.CompareTo(System.Object)">
            <summary>
            Compares two objects of type S7Program
            </summary>
            <param name="obj">Instance of an object of type S7Program</param>
            <returns></returns>
        </member>
        <member name="P:Accon.Symbolik.S7Program.Name">
            <summary>
            Gets the name of the program
            </summary>
        </member>
        <member name="P:Accon.Symbolik.S7Program.Symbolik">
            <summary>
            Gets the symbols of this program
            </summary>
        </member>
        <member name="P:Accon.Symbolik.S7Program.DBs">
            <summary>
            Gets the list of data blocks of this program
            </summary>
        </member>
        <member name="P:Accon.Symbolik.S7Program.DBCount">
            <summary>
            Gets the count of the data blocks
            </summary>
        </member>
        <member name="T:Accon.Symbolik.S7Project">
            <summary>
            Represents a S7-Project
            </summary>
        </member>
        <member name="M:Accon.Symbolik.S7Project.#ctor(System.String)">
            <summary>
            Inizializes the project with the name
            </summary>
            <param name="project">Full path to the S7-Project file</param>
        </member>
        <member name="M:Accon.Symbolik.S7Project.openProject">
            <summary>
            Opens the S7-Project for access
            </summary>
            <returns>AGL40_SUCCESS if successfull, otherwise a error number &lt; 0</returns>
        </member>
        <member name="M:Accon.Symbolik.S7Project.closeProject">
            <summary>
            Closes the S7-Project file
            </summary>
            <returns>AGL40_SUCCESS if successfull, otherwise a error number &lt; 0</returns>
        </member>
        <member name="M:Accon.Symbolik.S7Project.GetErrorMessage(System.Int32)">
            <summary>
            Gets the message of a error number
            </summary>
            <param name="errorNr">Error number</param>
            <returns>Messge for error</returns>
        </member>
        <member name="M:Accon.Symbolik.S7Project.getProgramm(System.String)">
            <summary>
            Gets the S7-Program for the specified name
            </summary>
            <param name="name">The program name</param>
            <returns>The S7-Program if found, otherwise null</returns>
        </member>
        <member name="M:Accon.Symbolik.S7Project.loadProgramNames">
            <summary>
            Bereitet die Programmliste vor.
            </summary>
            <returns>AGL40_SUCCESS falls erfolgreich, sonst eine Fehlernummer kleiner 0.</returns>
        </member>
        <member name="P:Accon.Symbolik.S7Project.Programme">
            <summary>
            Gets all available programs of this project
            </summary>
        </member>
        <member name="P:Accon.Symbolik.S7Project.Name">
            <summary>
            Gets the full path to the S7-Project file
            </summary>
        </member>
        <member name="P:Accon.Symbolik.S7Project.PrjHandle">
            <summary>
            Gets the project handle after the proejct has been opened
            </summary>
        </member>
        <member name="P:Accon.Symbolik.S7Project.IsOpen">
            <summary>
            Gets whether the project has been opened
            </summary>
        </member>
        <member name="T:Accon.Symbolik.Symbol">
            <summary>
            Represents a symbol of the symbol table
            </summary>
        </member>
        <member name="M:Accon.Symbolik.Symbol.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initialites this symbol
            </summary>
            <param name="absopd">Component in absolute form (DB?.DBX/DBB/DBW/DBD?)</param>
            <param name="comment">Comment for this symbol</param>
            <param name="symbol">Component in symbolic form ("Symbol".Component)</param>
            <param name="format">Datatype as binary (AGLSYM_FORMAT_?)</param>
            <param name="prjHandle">Project handle</param>
        </member>
        <member name="M:Accon.Symbolik.Symbol.CompareTo(System.Object)">
            <summary>
            Compares two objects of type Symbol
            </summary>
            <param name="obj">Instance of an object of type Symbol</param>
            <returns></returns>
        </member>
        <member name="P:Accon.Symbolik.Symbol.AbsOpd">
            <summary>
            Gets the component in absolute form (DB?.DBX/DBB/DBW/DBD?)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.Symbol.Symbolname">
            <summary>
            Gets the component in symbolic form ("Symbol".Component)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.Symbol.Comment">
            <summary>
            Gets the comment for this symbol
            </summary>
        </member>
        <member name="P:Accon.Symbolik.Symbol.Format">
            <summary>
            Gets the datatype as binary (AGLSYM_FORMAT_?)
            </summary>
        </member>
        <member name="P:Accon.Symbolik.Symbol.DataRW">
            <summary>
            Creates a AGl4.DATA_RW40 object for read request
            </summary>
        </member>
        <member name="T:Accon.Symbolik.SymList">
            <summary>
            Represents the symbol table
            </summary>
        </member>
        <member name="M:Accon.Symbolik.SymList.#ctor(System.Int32)">
            <summary>
            Initializes the symbol table
            </summary>
            <param name="prjHandle">Project handle</param>
        </member>
        <member name="M:Accon.Symbolik.SymList.loadAllSymbols">
            <summary>
            Loads all symbol from the table
            </summary>
            <returns>AGL40_SUCCESS if successfull, otherwise a error number &lt; 0</returns>
        </member>
        <member name="M:Accon.Symbolik.SymList.loadFilteredSymbols(System.String)">
            <summary>
            Loads all symbols from the table usign the given filter
            </summary>
            <param name="filter">Symbol filter</param>
            <returns>AGL40_SUCCESS if successfull, otherwise a error number &lt; 0</returns>
        </member>
        <member name="M:Accon.Symbolik.SymList.getSymbol(System.String)">
            <summary>
            Gets a symbol with the given name
            </summary>
            <param name="symbol">Symbol name</param>
            <returns>The symbol object if found, otherwise null</returns>
        </member>
        <member name="M:Accon.Symbolik.SymList.SymbolFromText(System.String)">
            <summary>
            Gets the symbol using the AGL4Sym.GetSymbolFromText to determine the symbol data
            </summary>
            <param name="text">Operand in asolute or symbolic form</param>
            <returns>he symbol object if found, otherwise null</returns> 
        </member>
        <member name="P:Accon.Symbolik.SymList.Name">
            <summary>
            Gets the name of ths symbol table
            </summary>
        </member>
        <member name="P:Accon.Symbolik.SymList.Symbole">
            <summary>
            Gets the list of all symbol in the table
            </summary>
        </member>
        <member name="P:Accon.Symbolik.SymList.SymbolCount">
            <summary>
            Gets the count of the symbols
            </summary>
        </member>
        <member name="T:Accon.AGLink.AsyncReportType">
            <summary>
            Defines the communication method in asynchronous mode between AGLink40.dll an the wrapper
            </summary>
        </member>
        <member name="F:Accon.AGLink.AsyncReportType.Messages">
            <summary>
            Default communication with messages
            </summary>
        </member>
        <member name="F:Accon.AGLink.AsyncReportType.Callbacks">
            <summary>
            Uses Callbacks to inform from within AGLink
            </summary>
        </member>
        <member name="T:Accon.AGLink.Extensions.INCKCyclicReader">
            <summary>
            Interface for cyclic reading from a nck
            </summary>
        </member>
        <member name="M:Accon.AGLink.Extensions.INCKCyclicReader.Start(Accon.AGLink.AGL4.NckDataRW[],System.Boolean)">
            <summary>
            Starts the cyclic reader
            </summary>
            <param name="datadefinition">Data to be read</param>
            <param name="informOnChange">Whether to inform the user just in case of changed data</param>
        </member>
        <member name="M:Accon.AGLink.Extensions.INCKCyclicReader.Stop">
            <summary>
            Stops the reader
            </summary>
        </member>
        <member name="M:Accon.AGLink.Extensions.INCKCyclicReader.Pause">
            <summary>
            Paused the reader
            </summary>
        </member>
        <member name="M:Accon.AGLink.Extensions.INCKCyclicReader.Resume">
            <summary>
            Resumes a paused reader
            </summary>
        </member>
        <member name="E:Accon.AGLink.Extensions.INCKCyclicReader.OnDataReceived">
            <summary>
            Informs about received data
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.INCKCyclicReader.Intervall">
            <summary>
            Gets or sets the cycle intervall
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.INCKCyclicReader.MaxCycles">
            <summary>
            Gets or sets the maximal cycles (&lt; 0 = infinite)
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.INCKCyclicReader.CurrentCycleCount">
            <summary>
            Gets the current count of cycles
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.INCKCyclicReader.IsActive">
            <summary>
            Gets whether the reader is active
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.INCKCyclicReader.IsPaused">
            <summary>
            Gets whether the reader is paused
            </summary>
        </member>
        <member name="E:Accon.AGLink.Extensions.NCKCyclicReader.OnDataReceived">
            <summary>
            Ereignis, um über empfangene Daten informiert zu werden
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.NCKCyclicReader.CurrentCycleCount">
            <summary>
            Gibt die Anzahl bisher ausgeführter Lesezyklen
            </summary>
        </member>
        <member name="T:Accon.AGLink.ConsumerData">
            <summary>
            Datenobjekt (DO), vereint einen kompletten Datenblock, der auf einmal durchgeschleift werden soll 
            </summary>
        </member>
        <member name="P:Accon.AGLink.ConsumerData.Result">
            <summary>
            Struktur mit den Aufrufergebnissen im Falle einer SPS
            </summary>
        </member>
        <member name="P:Accon.AGLink.ConsumerData.Progress">
            <summary>
            Struktur mit den Aufrufdaten im Falle einer NC
            </summary>
        </member>
        <member name="P:Accon.AGLink.ConsumerData.JobNr">
            <summary>
            Die Nummer des Jobs dessen Daten vorliegen
            </summary>
        </member>
        <member name="P:Accon.AGLink.ConsumerData.ProcessRetries">
            <summary>
            Anzahl bisheriger Versuche diese Daten an den Benutzer durch zu leiten
            </summary>
        </member>
        <member name="T:Accon.AGLink.CallbackConsumer">
            <summary>
            Verarbeitet die Callbacks, die AGLink im asynchronen Betrieb an den Wrapper durchleitet
            </summary>
        </member>
        <member name="F:Accon.AGLink.CallbackConsumer._Consumer">
            <summary>
            Die konkrete Konsument, der die empfangenen Daten in den Hauptthread durchleitet, um dort den Benutzer zu informieren
            </summary>
        </member>
        <member name="F:Accon.AGLink.CallbackConsumer._ResetEvent">
            <summary>
            Freigabemechanismus, um den Konsumenten die Verarbeitungsfreigabe zu geben
            </summary>
        </member>
        <member name="F:Accon.AGLink.CallbackConsumer._Disposed">
            <summary>
            Verhindert mehrfache Deinitialisierung des Konsumenten
            </summary>
        </member>
        <member name="F:Accon.AGLink.CallbackConsumer._CallbackToMainThread">
            <summary>
            Vom Konsumenten genutzt, um die Durchleitung zum Hauptthread zu ermöglichen
            </summary>
        </member>
        <member name="F:Accon.AGLink.CallbackConsumer._Owner">
            <summary>
            Die AGLink-Wrapper-Instanz, die die Daten am Ende empfangen soll
            </summary>
        </member>
        <member name="F:Accon.AGLink.CallbackConsumer._DataToConsume">
            <summary>
            FIFO-Liste, in die die zu verarbeitenden Datenpakete eingestellt werden und aus der der Konsument lebt.
            </summary>
        </member>
        <member name="F:Accon.AGLink.CallbackConsumer._MaxProcessRetries">
            <summary>
            Die maximale Anzahl Versuche, die Daten an den Benutzer durchzuleiten, bevor die Daten aus der Liste gelöscht werden
            </summary>
        </member>
        <member name="F:Accon.AGLink.CallbackConsumer._IsRunning">
            <summary>
            Gibt an, ob der Konsument momentan existiert
            </summary>
        </member>
        <member name="M:Accon.AGLink.CallbackConsumer.#ctor(Accon.AGLink.IDataConsumer)">
            <summary>
            Initialisiert den Callback-Konsumenten
            </summary>
            <param name="owner">Die AGLink-Wrapper-Instanz, die den Konsumenten beherbergt und später auch benachrichtigt werden soll</param>
        </member>
        <member name="M:Accon.AGLink.CallbackConsumer.DataReceived(System.Object)">
            <summary>
            Diese Methode wird über die Delegate-Referenz _CallbackToMainThread aufgerufen
            </summary>
            <param name="state">Die Daten die vom Callback angenommen wurden und nun an den Benutzer durchgeleitet werden sollen</param>
        </member>
        <member name="M:Accon.AGLink.CallbackConsumer.AddData(Accon.AGLink.ConsumerData)">
            <summary>
            Fügt der FIFO-Liste einen neuen Datenblock hinzu, der abgearbeitet werden soll
            </summary>
            <param name="data">Neuer Datenblock</param>
        </member>
        <member name="M:Accon.AGLink.CallbackConsumer.Wakeup">
            <summary>
            Wekt den Konsumenten auf, sodass er die Daten aus der FIFO-Liste verarbeitet
            </summary>
        </member>
        <member name="M:Accon.AGLink.CallbackConsumer.Run(System.ComponentModel.AsyncOperation)">
            <summary>
            Datenverarbeitung. Hier werden die Daten aus der FIFO-Liste an den Benutzer durchgeleitet
            </summary>
            <param name="async">Objekt zur Benachrichtung des Hauptthread und Durchscleifung der Daten</param>
        </member>
        <member name="M:Accon.AGLink.CallbackConsumer.Dispose">
            <summary>
            Den Konsumenten beenden und Speicher freigeben
            </summary>
        </member>
        <member name="T:Accon.AGLink.CallbackConsumer.InternalCallHandler">
            <summary>
            Dient dazu den Verarbeitungsvorgang asynchro anzustossen
            </summary>
            <param name="asyncOperation">Objekt zur Benachrichtung des Hauptthreads über Änderungen bzw. neu empfangene Daten</param>
        </member>
        <member name="T:Accon.AGLink.CallbackMessageReceiver">
            <summary>
            Empfängt die von der SPS empfangen Daten und stellt sie dem Benutzer zur Verfügung
            </summary>
        </member>
        <member name="F:Accon.AGLink.CallbackMessageReceiver._Consumer">
            <summary>
            Der Konsument, der unsere empfangenen Daten an den Benutzer durchleitet
            </summary>
        </member>
        <member name="F:Accon.AGLink.CallbackMessageReceiver._PLCCallback">
            <summary>
            Delegat, der von AGLink intern für AG-Rückrufe verwendet wird
            </summary>
        </member>
        <member name="F:Accon.AGLink.CallbackMessageReceiver._NCKCallback">
            <summary>
            Delegat, der von AGLink intern für NCK-Rückrufe verwendet wird
            </summary>
        </member>
        <member name="M:Accon.AGLink.CallbackMessageReceiver.Initialize(Accon.AGLink.IDataConsumer)">
            <summary>
            Initialisiert den Empfänger für den Datenempfang
            </summary>
            <param name="aglink">AGLink-Instanz, die Daten liefern wird</param>
        </member>
        <member name="M:Accon.AGLink.CallbackMessageReceiver.CreatePLCNotification">
            <summary>
            Erstellt die Struktur mit der eingestellten Benachrichtungsmethode für SPSen
            </summary>
            <returns>Benachrichtigunsstruktur</returns>
        </member>
        <member name="M:Accon.AGLink.CallbackMessageReceiver.CreateNCKNotification">
            <summary>
            Erstellt die Struktur mit der eingestellten Benachrichtungsmethode für NCs
            </summary>
            <returns>Benachrichtigunsstruktur</returns>
        </member>
        <member name="M:Accon.AGLink.CallbackMessageReceiver.ManagedPLCCallback(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Fügt die empfangen Daten in die Verarbeitungswarteschlange ein
            </summary>
            <param name="connNr">Verbindungsnummer</param>
            <param name="jobNr">Der Job, der sich Rückmeldet</param>
            <param name="result40">Aufrufergebnis des Jobs</param>
        </member>
        <member name="M:Accon.AGLink.CallbackMessageReceiver.ManagedNCKCallback(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Fügt die empfangen Daten in die Verarbeitungswarteschlange ein
            </summary>
            <param name="connNr">Verbindungsnummer</param>
            <param name="jobNr">Der Job, der sich Rückmeldet</param>
            <param name="progress">Aufrufergebnis des Jobs, bzw aktueller Status</param>
        </member>
        <member name="P:Accon.AGLink.CallbackMessageReceiver.Connected">
            <summary>
            Setzt oder gibt zurück, ob eine Verbindung besteht
            </summary>
        </member>
        <member name="T:Accon.AGLink.CallbackMessageReceiver.DataCallback">
            <summary>
            Aufrufdelegat, der von AGLink intern genutzt wird
            </summary>
            <param name="ConnNr">Verbindungnummer</param>
            <param name="JobNr">Der bearbeitete Job</param>
            <param name="result">Ergebnis des Aufrufs</param>
        </member>
        <member name="T:Accon.AGLink.ConnectionErrorDO">
            <summary>
            Datenobjekt zur Weiterleitung von Fehlerinformationen bei Verbindungsproblemen
            </summary>
        </member>
        <member name="M:Accon.AGLink.ConnectionErrorDO.#ctor(Accon.AGLink.ConnectionInfoDO,Accon.AGLink.ErrorDO,Accon.AGLink.State,Accon.AGLink.State)">
            <summary>
            Konstruktor
            </summary>
            <param name="conninfo">Verbindungsinformationen des fehlerobjektes</param>
            <param name="errordetails">Fehlerdetails</param>
            <param name="disconnectto">Verbindungsstatus, bis zu dem abgebaut werden soll</param>
            <param name="connectto">Verbindungsstatus, bis zu dem aufgebaut werden soll</param>
        </member>
        <member name="P:Accon.AGLink.ConnectionErrorDO.Errordetails">
            <summary>
            Gibt oder setzt die Details zum aufgetretenen Fehler
            </summary>
        </member>
        <member name="P:Accon.AGLink.ConnectionErrorDO.Connectioninformation">
            <summary>
            Gibt oder setzt die Verbindungsinformationen des Verbindungsobjektes, bei dem ein Fehler aufgetreten ist
            </summary>
        </member>
        <member name="P:Accon.AGLink.ConnectionErrorDO.ErrorFunction">
            <summary>
            Gibt oder setzt die Funktion, die den Fehler ausgelöst hat
            </summary>
        </member>
        <member name="P:Accon.AGLink.ConnectionErrorDO.Disconnectto">
            <summary>
            Gibt oder setzt den Verbindungsstatus, bis zu dem die Verbindung abgebaut werden soll
            </summary>
        </member>
        <member name="P:Accon.AGLink.ConnectionErrorDO.Reconnectoto">
            <summary>
            Gibt oder setzt den Verbindungsstatus, bis zu dem die Verbindung wieder aufgebaut werden soll
            </summary>
        </member>
        <member name="P:Accon.AGLink.ConnectionErrorDO.FireConnectionErrorEvent">
            <summary>
            Gibt oder setzt das Flag, ob ein Verbindungsfehlerevent ausgelöst werden soll
            </summary>
        </member>
        <member name="T:Accon.AGLink.ConnEventHandler">
            <summary>
            Ereignishandler für Verbindungsfehler
            </summary>
            <param name="sender">Verbindugnsobjekt, welches den Fehler entdekt hat</param>
            <param name="e">Fehlerinformationen</param>
        </member>
        <member name="M:Accon.AGLink.ErrorDO.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:Accon.AGLink.ErrorDO.#ctor(System.Int32,Accon.AGLink.FunctionType,System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="errornumber">Fehlernummer</param>
            <param name="function">Funktion bei dem der Fehler aufgetreten ist</param>
            <param name="functionsuccceeded">Flag ob die Funktion erfolgreich war</param>
        </member>
        <member name="M:Accon.AGLink.ErrorDO.SetErrorMessage">
            <summary>
            Versucht den Fehlertext zur gesetzten Fehlernummer zu bekommen
            </summary>
        </member>
        <member name="P:Accon.AGLink.ErrorDO.ErrorMessage">
            <summary>
            Gibt die Fehlernachricht zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.ErrorDO.ErrorNumber">
            <summary>
            Gibt oder setzt die Fehlerkonstante
            </summary>
        </member>
        <member name="P:Accon.AGLink.ErrorDO.SErrorNumber">
            <summary>
            Gibt oder setzt die Fehlerkonstante der Steuerung
            </summary>
        </member>
        <member name="P:Accon.AGLink.ErrorDO.Function">
            <summary>
            Gibt die Funktion die den Fehler ausgelöst hat zurück
            </summary>
        </member>
        <member name="P:Accon.AGLink.ErrorDO.Functiontype">
            <summary>
            Gibt oder setzt die Funktion die den Fehler ausgelöst hat
            </summary>
        </member>
        <member name="P:Accon.AGLink.ErrorDO.FunctionSucceeded">
            <summary>
            Gibt oder setzt ein Flag, ob die Funktion erfolgreich war
            </summary>
        </member>
        <member name="T:Accon.AGLink.DataBytes">
            <summary>
            Structure for result data of methods with byte fields in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.DataBytes.Data">
            <summary>
            Received/sent data
            </summary>
        </member>
        <member name="F:Accon.AGLink.DataBytes.DBNr">
            <summary>
            Number of data block
            </summary>
        </member>
        <member name="M:Accon.AGLink.DataBytes.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes the structure with data
            </summary>
            <param name="data">Received/sent data</param>
            <param name="dbnr">Number of data block</param>
        </member>
        <member name="T:Accon.AGLink.DataWords">
            <summary>
            Structure for results of methods with word fields in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.DataWords.Data">
            <summary>
            Received/sent data
            </summary>
        </member>
        <member name="F:Accon.AGLink.DataWords.DBNr">
            <summary>
            Number of data block
            </summary>
        </member>
        <member name="M:Accon.AGLink.DataWords.#ctor(System.UInt16[],System.Int32)">
            <summary>
            Initializes the structure with data
            </summary>
            <param name="data">Received/sent data</param>
            <param name="dbnr">Number of data block</param>
        </member>
        <member name="T:Accon.AGLink.DiagBuffer">
            <summary>
            Structure for result data of methods reading diagnostics in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.DiagBuffer.Buffer">
            <summary>
            Received data
            </summary>
        </member>
        <member name="F:Accon.AGLink.DiagBuffer.Entries">
            <summary>
            Real amount of data entries
            </summary>
        </member>
        <member name="M:Accon.AGLink.DiagBuffer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes the structure with data
            </summary>
            <param name="buffer">Received data</param>
            <param name="entries">Real amount of data entries</param>
        </member>
        <member name="T:Accon.AGLink.OpState">
            <summary>
            Structure for result data of methods receiving plc state data in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.OpState.State">
            <summary>
            State of the plc
            </summary>
        </member>
        <member name="M:Accon.AGLink.OpState.#ctor(System.Int32)">
            <summary>
            Initializes the structure with the received data
            </summary>
            <param name="state">State of the plc</param>
        </member>
        <member name="P:Accon.AGLink.OpState.StateText">
            <summary>
            State of the plc as string
            </summary>
        </member>
        <member name="T:Accon.AGLink.OpStateEx">
            <summary>
            Structure for advanced result data of methods receiving plc state data in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.OpStateEx.State">
            <summary>
            State of the plc
            </summary>
        </member>
        <member name="M:Accon.AGLink.OpStateEx.#ctor(System.Int32)">
            <summary>
            Initializes the structure with the received data
            </summary>
            <param name="state">State of the plc</param>
        </member>
        <member name="P:Accon.AGLink.OpStateEx.StateText">
            <summary>
            The stat of the plc as string
            </summary>
        </member>
        <member name="T:Accon.AGLink.SzlData">
            <summary>
            Structure for result data of methods reading the system state list in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.SzlData.Szl">
            <summary>
            System state list
            </summary>
        </member>
        <member name="F:Accon.AGLink.SzlData.SzlLength">
            <summary>
            Real length of the system state list
            </summary>
        </member>
        <member name="M:Accon.AGLink.SzlData.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes the structure with the received data
            </summary>
            <param name="szl">System state list</param>
            <param name="szlLength">Real lenght of the state list</param>
        </member>
        <member name="T:Accon.AGLink.DBList">
            <summary>
            Structure for result data of methods receiving data block data in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.DBList.List">
            <summary>
            List of available data blocks
            </summary>
        </member>
        <member name="F:Accon.AGLink.DBList.Count">
            <summary>
            Count of available data blocks
            </summary>
        </member>
        <member name="M:Accon.AGLink.DBList.#ctor(System.UInt16[],System.Int32)">
            <summary>
            Initializes the structure with the received data
            </summary>
            <param name="dblist">List of available data blocks</param>
            <param name="count">Count of available data blocks</param>
        </member>
        <member name="T:Accon.AGLink.DBInfo">
            <summary>
            Strucuture for result data of methods receiving informations about data blocks in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.DBInfo.DBNr">
            <summary>
            Number of the data block
            </summary>
        </member>
        <member name="F:Accon.AGLink.DBInfo.DBLen">
            <summary>
            Lenght of the data block
            </summary>
        </member>
        <member name="M:Accon.AGLink.DBInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Inizializes the structure with the received data
            </summary>
            <param name="dbnr">Number of the data block</param>
            <param name="dblen">Length of the data block</param>
        </member>
        <member name="T:Accon.AGLink.OptMix">
            <summary>
            Structure for result data of optimization methods in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.OptMix.Opt">
            <summary>
            The optimization handle
            </summary>
        </member>
        <member name="F:Accon.AGLink.OptMix.DataRw">
            <summary>
            The received/sent data
            </summary>
        </member>
        <member name="M:Accon.AGLink.OptMix.#ctor(Accon.AGLink.AGL4.DATA_RW40[],System.IntPtr)">
            <summary>
            Inizializes the structure with the received/sent data
            </summary>
            <param name="dataRw">Received/sent data</param>
            <param name="opt">optimization handle</param>
        </member>
        <member name="T:Accon.AGLink.BReceiveEx">
            <summary>
            Structure for result data of BReceive(Ex) methods in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.BReceiveEx.Buff">
            <summary>
            Received data
            </summary>
        </member>
        <member name="F:Accon.AGLink.BReceiveEx.R_ID">
            <summary>
            Remote id of the connection
            </summary>
        </member>
        <member name="F:Accon.AGLink.BReceiveEx.UsedLen">
            <summary>
            Used amount of bytes in the data field
            </summary>
        </member>
        <member name="M:Accon.AGLink.BReceiveEx.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes the strcture with the result data
            </summary>
            <param name="buff">Received data</param>
            <param name="rid">Remote id of the connection</param>
            <param name="usedlen">Used amount of bytes in the data field</param>
        </member>
        <member name="T:Accon.AGLink.MLFBExData">
            <summary>
            Structure for result data of methods reading the mlfb in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.MLFBExData.MLFB">
            <summary>
            MLFB number
            </summary>
        </member>
        <member name="F:Accon.AGLink.MLFBExData.PLCVer">
            <summary>
            PLC-Version
            </summary>
        </member>
        <member name="F:Accon.AGLink.MLFBExData.PGASVer">
            <summary>
            PG-AS interface connection
            </summary>
        </member>
        <member name="M:Accon.AGLink.MLFBExData.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes the structure with the received data
            </summary>
            <param name="mlfb">MLFB number</param>
            <param name="plcver">plc version</param>
            <param name="pgasver">pg-as interface connection</param>
        </member>
        <member name="T:Accon.AGLink.BlockList">
            <summary>
            Structure for result data of methods receiving block data in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.BlockList.BlockCount">
            <summary>
            Count of blocks
            </summary>
        </member>
        <member name="F:Accon.AGLink.BlockList.Blocks">
            <summary>
            Received block data
            </summary>
        </member>
        <member name="M:Accon.AGLink.BlockList.#ctor(System.UInt16[],System.Int32)">
            <summary>
            Initializes the structure with the received data
            </summary>
            <param name="blocks">Received block data</param>
            <param name="blockCount">Count of blocks</param>
        </member>
        <member name="T:Accon.AGLink.OpenMsg">
            <summary>
            Structure for result data of methods with open messages in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.OpenMsg.OpenMsgs">
            <summary>
            Open messages
            </summary>
        </member>
        <member name="F:Accon.AGLink.OpenMsg.MsgCount">
            <summary>
            Count of messages within the field
            </summary>
        </member>
        <member name="M:Accon.AGLink.OpenMsg.#ctor(Accon.AGLink.AGL4.S7_OPEN_MSG_STATE[],System.Int32)">
            <summary>
            Initializes the structure with the received data
            </summary>
            <param name="openmsgs">Open messages from the plc</param>
            <param name="msgcount">Count of message in the field</param>
        </member>
        <member name="T:Accon.AGLink.ARData">
            <summary>
            Structure for result data of methods with archive data in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.ARData.AR_ID">
            <summary>
            Id of archive data
            </summary>
        </member>
        <member name="F:Accon.AGLink.ARData.Data">
            <summary>
            Archive data
            </summary>
        </member>
        <member name="M:Accon.AGLink.ARData.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes the structure with the received data
            </summary>
            <param name="data">Archive data</param>
            <param name="arid">Id of the archive</param>
        </member>
        <member name="T:Accon.AGLink.CyclicRead">
            <summary>
            Structure for result data of cyclic methods in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.CyclicRead.DataRW">
            <summary>
            Received data
            </summary>
        </member>
        <member name="F:Accon.AGLink.CyclicRead.Handle">
            <summary>
            Handle of cyclic reading function
            </summary>
        </member>
        <member name="M:Accon.AGLink.CyclicRead.#ctor(Accon.AGLink.AGL4.DATA_RW40[],System.Int32)">
            <summary>
            Inizializes the structure with the received data
            </summary>
            <param name="datarw">Received data</param>
            <param name="handle">Handle of cyclic reading function</param>
        </member>
        <member name="T:Accon.AGLink.NCKCyclicRead">
            <summary>
            Structure for result data of cyclic methods from the NCK in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.NCKCyclicRead.DataRW">
            <summary>
            Received data
            </summary>
        </member>
        <member name="F:Accon.AGLink.NCKCyclicRead.Handle">
            <summary>
            Handle of cyclic reading function
            </summary>
        </member>
        <member name="M:Accon.AGLink.NCKCyclicRead.#ctor(Accon.AGLink.AGL4.NckDataRW[],System.Int32)">
            <summary>
            Inizializes the structure with the received data
            </summary>
            <param name="datarw">Received data</param>
            <param name="handle">Handle of cyclic reading function</param>
        </member>
        <member name="T:Accon.AGLink.ARInit">
            <summary>
            Structure for result data of methods that active the archives in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.ARInit.Msgs">
            <summary>
            Field with the archive ids to be activated
            </summary>
        </member>
        <member name="F:Accon.AGLink.ARInit.Handle">
            <summary>
            For internal identification of the data
            </summary>
        </member>
        <member name="M:Accon.AGLink.ARInit.#ctor(Accon.AGLink.AGL4.S7_CHANGE_MSG_STATE[],System.Int32)">
            <summary>
            Initializes the structure with the received data
            </summary>
            <param name="msgs">Archive ids to be activated</param>
            <param name="handle">For internal identification of the data</param>
        </member>
        <member name="T:Accon.AGLink.NCKFileData">
            <summary>
            Structure for result data of methods that transfer files from and to a nck in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.NCKFileData.Filename">
            <summary>
            Filepath/Filename
            </summary>
        </member>
        <member name="F:Accon.AGLink.NCKFileData.Buff">
            <summary>
            File data
            </summary>
        </member>
        <member name="F:Accon.AGLink.NCKFileData.UsedSize">
            <summary>
            Count of used bytes in the Buff field
            </summary>
        </member>
        <member name="M:Accon.AGLink.NCKFileData.#ctor(System.String,System.Byte[],System.Int32)">
            <summary>
            Inizializes the structure with the received data
            </summary>
            <param name="filename">Filename/Filepath</param>
            <param name="buff">File data</param>
            <param name="usedsize">Count of used bytes in the Buff field</param>
        </member>
        <member name="T:Accon.AGLink.AsyncProgress">
            <summary>
            Structure for result data of the progress method in asynchronous mode
            </summary>
        </member>
        <member name="F:Accon.AGLink.AsyncProgress.ActualValue">
            <summary>
            Actual value
            </summary>
        </member>
        <member name="F:Accon.AGLink.AsyncProgress.MaximumValue">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="M:Accon.AGLink.AsyncProgress.#ctor(System.Int32,System.Int32)">
            <summary>
            Inizializes the structure with the data
            </summary>
            <param name="actual">Actual value</param>
            <param name="maximum">Maximum value</param>
        </member>
        <member name="T:Accon.AGLink.Extensions.CyclicReader">
            <summary>
            Zyklisches Leseobjekt, welches die AGLink-Internen Funktionen "xxCyclicReadEx" und Events zur Ausführung verwendet.
            </summary>
        </member>
        <member name="T:Accon.AGLink.Extensions.ICyclicReader">
            <summary>
            Interface for cyclic reading
            </summary>
        </member>
        <member name="M:Accon.AGLink.Extensions.ICyclicReader.Start(Accon.AGLink.AGL4.DATA_RW40[])">
            <summary>
            Starts the cyclic reading
            </summary>
            <param name="datadefinition">Data to be read</param>
        </member>
        <member name="M:Accon.AGLink.Extensions.ICyclicReader.Stop">
            <summary>
            Stops the cyclic reader
            </summary>
        </member>
        <member name="M:Accon.AGLink.Extensions.ICyclicReader.Pause">
            <summary>
            Pauses the read cycle
            </summary>
        </member>
        <member name="M:Accon.AGLink.Extensions.ICyclicReader.Resume">
            <summary>
            Resumes the paused reader
            </summary>
        </member>
        <member name="E:Accon.AGLink.Extensions.ICyclicReader.OnDataReceived">
            <summary>
            Iforms about received data
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.ICyclicReader.Intervall">
            <summary>
            Gets or sets the cycle intervall
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.ICyclicReader.MaxCycles">
            <summary>
            Gets or sets the maxium cycle count (&lt; 0 = infinite)
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.ICyclicReader.CurrentCycleCount">
            <summary>
            Gets the current count of cycles
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.ICyclicReader.IsActive">
            <summary>
            Gets whether the reader is active
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.ICyclicReader.IsPaused">
            <summary>
            Gets whether the reader is paused
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.ICyclicReader.InformOnlyOnDataChange">
            <summary>
            Gets or sets whether to inform the user just in case of changed data
            </summary>
        </member>
        <member name="E:Accon.AGLink.Extensions.CyclicReader.OnDataReceived">
            <summary>
            Ereignis, um über empfangene Daten informiert zu werden
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.CyclicReader.Intervall">
            <summary>
            Setzt oder gibt das Intervall mit dem die Lesezyklen durchgeführt werden sollen zurück<br/>
            Zulässig sind nur folgende Eingabe: 100, 200, ... 800, 900, 1000,2000, ... 8000, 9000, 10000, 20000, ... 80000, 90000
            Alles was davon abweicht wird von AGLink zum nächsten gültigen Wert gerundet.
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.CyclicReader.MaxCycles">
            <summary>
            Setzt oder gibt die maximale Anzahl von Lesezyklen zurück die durchgeführt werden sollen. Wobei -1 bedeutet, dass unendlich lang gelesen werden soll.
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.CyclicReader.CurrentCycleCount">
            <summary>
            Gibt die Anzahl bisher ausgeführter Lesezyklen
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.CyclicReader.IsActive">
            <summary>
            Gibt zurück ob das zyklische Lesen aktiv ist
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.CyclicReader.IsPaused">
            <summary>
            Gibt zurück ob das zyklische Lesen pausiert wurde
            </summary>
        </member>
        <member name="P:Accon.AGLink.Extensions.CyclicReader.InformOnlyOnDataChange">
            <summary>
            Gibt oder setzt ein Flag, welches angibt, ob eine Benachrichtiung nur bei geänderten Daten durchgeführt werden soll.
            </summary>
        </member>
        <member name="T:Accon.Symbolik.DB">
            <summary>
            Represents a data block
            </summary> 
        </member>
        <member name="M:Accon.Symbolik.DB.#ctor(System.Int32,System.Int32)">
            <summary>
            Erstellt einen neuen Datenbaustein
            </summary>
            <param name="dbnr">Nummer des Datenbausteins.</param>
            <param name="prjHandle"></param>
        </member>
        <member name="M:Accon.Symbolik.DB.loadDBSymbols">
            <summary>
            Loads all data blocks of teh specified S7-Program
            </summary>
            <returns>AGL40_SUCCESS if successfull otherwise  a error number &lt; 0</returns> 
        </member>
        <member name="M:Accon.Symbolik.DB.loadFilteredDBSymbols(System.String)">
            <summary>
            Loads the data blocks specified in the S7-Program using the given filter
            </summary>
            <param name="filter">DB-Filter</param>
            <returns>AGL40_SUCCESS if successfull otherwise a error number &lt; 0</returns> 
        </member>
        <member name="M:Accon.Symbolik.DB.getDBSymbol(System.String)">
            <summary>
            Gets the specified data block symbol
            </summary>
            <param name="name">Name of the symbol</param>
            <returns>Data block symbol if available otherwise null</returns> 
        </member>
        <member name="M:Accon.Symbolik.DB.CompareTo(System.Object)">
            <summary>
            Compares two object of type DB
            </summary>
            <param name="obj">Instance of an object of type DB</param>
            <returns></returns> 
        </member>
        <member name="P:Accon.Symbolik.DB.DBNr">
            <summary>
            Gets the number of the data block
            </summary> 
        </member>
        <member name="P:Accon.Symbolik.DB.DBSymbole">
            <summary>
            Gets the list of the data block symbols that can be accessed through this data block
            </summary> 
        </member>
        <member name="P:Accon.Symbolik.DB.DBSymbolCount">
            <summary>
            Gets the count of the data block symbols
            </summary> 
        </member>
        <member name="P:Accon.Symbolik.DB.Item(System.String)">
            <summary>
            Gets the specified data block symbol
            </summary>
            <param name="name">Name of the symbol</param>
            <returns>Data block symbol if available otherwise null</returns> 
        </member>
        <member name="T:Accon.Symbolik.Converter">
            <summary>
            Konvertiert die unterschiedlichen Unmanaged Strukturen ins Managed und andersherum
            </summary>
        </member>
    </members>
</doc>
